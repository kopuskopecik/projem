def content():
    return ['<p>Python is a&nbsp;programming&nbsp;language like C, C++, Perl, Ruby, JavaScript&nbsp;etc.&nbsp;</p>\r\n\r\n<p>Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, see http://www.cwi.nl) in the Netherlands as a successor of a language called ABC. The name of Python come from Monty Python&rsquo;s Flying Circus which is stage of the Monty Python which is comedy group.</p>\r\n\r\n<p>Once you learn one programming language such as Python, you will find it much easier to learn a second programming language such as JavaScript or C++.&nbsp;The new programming language has very different vocabulary and grammar but the problem-solving skills will be the same across all programming languages.</p>\r\n\r\n<p>You will learn the &ldquo;vocabulary&rdquo; and &ldquo;sentences&rdquo; of Python pretty quickly. Just little try it.<br />\r\n&nbsp;</p>', '<p>Python can work without <span style="background-color:#c0392b">interpe</span>&nbsp;but&nbsp;C and C++ and others can&#39;t. so it is easy to writing and updating(geliştirme) programs very quickly. On the other hand Python has very simple script that&#39;s why a lot of programmer prefer Python. Because&nbsp; of this, a programmer eaisily can write and understand a Python program. Therefore Google, YouTube and Yahoo need Pyhon programmers. You can see <span style="background-color:#e74c3c">below&nbsp;</span>difference between script of Python and Java.</p>\r\n\r\n<p><span style="background-color:#e74c3c">buraya &ouml;rnekleri eklemeyi unutma</span></p>\r\n\r\n<p><strong>Medium Support</strong></p>\r\n\r\n<p><span style="background-color:null">Python can work in many medium such as: Mac OS X, AS/400, BeOS, MorphOS, OS/2, OS/390, z/OS, RiscOS, S60, Solaris, VMS, Windows CE, HP-UX and Android etc. On the other hand a written&nbsp;&nbsp;python program in any medium can work in other mediums without any change or a bit change.&nbsp;</span></p>\r\n\r\n<p><span style="background-color:null">In our website we will explain for GNU/Linux and Microsoft Windows </span><span style="background-color:#c0392b">işletim sistemleri&nbsp;</span><span style="background-color:null">so whatever version of GNU/Linux or Windows you use, you can learn Python and work with&nbsp;your system.&nbsp;</span></p>\r\n\r\n<p><strong>Python Versions</strong></p>\r\n\r\n<p>Python has two versions. Pyhon 2x and Python 3x. They have different versions too such as 2.7.11, 3.5.1...</p>\r\n\r\n<p>Python3 is more powerfull than Python2 and is cleared from faults of Python2. Because of very big changes, a Python2&nbsp;program can&#39;t work in Python3 and vice versa..</p>\r\n\r\n<p><strong>Which Python version&nbsp;should I learn?</strong></p>\r\n\r\n<p>Python3</p>\r\n\r\n<p>But you need some modules that only can work under Python2 so you should use Python2.&nbsp;</p>\r\n\r\n<p>However don&#39;t forget future of this script is Python3 and Python2 will disappear one day.&nbsp;</p>', '<p>if you want to write Python codes and write program, you should set up Python. Before beginning setup, be carefull about your <strong>işletim sistemi.&nbsp;</strong></p>\r\n\r\n<p>we will show setup for GNU/Linux and Windows.</p>\r\n\r\n<p><strong>GNU/Linux</strong></p>\r\n\r\n<p>&nbsp;</p>', '<p>4.lesson</p>', '<p>Python interactive shell is very usefull to check commands for Python programmers especially new programmer.&nbsp; Python shell will&nbsp;start when you type <em>python, python3, py3, py -3</em>&nbsp;to command window or terminal depend on operating systems(Windows, Linux,,,)&nbsp; and then you will see like this:</p>\r\n\r\n<p>Python 3.5.1 (v3.5.1:37a07cee5969, Dec 6 2015, 01:54:25) [MSC v.1900 64 bit (AMD64)] on win32 Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span></p>\r\n\r\n<p>Don&#39;t forget that Python shell is different from command(terminal) window so Python commands(print(&quot;Hello World&quot;)) can&#39;t work in command window and vice versa such as: cd desktop, dir and ls are command of command window.&nbsp;If you try, you will take error message like this:</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> cd Desktop<br />\r\nFile &quot;&lt;stdin&gt;&quot;, line 1<br />\r\ncd Desktop<br />\r\n^<br />\r\n<span style="color:#e74c3c">SyntaxError:</span> <strong>invalid syntax</strong></p>\r\n\r\n<p><strong>There are few days to exit from Python shell &nbsp;</strong></p>\r\n\r\n<p>1. pushing &quot;x&quot; button</p>\r\n\r\n<p>2. firstly pushing Ctrl + Z and then Enter (Windows)</p>\r\n\r\n<p>3.&nbsp;pushing Ctrl + Z(Linux)</p>\r\n\r\n<p>4. firstly pushing F6 and then Enter (all of them)</p>\r\n\r\n<p>5. import sys; sys.exit() command (all of them)</p>\r\n\r\n<p><strong>First steps in shell</strong></p>\r\n\r\n<p>The <span style="color:#e67e22">&gt;&gt;&gt;</span> prompt means &quot;Python interpreter is ready to take to commands&quot; . Now we are ready to type check it. but you should type command or codes without any space after&nbsp;<span style="color:#e67e22">&gt;&gt;&gt;prompt.&nbsp;</span><span style="color:null">Lets write &quot;Hello World&quot; to python shell like this:</span></p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span><span style="color:null">&quot;Hello World&quot;</span></p>\r\n\r\n<p><span style="color:null">and output is&nbsp;</span></p>\r\n\r\n<p><span style="color:null">&#39;Hello World&#39;</span><br />\r\nNow we wrote our first simple command to shell.&nbsp;</p>', '<p>Although Python interactive shell is very useful, your real workplace is not shell, therefore you&nbsp;need metin d&uuml;zenleyici to write&nbsp;and save Python&nbsp;file for comprehensive commands. Maybe Notepad is enough to begin but colourful one for Python codes/commands will be&nbsp;more useful for you.&nbsp;</p>\r\n\r\n<p><strong>for Linux</strong></p>\r\n\r\n<p>If you have GNU/Linux-&nbsp;Unity or&nbsp;GNOME operating system, Gedit is enough to begin.</p>\r\n\r\n<p>if you have GNU/Linux-&nbsp;KDE, Kwrite is enough to begin.&nbsp;</p>\r\n\r\n<p>To open new file in Gedit, you may Alt + F2, and write&nbsp;<em>gedit</em> to opened window.<br />\r\nIf you use Kwrite, you may&nbsp;Alt + F2, and write <em>kwrite</em>&nbsp;to opened window.</p>\r\n\r\n<p><strong>for Windows</strong></p>\r\n\r\n<p>For the beginners Python IDLE is most suitable Metin D&uuml;zenleyici. You can reach IDLE from Start/Programs/Python3.6/IDLE path. Then you will see like this:</p>\r\n\r\n<p><img alt="" class="img-responsive" src="http://127.0.0.1:8000/static/img/shell.png/" style="height:130px; width:684px" /></p>\r\n\r\n<p>This page must seem familiar. it has &gt;&gt;&gt;prompt too like Python İnteractive shell. actually both of them&nbsp;are&nbsp;same things. so if you want to see effect of short command, you can&nbsp;use this area too. However our aim is to use save and write programs so we need space in a window.</p>\r\n\r\n<p>To have space for writing program, click file in the above shell image and then click new. Finally you will see like this:</p>\r\n\r\n<p><img alt="" class="img-responsive" src="http://127.0.0.1:8000/static/img/pythonfile.png" style="height:171px; width:711px" /></p>\r\n\r\n<p>we will write all Python commands to this area. Let&#39;s us make an example. write commands under it to file of IDLE.</p>\r\n\r\n<p>name = &quot;Angelina&quot;<br />\r\nsurname = &quot;Jolie&quot;<br />\r\nprint(name, surname)</p>\r\n\r\n<p>and then you click File/Save as and rename first_program.py. Finally click Run/Run Module</p>\r\n\r\n<p>You will see in Python shell &quot;Angelina Jolie&quot;. Of course not real one only name and surname<img alt="laugh" src="http://127.0.0.1:8000/static/ckeditor/ckeditor/plugins/smiley/images/teeth_smile.png" style="height:23px; width:23px" title="laugh" />.</p>\r\n\r\n<p>Now we learnt how to write and run a program basically.</p>', '<p>Value is the simplest part of a program. It can be string, number, list, dictionary or tuples in Python.&nbsp;</p>\r\n\r\n<p>a = &quot; Hello World &quot;</p>\r\n\r\n<p>b = 23</p>\r\n\r\n<p>Above, Hello World and 23 are value; string and number</p>\r\n\r\n<p>if we want to type a&nbsp;string, we should use&nbsp;quotation marks of &quot; &quot;, &#39; &#39;, &quot;&quot;&quot; &quot;&quot;&quot;&quot; such as &quot;hello world&quot;, &#39;hello world or &quot;&quot;&quot;hello world&quot;&quot;&quot;&#39;</p>\r\n\r\n<p>numbers are typed as 23, 25, 102...</p>\r\n\r\n<p>a and b are variable names.</p>\r\n\r\n<p><strong>Variables</strong></p>\r\n\r\n<p>variables keep values. it is very usefull&nbsp;to change, store&nbsp;values.</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span>name = &quot;John&quot;<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span>age = 23</p>\r\n\r\n<p>in this exampe, name and age are our variables. name variable assigns a string named John, age assigns the number 17 as integer.</p>\r\n\r\n<p><strong>Displaying variables and their types</strong></p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> print(name)<br />\r\n&#39;John&#39;<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> print(age)<br />\r\n23</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> type(name)<br />\r\n&lt;class &#39;str&#39;&gt;<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> type(age)<br />\r\n&lt;class &#39;int&#39;&gt;</p>\r\n\r\n<p><strong>Note: </strong>we will explain print statement and type function other&nbsp;lessons.</p>\r\n\r\n<p><strong>Variable names and keywords</strong><br />\r\nthere are some rules and point when programmers choose a variable name.&nbsp;</p>\r\n\r\n<p>1. a variable name can&#39;t begin with number, operator(+,-,*,/).</p>\r\n\r\n<p>&nbsp;<span style="color:#e67e22">&gt;&gt;&gt;</span>2man&nbsp;=&quot;John and Johny&quot; this is falsh.</p>\r\n\r\n<p>2. a variable name should begin a letter or the underscore character(_)</p>\r\n\r\n<p><span style="color:#e67e22">&nbsp;&gt;&gt;&gt;</span> age = 23<br />\r\n&nbsp;<span style="color:#e67e22">&gt;&gt;&gt;</span>_age = 23 it can&#39;t be adiviced<br />\r\n&nbsp;<span style="color:#e67e22">&gt;&gt;&gt;</span>johns_age = 23</p>\r\n\r\n<p>3. a variable name can&#39;t be Python&#39;s keyword.</p>\r\n\r\n<p>[&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]</p>\r\n\r\n<p>if you try, you will take an error like this:</p>\r\n\r\n<p>&nbsp; &nbsp;<span style="background-color:#e67e22">&nbsp;</span><span style="color:#e67e22">&gt;&gt;&gt;</span> as = &quot;doctor&quot;<br />\r\n&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1<br />\r\n&nbsp; &nbsp; as = &quot;doctor&quot;<br />\r\n&nbsp; &nbsp; ^<br />\r\n&nbsp; &nbsp;<span style="color:#c0392b">SyntaxError</span>: <strong>invalid syntax</strong></p>\r\n\r\n<p>if you want to see keyword list, you can use the codes:</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> import keyword<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> keyword.kwlist<br />\r\n[&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]</p>\r\n\r\n<p>4. you shouldn&#39;t use function name as variables. Python let you use but then you can&#39;t use function.</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> type = 3456<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> type(&quot;apple&quot;)<br />\r\nTraceback (most recent call last):<br />\r\nFile &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n<span style="color:#e74c3c">TypeError</span>: <strong>&#39;int&#39; object is not callable</strong><br />\r\n5. you can&#39;t use space between letters</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span>two country&nbsp;= &quot; England France &quot; this usage is wrong. but you can use like this:<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span>two_country = &quot;England France&quot;</p>\r\n\r\n<p><strong>to give same value&nbsp;&nbsp;to different variables</strong></p>\r\n\r\n<p>you can use&nbsp;</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span>a = 6<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span>b = 6</p>\r\n\r\n<p>or&nbsp;</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span>a = b = 6</p>\r\n\r\n<p>that is very practical.</p>\r\n\r\n<p><strong>replacing values of variables</strong></p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span>john = &quot;doctor&quot;<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span>jim = &quot;teacher&quot;</p>\r\n\r\n<p>if you want to make john be &quot;teacher&quot; and make jim be &quot;doctor&quot;, you can use this commands:</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span>john, jim = jim, john</p>\r\n\r\n<p>if we want to see changes</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span>print(john)<br />\r\n&#39;teacher&#39;</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span>print(jim)<br />\r\n&#39;doctor&#39;</p>\r\n\r\n<p>&nbsp;</p>', '<p>Operators compute some execution such as:&nbsp;addition, subtraction, multiplication, division, boolean and exponentiation and they have special symbols like +, -, /, *...&nbsp;</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span><span style="color:null">a = 5</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span><span style="color:null">b</span><span style="color:#e67e22">&nbsp;</span><span style="color:null">= 10</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span><span style="color:null">a+b</span><br />\r\n15</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span><span style="color:null">b/a</span><br />\r\n<span style="color:null">2</span></p>', '<p><strong>addition(+)</strong></p>\r\n\r\n<p>&gt;&gt;&gt; 45 + 33<br />\r\n78</p>\r\n\r\n<p><strong>Note: </strong>+<strong>&nbsp;</strong>operator works with strings. But it do&nbsp;concatenating like this:</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;google&quot; + &quot;.com&quot;<br />\r\n&#39;google.com&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;Hello&quot; + &quot;World&quot;<br />\r\n&#39;HelloWorld&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; first&nbsp;= 10&nbsp;<span style="color:#27ae60">&nbsp;#&nbsp;<strong>here type of first variable is number (integer)&nbsp;</strong></span><br />\r\n&gt;&gt;&gt; second = 15<br />\r\n&gt;&gt;&gt; print(first+second)<br />\r\n25<br />\r\n&gt;&gt;&gt; first = &#39;100&#39;&nbsp; <span style="color:#27ae60">#&nbsp;<strong>here type of first variable is string because of writing between &#39; &#39; marks</strong></span><br />\r\n&gt;&gt;&gt; second = &#39;150&#39;<br />\r\n&gt;&gt;&gt; print(first + second)<br />\r\n100150</p>\r\n\r\n<p><strong>subtraction(-)</strong></p>\r\n\r\n<p>&gt;&gt;&gt; 45 -&nbsp;33<br />\r\n22</p>\r\n\r\n<p><strong>multiplication(*)</strong></p>\r\n\r\n<p>&gt;&gt;&gt; 23 * 46<br />\r\n1058</p>\r\n\r\n<p><strong>Note: </strong>*<strong>&nbsp;</strong>operator works with strings. But it do&nbsp;copying&nbsp;like this:</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;slow&nbsp;&quot; * 2<br />\r\n&#39;slow&nbsp;slow&nbsp;&#39;<br />\r\n&gt;&gt;&gt; &quot;-&quot; * 30<br />\r\n&#39;------------------------------&#39;</p>\r\n\r\n<p><strong>division(/)</strong></p>\r\n\r\n<p>&gt;&gt;&gt; 46&nbsp;* 23<br />\r\n2</p>\r\n\r\n<p><strong>modulus(%)</strong><br />\r\nThe modulus operator works on integers and yields the remainder</p>\r\n\r\n<p>&gt;&gt;&gt; 30 % 4<br />\r\n2</p>\r\n\r\n<p>&gt;&gt;&gt; remainder = 7 % 3<br />\r\n&gt;&gt;&gt; print(remainder)<br />\r\n1<br />\r\nSo 7 divided by 3 is 2 with <strong>1</strong> left over.</p>\r\n\r\n<p><strong>quotient(//)</strong></p>\r\n\r\n<p>&gt;&gt;&gt; quotient = 14&nbsp;// 3<br />\r\n&gt;&gt;&gt; print(quotient)<br />\r\n4<br />\r\nSo 14&nbsp;divided by 3&nbsp;is <strong>4&nbsp;</strong>with 2&nbsp;left over.</p>\r\n\r\n<p>&gt;&gt;&gt; 5 // 2<br />\r\n2<br />\r\nSo 5&nbsp;divided by 2&nbsp;is <strong>2</strong> with 1 left over.</p>\r\n\r\n<p><strong>exponentiation(**)</strong></p>\r\n\r\n<p>&gt;&gt;&gt; 25 ** 2<br />\r\n625<br />\r\n&gt;&gt;&gt; 625 ** 0.5<br />\r\n25.0</p>\r\n\r\n<p><strong>Rules of precedence</strong></p>\r\n\r\n<p>Python follows mathematical convention and so:</p>\r\n\r\n<p>1.<strong>&nbsp;</strong>Parentheses have the highest precedence:&nbsp;2 * (7-1) is 12 not 13<br />\r\n2.&nbsp;Exponentiation has the next highest precedence:&nbsp;2**3+1 is 9, not 8<br />\r\n3.&nbsp;Multiplication and Division has the same precedence, after that&nbsp;Addition and Subtraction that are the same precedence<br />\r\n&nbsp; &nbsp; 2*3-1is 5, not 4, and 6+4/2 is 8.0, not 5.<br />\r\n4.&nbsp;Operators with the same precedence are evaluated from left to right. So the expression 5-3-1 is 1, not 3, because the 5-3 happens first&nbsp; &nbsp; &nbsp; and then 1 is subtracted from 2</p>', '<p>This operators compares two operands and produce True or False result.</p>\r\n\r\n<table border="1" cellpadding="1" cellspacing="1">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>a==b</td>\r\n\t\t\t<td>a is equal to b</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>a != b</td>\r\n\t\t\t<td>a is not equal to b</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>a &gt; b</td>\r\n\t\t\t<td>a is greater than b</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>a &lt; b</td>\r\n\t\t\t<td>a is less than b</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>a &gt;= b</td>\r\n\t\t\t<td>a is greater than or equal to b</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>a &lt;= b</td>\r\n\t\t\t<td>a is less than or equal to b</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>a is b</td>\r\n\t\t\t<td>a is the same as b</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>a is not b</td>\r\n\t\t\t<td>a is not the same as b</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style="color:#c0392b">Examples1:</span></p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> 9&nbsp;== 9<br />\r\n<span style="color:#2ecc71">True</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> 9&nbsp;&lt;&nbsp;6<br />\r\n<span style="color:#2ecc71">False</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> 9 &lt;&nbsp;6<br />\r\n<span style="color:#2ecc71">False</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> 9&nbsp;== 6<br />\r\n<span style="color:#2ecc71">False</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> 9 != 9<br />\r\nFalse<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> 9 &gt;&nbsp;6<br />\r\n<span style="color:#27ae60">True</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> 9 &lt;&nbsp;6<br />\r\nFalse<br />\r\n&gt;&gt;&gt; 9&nbsp;== 6<br />\r\n<span style="color:#2ecc71">False</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> 9 &lt;= 6<br />\r\nFalse<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> 9 &gt;= 6<br />\r\n<span style="color:#2ecc71">True</span></p>\r\n\r\n<p><span style="color:null"><strong>Diffrence between == and is operators</strong></span></p>\r\n\r\n<p>== operator compare if values are same or not.</p>\r\n\r\n<p>is operator compare if memory adress are same or not.&nbsp;</p>\r\n\r\n<p>&gt;&gt;&gt; a = &quot;python is programming language&quot;<br />\r\n&gt;&gt;&gt; b = &quot;python is programming language&quot;<br />\r\n&gt;&gt;&gt; a == b<br />\r\nTrue<br />\r\n&gt;&gt;&gt; a is b<br />\r\nFalse<br />\r\n&gt;&gt;&gt; print(id(a),id(b))<br />\r\n36386424 36386256</p>\r\n\r\n<p><strong>Note:</strong> id function show us memory adress of a variable.</p>', '<p>Computer know only two things : 1 or 0. it means True or False. They called bool value which are come&nbsp;from surname of mathematician George Boole.&nbsp;</p>\r\n\r\n<p><strong>bool function</strong></p>\r\n\r\n<p>bool functhion show us if an expression or value is True False.<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> bool(3)<br />\r\n<span style="color:#27ae60">True</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> bool(&quot;something&quot;)<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> bool(&quot; &quot;)<br />\r\n<span style="color:#27ae60">True</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> bool(&quot; &quot;)<br />\r\n<span style="color:#27ae60">True</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> bool(&quot;fdsdfsdg&quot;)<br />\r\n<span style="color:#27ae60">True</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> bool(&quot;0&quot;)<br />\r\n<span style="color:#27ae60">True</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> bool(0)<br />\r\nFalse<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> bool(&quot;&quot;)<br />\r\nFalse</p>\r\n\r\n<p><strong>and operator</strong></p>\r\n\r\n<p>it checks all of situation if it is true. If it is, output&nbsp;is True value.&nbsp;If not,&nbsp; output is&nbsp;&nbsp;False value.</p>\r\n\r\n<p><span style="color:#e74c3c">Example1:</span></p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> x = 10<br />\r\n&nbsp;</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> x &gt; 9&nbsp;and x &lt;= 10<br />\r\n<span style="color:#27ae60">True</span></p>\r\n\r\n<p><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> x &gt; 10 and x &lt; 15<br />\r\n<span style="color:#27ae60">False</span></p>\r\n\r\n<p><span style="color:null"><strong>or operator</strong></span></p>\r\n\r\n<p>it checks one of situation if it is true.&nbsp;If it is, output&nbsp;is True value.&nbsp;If not,&nbsp; output is&nbsp;&nbsp;False value.</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> x = 10<br />\r\n&nbsp;</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> x &gt; 10&nbsp;and x &lt;= 10<br />\r\n<span style="color:#27ae60">True</span></p>\r\n\r\n<p><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> x &gt; 10 and x &lt; 15<br />\r\n<span style="color:#27ae60">True</span></p>\r\n\r\n<p><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> x &gt; 10 and x &lt; 9<br />\r\n<span style="color:#2ecc71">False</span></p>\r\n\r\n<p><strong>not operator</strong></p>\r\n\r\n<p>If a situation is not true, it send True value. Additionally, it behaves opposite of bool function.</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> a = 5<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> b = 6</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> not a &lt; 6<br />\r\n<span style="color:#27ae60">False</span></p>\r\n\r\n<p><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> not a &gt; 6<br />\r\n<span style="color:#27ae60">True</span><br />\r\n-------------------</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> a = 23<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> not a<br />\r\n<span style="color:#1abc9c">False</span><br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> bool(a)<br />\r\n<span style="color:#27ae60">True</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> a = &quot;&quot;<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> not a<br />\r\n<span style="color:#27ae60">True</span><br />\r\n&gt;&gt;&gt; bool(a)<br />\r\nFalse</p>', '<p><strong>= operator</strong></p>\r\n\r\n<p>its mission is giving value to a variable or other compenents(function, class...)</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> a = 5<br />\r\n<strong>+= operator</strong></p>\r\n\r\n<p>&gt;&gt;&gt; a += 2<br />\r\n&gt;&gt;&gt;print(a)<br />\r\n5</p>\r\n\r\n<p>&gt;&gt;&gt; a = a + 2<br />\r\n&gt;&gt;&gt;print(a)<br />\r\n5</p>\r\n\r\n<p>Above there are two assignment examples.&nbsp;they do same mission. But&nbsp;&nbsp;a += 5 assignment is faster than other one because variable &quot;a&quot; is computed one time. by Python.</p>\r\n\r\n<p><strong>-= operator</strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = 12<br />\r\n&gt;&gt;&gt; a -= 5<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n7</p>\r\n\r\n<p>They are all same like this:</p>\r\n\r\n<p>&gt;&gt;&gt; a = 12<br />\r\n&gt;&gt;&gt; a = a - 5<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n7</p>\r\n\r\n<p><strong>/= operator</strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = 12<br />\r\n&gt;&gt;&gt; a /= 3<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n4</p>\r\n\r\n<p>are same as</p>\r\n\r\n<p>&gt;&gt;&gt; a = 12<br />\r\n&gt;&gt;&gt; a = a / 3<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n4<br />\r\n<strong>*= operator</strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = 10<br />\r\n&gt;&gt;&gt; a *= 2<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n20</p>\r\n\r\n<p>are same as</p>\r\n\r\n<p>&gt;&gt;&gt; a = 10<br />\r\n&gt;&gt;&gt; a = a * 2<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n20<br />\r\n<strong>%= operator</strong><br />\r\n<br />\r\n&gt;&gt;&gt; a = 50<br />\r\n&gt;&gt;&gt; a %= 3<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n2</p>\r\n\r\n<p>are same as</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; a = 50<br />\r\n&gt;&gt;&gt; a = a % 3<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n2<br />\r\n<strong>**= operator</strong><br />\r\n&gt;&gt;&gt; a = 10<br />\r\n&gt;&gt;&gt; a **= 2<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n100<br />\r\n<br />\r\n&gt;&gt;&gt; a = 10<br />\r\n&gt;&gt;&gt; a = a ** 2<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n100<br />\r\n<strong>//= operator</strong><br />\r\n&gt;&gt;&gt; a = 5<br />\r\n&gt;&gt;&gt; a //= 2<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n2<br />\r\n<br />\r\n&gt;&gt;&gt; a = 5<br />\r\n&gt;&gt;&gt; a = a // 2<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n2</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>', '<p>Python has only one possessive operator that is <strong>&quot;in&quot; </strong>. It&nbsp;returns True or False.&nbsp;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;a&quot; in &quot;abcd&quot;<br />\r\nTrue</p>\r\n\r\n<p>because &quot;a&quot; character is in &quot;abcd&quot; string, it returns True</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot;f&quot; in&nbsp;&quot;abcd&quot;<br />\r\nFalse</p>\r\n\r\n<p>because &quot;f&quot; character is not in &quot;abcd&quot; string, it returns False</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;a&quot; not in &quot;abcd&quot;<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;f&quot; not in &quot;abcd&quot;<br />\r\nTrue</p>', '<p>Everything has an unique identity in Python. Actually it means&nbsp;memory adress. if we see this identity, we will use id() function.</p>\r\n\r\n<p>&gt;&gt;&gt; a = 25<br />\r\n&gt;&gt;&gt; id(a)<br />\r\n1772636176</p>\r\n\r\n<p>&gt;&gt;&gt; a = 50<br />\r\n&gt;&gt;&gt; id(a)<br />\r\n1772636576</p>\r\n\r\n<p>&gt;&gt;&gt; our_string = &quot;Python Family&quot;<br />\r\n&gt;&gt;&gt; id(our_string)<br />\r\n36439208</p>\r\n\r\n<p><strong>Note: </strong>numbers and strings(strings have numbers too (you can see ASCII tables)) between -5 and 257 are computed <span style="background-color:#e74c3c">in cache(</span><strong><span style="background-color:#e74c3c">&ouml;n bellek)</span></strong><span style="background-color:#e74c3c">&nbsp;</span><span style="background-color:null">&nbsp;so id function show us same memory adress for same value. Lets look this examples:</span></p>\r\n\r\n<p><span style="color:#e74c3c">#values of a and b are 100 that is between -5 and 257 so due to same values, they have same memory adress in cache.</span><br />\r\n&gt;&gt;&gt; a = 100<br />\r\n&gt;&gt;&gt; b = 100<br />\r\n&gt;&gt;&gt; print(id(a), id(b))<br />\r\n1772637376 1772637376<br />\r\n&gt;&gt;&gt; a is b<br />\r\nTrue</p>\r\n\r\n<p>&gt;&gt;&gt; a = 256<br />\r\n&gt;&gt;&gt; b = 256<br />\r\n&gt;&gt;&gt; print(id(a), id(b))<br />\r\n1772639872 1772639872<br />\r\n&gt;&gt;&gt; a is b<br />\r\nTrue</p>\r\n\r\n<p>&gt;&gt;&gt; a = 257<br />\r\n&gt;&gt;&gt; b = 257<br />\r\n&gt;&gt;&gt; print(id(a), id(b))<br />\r\n36128752 36128192<br />\r\n&gt;&gt;&gt; a is b<br />\r\nFalse</p>\r\n\r\n<p>&gt;&gt;&gt; a = &quot;python&quot;<br />\r\n&gt;&gt;&gt; b = &quot;python&quot;<br />\r\n&gt;&gt;&gt; print(id(a),id(b))<br />\r\n35823200 35823200<br />\r\n&gt;&gt;&gt; a is b<br />\r\nTrue</p>\r\n\r\n<p>&gt;&gt;&gt; a = &quot;python python python python&quot;<br />\r\n&gt;&gt;&gt; b = &quot;python python python python&quot;<br />\r\n&gt;&gt;&gt; print(id(a),id(b))<br />\r\n35790760 36386480<br />\r\n&gt;&gt;&gt; a is b<br />\r\nFalse<br />\r\n&nbsp;</p>', '<p>To be understood&nbsp;or explain a&nbsp;program, we need some notes which don&#39;t&nbsp;affect program. That&#39;s why programmers use comments which symbol in Python is&nbsp;#&nbsp; . Such as:</p>\r\n\r\n<p><span style="color:#e74c3c"># Bu program k&uuml;renin alanını hesaplar</span></p>\r\n\r\n<p><span style="background-color:null">pi = 3.14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color:#e74c3c"><span style="background-color:null">#&nbsp;</span>pi constant&nbsp;number</span><br />\r\n<span style="background-color:null">r = 6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color:#e74c3c"><span style="background-color:null">&nbsp;#</span>&nbsp;remisphere</span><br />\r\n<span style="background-color:null">a = pi * r**2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color:#e74c3c"><span style="background-color:null">#</span> alan</span></p>', '<p>Python has three conditional words: if, elif and else.</p>\r\n\r\n<p><strong>if&nbsp;</strong></p>\r\n\r\n<p>The &quot;if&quot; statement is used for conditional execution. if a condition&nbsp;is true, then indented statement(s) is computed.&nbsp;Let&#39;s examine below example.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">#Example1</span></strong></p>\r\n\r\n<p>a = 4<br />\r\n<span style="color:#16a085">if</span> a == 4:<br />\r\n&nbsp; &nbsp; print(&quot;a is four&quot;)<br />\r\n&nbsp;</p>\r\n\r\n<p>#we should focus two&nbsp;main point above example</p>\r\n\r\n<p>1.<strong> a ==4</strong> result of&nbsp;&nbsp;this statement send True value because&nbsp;variable a equals 4.</p>\r\n\r\n<p>2.&nbsp;<strong>if a == 4:</strong> structure of if statement consists of colon character (:) which must be end of header line. and structure of Python&#39;s condition statements(if, elif, else), function definitions and&nbsp;loops(for, while) must have indented&nbsp;statement after&nbsp;colon character (:) for compute something(print(&quot;a is four&quot;)&nbsp;). this intended space is very important to write meaningful programs. and it can be done with four space character(button). you can use Tab button too if you have <span style="background-color:null">text editor</span>&nbsp;like Python IDLE.&nbsp;</p>\r\n\r\n<p>if this codes are written in Python Shell, after&nbsp;<strong>if a == 4:&nbsp;</strong>statement you will see like this:</p>\r\n\r\n<p>&gt;&gt;&gt; if a&nbsp;==&nbsp;4:<br />\r\n...<br />\r\nThis tree point means that Python waits something for computing. and then you can write&nbsp;print(&quot;a is four&quot;) for above example.</p>\r\n\r\n<p><strong><span style="color:#e74c3c"><span style="background-color:null">#Example 2</span></span></strong></p>\r\n\r\n<p>number = int(input(&quot;write a number, please: &quot;))<br />\r\nif number&nbsp;&gt; 20:<br />\r\n&nbsp; &nbsp; print(&quot;The number is bigger than 20&quot;)<br />\r\nif number&nbsp;&lt; 20:<br />\r\n&nbsp; &nbsp; print(&quot;The number is smaller than 20&quot;)<br />\r\nif number&nbsp;== 20:<br />\r\n&nbsp; &nbsp; print(&quot;The number equals 20&quot;)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>In the Example2 firstly we ask a number from a user with input function which returns always string so we use int function to convert from string to integer.&nbsp;&nbsp;</p>\r\n\r\n<p>then we have three condition depend on user&#39;s number.</p>\r\n\r\n<p>if the number bigger than 20, print(&quot;The number is bigger than 20&quot;)&quot; codes&nbsp;work.</p>\r\n\r\n<p>if the number smaller than 20,&nbsp;print(&quot;The number is smaller than 20&quot;) codes work.</p>\r\n\r\n<p>if the number equals 20,&nbsp;print(&quot;The number equals 20&quot;) codes work.</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>if user&#39;s input is not a number such as string, program will return Error message. Our aim is understanding work of if statement in this example. Next lessons we will fix errors.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">#Example3</span></strong></p>\r\n\r\n<p><span style="color:null">x = 5<br />\r\nif x ==5:<br />\r\n&nbsp; &nbsp; print(&quot;x equals five&quot;)<br />\r\nif x &gt; 4:<br />\r\n&nbsp; &nbsp; print(&quot;x is bigger than 4&quot;)</span></p>\r\n\r\n<p><span style="color:null">x equals five<br />\r\nx is bigger than 4</span></p>\r\n\r\n<p>the result of this codes is indented statements of&nbsp;both if statements because both condition has True value.&nbsp;</p>\r\n\r\n<p><strong>elif</strong></p>\r\n\r\n<p>When we have more than two possibilities, we can use elif word with if word.&nbsp;But result is only one of them, therefore&nbsp;Python search first True statement. If it is found, Python ignore other elif statements.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">#Example4</span></strong></p>\r\n\r\n<p>x = int(input (&quot;Write a number1 please: &quot;))<br />\r\ny = int(input (&quot;Write a number2 please: &quot;))<br />\r\nif x &gt; y:<br />\r\n&nbsp; &nbsp; print(&quot;x is bigger than y&quot;)<br />\r\nelif x &lt; y:<br />\r\n&nbsp; &nbsp; print(&quot;x is smaller than y&quot;)<br />\r\nelif x == y:<br />\r\n&nbsp; &nbsp; print(&quot;x equals y&quot;)</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Each condition is controlled in order. If the first is false, the next is checked. when True one is found, its intended codes are executed.&nbsp;&nbsp;</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><strong>else</strong></p>\r\n\r\n<p>else word&nbsp;is used with two statement:&nbsp;</p>\r\n\r\n<p>1. if and else together : if condition is false, indented codes&nbsp;under else works.</p>\r\n\r\n<p>2. if, elif and else together : if all confition is false,&nbsp;indented codes&nbsp;under else works.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example5</span></strong></p>\r\n\r\n<p>x = int(input (&quot;Write a number1 please:&nbsp;&nbsp;&quot;))<br />\r\ny = int(put (&quot;Write a number2 please:&nbsp;&nbsp;&quot;))<br />\r\nif x &gt; y:<br />\r\n&nbsp; &nbsp; print(&quot;x is bigger than y&quot;)<br />\r\nelif x &lt; y:<br />\r\n&nbsp; &nbsp; print(&quot;x is smaller than y&quot;)<br />\r\nelse:<br />\r\n&nbsp; &nbsp; print(&quot;x equals y&quot;)</p>\r\n\r\n<p>if and elif condition is controlled in order. if both are false value, else works.</p>\r\n\r\n<p>when you enter&nbsp;10 for x and 10 for y, result is &#39;x equals y&#39;.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example6</span></strong></p>\r\n\r\n<p>if x%2 == 0 :<br />\r\nprint(&#39;x is even&#39;)<br />\r\nelse :<br />\r\nprint(&#39;x is odd&#39;)<br />\r\n&nbsp;</p>\r\n\r\n<p>when you enter 0 or 2 or 4 or 6 so on &nbsp;for x, result is &#39;x is even&#39;</p>\r\n\r\n<p>when you enter 1&nbsp;or 3&nbsp;or 5&nbsp;or 7&nbsp;so on &nbsp;for x, result is &#39;x is odd&#39;</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;else depend on the first previous if statement.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example6</span></strong></p>\r\n\r\n<p>x = int(input (&quot;Write a number please: &quot;))<br />\r\nif x ==7:<br />\r\n&nbsp; &nbsp; print(&#39;x equals 7&#39;) &nbsp;&nbsp;<br />\r\nif x%2 == 0 :<br />\r\n&nbsp; &nbsp; print(&#39;x is even&#39;)<br />\r\nelse :<br />\r\n&nbsp; &nbsp; print(&#39;x is odd&#39;)</p>\r\n\r\n<p>if you enter 7&nbsp;for x, else work for only&nbsp;if x%2 == 0 condition.</p>\r\n\r\n<p>x equals 7<br />\r\nx is even</p>', '<p>input function is very useful to take input from user. This built-in function is ready to use all time.&nbsp; Users can enter a value for a variable via their keyboard. it returns string. when we want to take number which is actually string so&nbsp;we shouldn&#39;t forget this.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; name = input(&#39;What is your name?\\n&#39;)<br />\r\nWhat is your name?<br />\r\nJack<br />\r\n&gt;&gt;&gt; print(name)<br />\r\nJack</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; age = input(&quot;How old are you?\\n&quot;)<br />\r\nHow old are you?<br />\r\n25<br />\r\n&gt;&gt;&gt; print(age)<br />\r\n25<br />\r\n&gt;&gt;&gt; print(type(age))<br />\r\n&lt;class &#39;str&#39;&gt;</p>\r\n\r\n<p><strong>Note:</strong> if you&nbsp;want to integer value, you can convert&nbsp;the return value to integer using the int() function:</p>\r\n\r\n<p><span style="color:#e74c3c"><strong><span style="background-color:null">Example3</span></strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; age = int(input(&quot;How old are you?\\n&quot;))<br />\r\nHow old are you?<br />\r\n20<br />\r\n&gt;&gt;&gt; type(age)<br />\r\n&lt;class &#39;int&#39;&gt;<br />\r\n&nbsp;</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>explaining prompt must be string. otherwise you will take error like this.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example4</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; name = input(your age)<br />\r\nSyntaxError: invalid syntax</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>The sequence <strong>\\n </strong>causes a line break.&nbsp;</p>', '<p>There are built-in functions which is ready to use for us in Python. They are very useful&nbsp;and interested in common problems. Conversion functions(int(), str()), input(), type() are examples of&nbsp; built-in function. We will see them next pages.</p>', '<p>Type conversion functions convert values to from one type to another type such as from string to integer or integer to string.</p>\r\n\r\n<p>&nbsp;</p>', '<p>It converts value&nbsp;to integer. But this value must be string with integer value or any number such as float</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; int(&#39;32&#39;)<br />\r\n32<br />\r\n&gt;&gt;&gt; int(&#39;home&#39;)<br />\r\nValueError: invalid literal for int() with base 10: &#39;home&#39;<br />\r\n&nbsp;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; int(4.9)<br />\r\n4<br />\r\n&gt;&gt;&gt; int(3.4)<br />\r\n3<br />\r\n&gt;&gt;&gt; int(-7.459987)<br />\r\n-7</span><br />\r\n&nbsp;</p>', '<p>It converts value to string.&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; str(4.5)<br />\r\n&#39;4.5&#39;<br />\r\n&gt;&gt;&gt; str(65)<br />\r\n&#39;65&#39;<br />\r\n&gt;&gt;&gt; str(-45)<br />\r\n&#39;-45&#39;<br />\r\n&nbsp;</p>', '<p>It convert integer or string-number value to float number.&nbsp;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; a = 5<br />\r\n&gt;&gt;&gt; type(a)<br />\r\n&lt;class &#39;int&#39;&gt;<br />\r\n&gt;&gt;&gt; b = float(a)<br />\r\n&gt;&gt;&gt; b<br />\r\n5.0<br />\r\n&gt;&gt;&gt; type(b)<br />\r\n&lt;class &#39;float&#39;&gt;</span></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; a = &#39;5&#39;<br />\r\n&gt;&gt;&gt; type(a)<br />\r\n&lt;class &#39;str&#39;&gt;<br />\r\n&gt;&gt;&gt; float(a)<br />\r\n5.0</span></p>', '<p>It returns value to complex number.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = 5<br />\r\n&gt;&gt;&gt; b = complex(a)<br />\r\n&gt;&gt;&gt; b<br />\r\n(5+0j)<br />\r\n&gt;&gt;&gt; type(b)<br />\r\n&lt;class &#39;complex&#39;&gt;</p>', '<p>It converts a number to absolute value. It means distance to zero.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; abs(-10)<br />\r\n10<br />\r\n&gt;&gt;&gt; abs(10)<br />\r\n10<br />\r\n&gt;&gt;&gt; abs(10.0)<br />\r\n10.0<br />\r\n&gt;&gt;&gt; abs(3 + 4j)<br />\r\n5.0</p>\r\n\r\n<p>&nbsp;</p>', '<p>It rounds a number below or above integer.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; round(4.6)<br />\r\n5<br />\r\n&gt;&gt;&gt; round(4.4)<br />\r\n4</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>If distance equals to odd or even integer, Python prefer even one.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; round(4.5)<br />\r\n4<br />\r\n&gt;&gt;&gt; round(3.5)<br />\r\n4</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>round() function has two parameters. we know already first one. And second one controls how many number there will be after point(.).</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; round(22/7)<br />\r\n3<br />\r\n&gt;&gt;&gt; round(22/7, 0)<br />\r\n3.0<br />\r\n&gt;&gt;&gt; round(22/7, 1)<br />\r\n3.1<br />\r\n&gt;&gt;&gt; round(22/7, 2)<br />\r\n3.14<br />\r\n&gt;&gt;&gt; round(22/7, 3)<br />\r\n3.143<br />\r\n&gt;&gt;&gt; round(22/7, 4)<br />\r\n3.1429</p>', '<p>It returns True value if all bool(True or False) values in a list are True. If least a value in a list is False value, all() function returns False value. we know alredy bool value of values. Such as:&nbsp;</p>\r\n\r\n<table align="left" border="1" cellpadding="1" cellspacing="1" style="width:150px">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><strong>value</strong></td>\r\n\t\t\t<td><strong>bool value</strong></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>3</td>\r\n\t\t\t<td>True</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&quot;string&quot;</td>\r\n\t\t\t<td>True</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&quot; &quot;</td>\r\n\t\t\t<td>True</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&quot;3&quot;</td>\r\n\t\t\t<td>True</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>0</td>\r\n\t\t\t<td>False</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&#39;&#39;&quot;</td>\r\n\t\t\t<td>False</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; our_list = [1, 2,3,4]<br />\r\n&gt;&gt;&gt; all(our_list)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; second_list = [1, 2, 3, 0]<br />\r\n&gt;&gt;&gt; all(second_list)<br />\r\nFalse</p>\r\n\r\n<p>&gt;&gt;&gt; list3&nbsp;= [&#39;John&#39;, &#39;Jack&#39;, &#39;&#39;]<br />\r\n&gt;&gt;&gt; all(list3)<br />\r\nFalse<br />\r\n&nbsp;</p>', '<p>It returns True value if any&nbsp;bool(True or False) values &nbsp;in a list are True. If all&nbsp;values in a list is False value, any() function returns False value.&nbsp;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; false_values = [&#39;&#39;, 0, [], (), set(), dict()]<br />\r\n&gt;&gt;&gt; any(false_values)<br />\r\nFalse</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; list1 = [0,&quot;&quot;,1]<br />\r\n&gt;&gt;&gt; any(list1)<br />\r\nTrue</p>', '<p>It show and return printable value to us. This result is always string.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = &quot;python&quot;<br />\r\n&gt;&gt;&gt; ascii(a)<br />\r\n&quot;&#39;python&#39;&quot;<br />\r\n&gt;&gt;&gt; b = ascii(a)<br />\r\n&gt;&gt;&gt; b<br />\r\n&quot;&#39;python&#39;&quot;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; list1 = [&quot;John&quot;,&#39;Jack&#39;,&quot;Angelina&quot;]<br />\r\n&gt;&gt;&gt; ascii(list1)<br />\r\n&quot;[&#39;John&#39;, &#39;Jack&#39;, &#39;Angelina&#39;]&quot;</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>If value is not ASCII, it retuens UNICODE value.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; ascii(&quot;Ş&quot;)<br />\r\n&quot;&#39;\\\\u015e&#39;&quot;</p>\r\n\r\n<p>&nbsp;</p>', '<p>repr() function, which It shows and returns printable value to us, is same as ascii() function except about ASCII characters.&nbsp;If value is not ASCII, repr() function&nbsp;returns value as normal. it returns always string.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; repr(&quot;Ş&quot;)<br />\r\n&quot;&#39;Ş&#39;&quot;</p>\r\n\r\n<p>&gt;&gt;&gt; ascii(&quot;Ş&quot;)<br />\r\n&quot;&#39;\\\\u015e&#39;&quot;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; repr([&quot;John&quot;,&#39;Jack&#39;,&quot;Angelina&quot;])<br />\r\n&quot;[&#39;John&#39;, &#39;Jack&#39;, &#39;Angelina&#39;]&quot;</p>', '<p>It returns True or False depend on boolean value.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; bool(0)<br />\r\nFalse<br />\r\n&gt;&gt;&gt; bool(1)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; bool([])<br />\r\nFalse<br />\r\n&gt;&gt;&gt; bool(&#39;&#39;)<br />\r\nFalse<br />\r\n&gt;&gt;&gt; bool(&#39; &#39;)<br />\r\nTrue</p>', '<p>It returns binary value of a number. The output is string type</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; bin(8)<br />\r\n&#39;0b1000&#39;<br />\r\n&gt;&gt;&gt; bin(2)<br />\r\n&#39;0b10&#39;<br />\r\n&gt;&gt;&gt; bin(20)<br />\r\n&#39;0b10100&#39;<br />\r\n&gt;&gt;&gt; type(bin(2))<br />\r\n&lt;class &#39;str&#39;&gt;</p>', '<p>it creates byte type object.</p>\r\n\r\n<p><strong>bytes(iterable_of_ints) -&gt; bytes</strong></p>\r\n\r\n<p>If it has an integer&nbsp;argument, it returns&nbsp; given integer times&nbsp;byte object.<br />\r\n<span style="color:#e74c3c">Example1</span></p>\r\n\r\n<p>&gt;&gt;&gt; bytes(5)<br />\r\nb&#39;\\x00\\x00\\x00\\x00\\x00&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; bytes(2)<br />\r\nb&#39;\\x00\\x00&#39;</p>\r\n\r\n<p><strong><span style="color:null">bytes(string, encoding[, errors]) -&gt; bytes</span></strong></p>\r\n\r\n<p>If it has a string&nbsp;argument, it returns&nbsp; bytes depend on encoding type which can be ASCII, UTF-8, CP857, CP1254...</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; bytes(&#39;Ş&#39;, &#39;utf-8&#39;)</span><br />\r\n<span style="color:null">b&#39;\\xc5\\x9e&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;Ş&#39;, &#39;cp1254&#39;)<br />\r\nb&#39;\\xde&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;Ş&#39;, &#39;cp857&#39;)<br />\r\nb&#39;\\x9e&#39;</span><br />\r\n&nbsp;</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>If string isn&#39;t inside encoding type, it will give an error.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; bytes(&#39;Ş&#39;,&#39;ascii&#39;)<br />\r\n<span style="color:#c0392b">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#75&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; bytes(&#39;Ş&#39;,&#39;ascii&#39;)<br />\r\nUnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character &#39;\\u015e&#39; in position 0: ordinal not in range(128)</span></p>\r\n\r\n<p><span style="color:null"><strong>Note:</strong>&nbsp;To not have error, you should use error parameter. Error parameter can be &#39;strict&#39;, &#39;&#39;replace&#39;, &#39;ignore&#39;, &#39;</span>xmlcharrefreplace<span style="color:null">&#39;.</span></p>\r\n\r\n<p><span style="color:null"><strong>strict:&nbsp;</strong>default value. I</span>t will give an error.</p>\r\n\r\n<p><strong>ignore:</strong> It behaves there is no&nbsp;</p>\r\n\r\n<p><strong>replace :</strong> It replaces &#39;?&#39; character&nbsp;</p>\r\n\r\n<p><strong>xmlcharrefreplace:</strong> It puts xml character</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; bytes(&#39;ŞII&#39;,&#39;ascii&#39;,&#39;replace&#39;)<br />\r\nb&#39;?II&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;ŞII&#39;,&#39;ascii&#39;,&#39;ignore&#39;)<br />\r\nb&#39;II&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;ŞII&#39;,&#39;ascii&#39;,&#39;xmlcharrefreplace&#39;)<br />\r\nb&#39;&amp;#350;II&#39;</span></p>', '<p>It constructs a mutable bytearray. it is similar to bytes function. But because&nbsp;bytes() function creates immutable byte object,&nbsp;&nbsp;we couldn&#39;t change elements of a byte&nbsp;object. bytearray() function let us change elements of a bytearray object.&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = bytes(&#39;home&#39;, &#39;ascii&#39;)<br />\r\n&gt;&gt;&gt; a[0]<br />\r\n105<br />\r\n&gt;&gt;&gt; a[0] = 106<br />\r\nTraceback (most recent call last):<br />\r\nFile &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br />\r\nTypeError: &#39;bytes&#39; object does not support item assignment</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong><br />\r\n&gt;&gt;&gt; a = bytearray(&#39;home&#39;,&#39;ascii&#39;)<br />\r\n&gt;&gt;&gt; a<br />\r\nbytearray(b&#39;home&#39;)<br />\r\n&gt;&gt;&gt; a[0]<br />\r\n104<br />\r\n&gt;&gt;&gt; a[0] = 106<br />\r\n&gt;&gt;&gt; a<br />\r\nbytearray(b&#39;jome&#39;)</p>', '<p>It return a Unicode string of an integer value. It&nbsp;takes exactly one argument.</p>\r\n\r\n<p>&gt;&gt;&gt; chr(65)<br />\r\n&#39;A&#39;<br />\r\n&gt;&gt;&gt; chr(125)<br />\r\n&#39;}&#39;<br />\r\n&gt;&gt;&gt; chr(1256)<br />\r\n&#39;Ө&#39;<br />\r\n&gt;&gt;&gt; chr(256987)<br />\r\n&#39;\\U0003ebdb&#39;<br />\r\n&gt;&gt;&gt; chr(106)<br />\r\n&#39;j&#39;</p>', '<p>It can be used&nbsp;two different ways.</p>\r\n\r\n<p>1. It creates new empty list.</p>\r\n\r\n<p>2. New list initialized from iterable&#39;s items.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1: an empty list</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; l = list()</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2: from string to list</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; list(&#39;python&#39;)<br />\r\n[&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3: from set to list</span></strong><br />\r\n&gt;&gt;&gt; list({&#39;a&#39;,&#39;b&#39;,&#39;c&#39;})<br />\r\n[&#39;c&#39;, &#39;b&#39;, &#39;a&#39;]&nbsp;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example4: from dictionary to list</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = {&#39;a&#39;:10,&#39;b&#39;:20,&#39;c&#39;:30}<br />\r\n&gt;&gt;&gt; type(a)<br />\r\n&lt;class &#39;dict&#39;&gt;<br />\r\n&gt;&gt;&gt; b = list(a)<br />\r\n&gt;&gt;&gt; b<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]<br />\r\n&gt;&gt;&gt; type(b)<br />\r\n&lt;class &#39;list&#39;&gt;<br />\r\n&gt;&gt;&gt; c = list(a.values())<br />\r\n&gt;&gt;&gt; c<br />\r\n[10, 20, 30]</p>', '<p>It can be used two different ways like list() function.</p>\r\n\r\n<p>1. to have new empty set object<br />\r\n2.to construct&nbsp;new set object which is an unordered collection of unique elements.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; set(&quot;python&quot;)<br />\r\n{&#39;o&#39;, &#39;h&#39;, &#39;t&#39;, &#39;p&#39;, &#39;n&#39;, &#39;y&#39;}<br />\r\n&gt;&gt;&gt; set()<br />\r\nset()<br />\r\n&gt;&gt;&gt; set([1,2,3,4,56])<br />\r\n{1, 2, 3, 4, 56}<br />\r\n&gt;&gt;&gt; set([1,2,3,4,4,4])<br />\r\n{1, 2, 3, 4}</p>', '<p>36</p>', '<p>It can be used two different ways like list() and set() functions.</p>\r\n\r\n<p>1. to have new empty tuple&nbsp;object.<br />\r\n2.to construct&nbsp;new tuple&nbsp;object.<br />\r\n<strong>Note</strong>:&nbsp;If the argument is a tuple, the return value is the same object.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; tuple()<br />\r\n()<br />\r\n&gt;&gt;&gt; tuple(&quot;python&quot;)<br />\r\n(&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;)<br />\r\n&gt;&gt;&gt; tuple([1,4,2,5,6,7])<br />\r\n(1, 4, 2, 5, 6, 7)</p>', '<p>It can be used two different ways like list(), set() and&nbsp;tuple() functions.</p>\r\n\r\n<p>1. to have new empty frozenset&nbsp;object<br />\r\n2.to construct&nbsp;new frozenset object which is an unordered collection of unique elements.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; frozenset(&#39;python&#39;)<br />\r\nfrozenset({&#39;n&#39;, &#39;h&#39;, &#39;t&#39;, &#39;p&#39;, &#39;o&#39;, &#39;y&#39;})<br />\r\n&nbsp;</p>', '<p>It can be used three&nbsp;different ways.</p>\r\n\r\n<p><strong>1.</strong> to construct new empty dictionary</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = dict()<br />\r\n&gt;&gt;&gt; a<br />\r\n{}</p>\r\n\r\n<p><strong>2.</strong> to initialize new dictionary from a mapping object&#39;s (key, value) pairs</p>\r\n\r\n<p>Example2:</p>\r\n\r\n<p>&gt;&gt;&gt; a = [[&#39;a&#39;,1],[&#39;b&#39;,2],[&#39;c&#39;,3],[&#39;d&#39;,5]]<br />\r\n&gt;&gt;&gt; dict(a)<br />\r\n{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 5}</p>\r\n\r\n<p>&gt;&gt;&gt; a = ([&#39;a&#39;,1],[&#39;b&#39;,2],[&#39;c&#39;,3],[&#39;d&#39;,5])<br />\r\n&gt;&gt;&gt; dict(a)<br />\r\n{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 5}</p>\r\n\r\n<p><strong>3.&nbsp;</strong>new dictionary initialized with the name=value pairs</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; dict(a=1, b=2, c=3, d=4)<br />\r\n{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4}</p>', '<p>It return whether the object is callable such as :functions. If is callable, it return True,&nbsp;otherwise False. Functions are callable but variables is not callable.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; callable(input)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; callable(list)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; a = 34<br />\r\n&gt;&gt;&gt; callable(a)<br />\r\nFalse</p>', '<p>It return the Unicode code point for a one-character string.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; ord(&#39;a&#39;)<br />\r\n97<br />\r\n&gt;&gt;&gt; ord(&#39;A&#39;)<br />\r\n65<br />\r\n&gt;&gt;&gt; ord(&#39;Ş&#39;)<br />\r\n350</p>', '<p>It return the octal representation of an integer.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; oct(10)<br />\r\n&#39;0o12&#39;<br />\r\n&gt;&gt;&gt; oct(20)<br />\r\n&#39;0o24&#39;<br />\r\n&gt;&gt;&gt; oct(80)<br />\r\n&#39;0o120&#39;</p>', '<p>It returns the hexadecimal representation of an integer.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; hex(120)<br />\r\n&#39;0x78&#39;<br />\r\n&gt;&gt;&gt; hex(80)<br />\r\n&#39;0x50&#39;<br />\r\n&gt;&gt;&gt; hex(5)<br />\r\n&#39;0x5&#39;</p>', '<p>It&nbsp;return the dictionary containing the current scope&#39;s global variables.</p>\r\n\r\n<p><strong>NOTE:</strong> Updates to this dictionary *will* affect name lookups in the current global scope and vice-versa.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; globals()<br />\r\n{&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None, &#39;__package__&#39;: None, &#39;__loader__&#39;: &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &#39;__spec__&#39;: None, &#39;__annotations__&#39;: {}, &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;}</span></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = 15<br />\r\n&gt;&gt;&gt; b = 36<br />\r\n&gt;&gt;&gt; globals()<br />\r\n{&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None, &#39;__package__&#39;: None, &#39;__loader__&#39;: &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &#39;__spec__&#39;: None, &#39;__annotations__&#39;: {}, &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;, &#39;<strong>a&#39;: 15, &#39;b&#39;: 36</strong>}</p>\r\n\r\n<p><strong>NOTE:</strong> Updates to this dictionary *will* affect name lookups in the current global scope and vice-versa. but it is not necessary if you need really. You can change this dictionary like this:</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; globals()[&#39;c&#39;]= 40<br />\r\n&gt;&gt;&gt; globals()<br />\r\n{&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None, &#39;__package__&#39;: None, &#39;__loader__&#39;: &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &#39;__spec__&#39;: None, &#39;__annotations__&#39;: {}, &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;, &#39;a&#39;: 15, &#39;b&#39;: 36, <strong>&#39;c&#39;: 40</strong>}</span></p>', '<p>It return a dictionary containing the current scope&#39;s local variables. It is used generally for functions. You couldn&#39;t reach this/these variables from global scope.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples1:</span></strong></p>\r\n\r\n<p>def fonksiyon(param1, param2):<br />\r\n&nbsp; &nbsp; x = 10<br />\r\n&nbsp; &nbsp; y= param1 + param2<br />\r\n&nbsp; &nbsp; print(locals())</p>\r\n\r\n<p>fonksiyon(10, 20)</p>\r\n\r\n<p>when examples1 runs from a file such as Python IDLE,&nbsp; our result will be&nbsp;</p>\r\n\r\n<p>&nbsp;{&#39;y&#39;: 30, &#39;x&#39;: 10, &#39;param2&#39;: 20, &#39;param1&#39;: 10}</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>You can change this dictionary, but you can affect your program if the added variable is in your program.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples2:</strong></span></p>\r\n\r\n<p>locals()[&#39;a&#39;] = 50<br />\r\nlocals()</p>\r\n\r\n<p>{&#39;y&#39;: 30, &#39;x&#39;: 10, &#39;param2&#39;: 20, &#39;param1&#39;: 10, <strong>&#39;a&#39;: 50</strong>}</p>', '<p>It return&nbsp;a list of contributors and the copyright notice.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; copyright()<br />\r\nCopyright (c) 2001-2016 Python Software Foundation.<br />\r\nAll Rights Reserved.</p>\r\n\r\n<p>Copyright (c) 2000 BeOpen.com.<br />\r\nAll Rights Reserved.</p>\r\n\r\n<p>Copyright (c) 1995-2001 Corporation for National Research Initiatives.<br />\r\nAll Rights Reserved.</p>\r\n\r\n<p>Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.<br />\r\nAll Rights Reserved.</p>', '<p>It return a list of contributors and the copyright notice especially about programming language.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; credits()<br />\r\n&nbsp; &nbsp; Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands<br />\r\n&nbsp; &nbsp; for supporting Python development. &nbsp;See www.python.org for more information.</p>', '<p>It return a lot of information about Python.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; license()<br />\r\nA. HISTORY OF THE SOFTWARE<br />\r\n==========================</p>\r\n\r\n<p>Python was created in the early 1990s by Guido van Rossum at Stichting<br />\r\nMathematisch Centrum (CWI, see http://www.cwi.nl) in the Netherlands<br />\r\nas a successor of a language called ABC. &nbsp;Guido remains Python&#39;s<br />\r\nprincipal author, although it includes many contributions from others.</p>\r\n\r\n<p>In 1995, Guido continued his work on Python at the Corporation for<br />\r\nNational Research Initiatives (CNRI, see http://www.cnri.reston.va.us)<br />\r\nin Reston, Virginia where he released several versions of the<br />\r\nsoftware.</p>\r\n\r\n<p>In May 2000, Guido and the Python core development team moved to<br />\r\nBeOpen.com to form the BeOpen PythonLabs team. &nbsp;In October of the same<br />\r\nyear, the PythonLabs team moved to Digital Creations (now Zope<br />\r\nCorporation, see http://www.zope.com). &nbsp;In 2001, the Python Software<br />\r\nFoundation (PSF, see http://www.python.org/psf/) was formed, a<br />\r\nnon-profit organization created specifically to own Python-related<br />\r\nIntellectual Property. &nbsp;Zope Corporation is a sponsoring member of<br />\r\nthe PSF.</p>\r\n\r\n<p>All Python releases are Open Source (see http://www.opensource.org for<br />\r\nHit Return for more, or q (and Return) to quit:&nbsp;</p>', '<p>If called without an argument, return the names in the current scope. Else, return an alphabetized list of names comprising (some of) the attributes of the given object.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; a= 25<br />\r\n&gt;&gt;&gt; b = 30<br />\r\n&gt;&gt;&gt; c = 45<br />\r\n&gt;&gt;&gt; dir()<br />\r\n[&#39;__annotations__&#39;, &#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2: If you want to see attributes of strings</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; dir(&#39;&#39;)<br />\r\n[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;]</span></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3:&nbsp;if you want to see attributes of lists</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; dir([])<br />\r\n[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;]</span></p>', '<p>It return&nbsp;the tuple (x//y, x%y).</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; divmod(12, 4)<br />\r\n(3, 0)<br />\r\n&gt;&gt;&gt; divmod(12.5, 6)<br />\r\n(2.0, 0.5)<br />\r\n&gt;&gt;&gt; divmod(5, 2)<br />\r\n(2, 1)</p>', '<p>Return an enumerate object. This object must ve iterable such as string but numbers can&#39;t be. To&nbsp;see the object, you can use the list() function.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = enumerate(&quot;python&quot;)<br />\r\n&gt;&gt;&gt; list(a)<br />\r\n[(0, &#39;p&#39;), (1, &#39;y&#39;), (2, &#39;t&#39;), (3, &#39;h&#39;), (4, &#39;o&#39;), (5, &#39;n&#39;)]</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = enumerate([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])<br />\r\n&gt;&gt;&gt; list(a)<br />\r\n[(0, &#39;a&#39;), (1, &#39;b&#39;), (2, &#39;c&#39;)]</p>\r\n\r\n<p><strong><span style="background-color:null">Note:</span></strong>&nbsp;The starting point is zero as default. It can be changed with second parameter.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = enumerate(&#39;python&#39;,1)<br />\r\n&gt;&gt;&gt; list(a)<br />\r\n[(1, &#39;p&#39;), (2, &#39;y&#39;), (3, &#39;t&#39;), (4, &#39;h&#39;), (5, &#39;o&#39;), (6, &#39;n&#39;)]</p>', '<p>It is used&nbsp;to exit a program or close to the Python shell.</p>', '<p>You can use reach the document of Python with this function which is very useful.</p>\r\n\r\n<p>It is used with two ways.</p>\r\n\r\n<p>1. when you&nbsp;write to shell &quot;help()&quot;, you will see like this:</p>\r\n\r\n<p>&gt;&gt;&gt;&nbsp;help()</p>\r\n\r\n<p>Welcome to Python 3.6&#39;s help utility!</p>\r\n\r\n<p>If this is your first time using Python, you should definitely check out<br />\r\nthe tutorial on the Internet at http://docs.python.org/3.6/tutorial/.</p>\r\n\r\n<p>Enter the name of any module, keyword, or topic to get help on writing<br />\r\nPython programs and using Python modules. &nbsp;To quit this help utility and<br />\r\nreturn to the interpreter, just type &quot;quit&quot;.</p>\r\n\r\n<p>To get a list of available modules, keywords, symbols, or topics, type<br />\r\n&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;. &nbsp;Each module also comes<br />\r\nwith a one-line summary of what it does; to list the modules whose name<br />\r\nor summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;.</p>\r\n\r\n<p>help&gt;</p>\r\n\r\n<p>and then after <strong>help&gt;</strong>, you can type what about you want to have information.&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1: for information about if statement</strong></span>&nbsp;</p>\r\n\r\n<p>help&gt; if<br />\r\nThe &quot;if&quot; statement<br />\r\n******************</p>\r\n\r\n<p>The &quot;if&quot; statement is used for conditional execution:</p>\r\n\r\n<p>&nbsp; &nbsp;if_stmt ::= &quot;if&quot; expression &quot;:&quot; suite<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;( &quot;elif&quot; expression &quot;:&quot; suite )*<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[&quot;else&quot; &quot;:&quot; suite]</p>\r\n\r\n<p>It selects exactly one of the suites by evaluating the expressions one<br />\r\nby one until one is found to be true (see section Boolean operations<br />\r\nfor the definition of true and false); then that suite is executed<br />\r\n(and no other part of the &quot;if&quot; statement is executed or evaluated).<br />\r\nIf all expressions are false, the suite of the &quot;else&quot; clause, if<br />\r\npresent, is executed.</p>\r\n\r\n<p>Related help topics: TRUTHVALUE</p>\r\n\r\n<p>2. second way is writing inside help function like this:</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; help(dir)<br />\r\nHelp on built-in function dir in module builtins:</p>\r\n\r\n<p>dir(...)<br />\r\n&nbsp; &nbsp; dir([object]) -&gt; list of strings<br />\r\n&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; If called without an argument, return the names in the current scope.<br />\r\n&nbsp; &nbsp; Else, return an alphabetized list of names comprising (some of) the attributes<br />\r\n&nbsp; &nbsp; of the given object, and of attributes reachable from it.<br />\r\n&nbsp; &nbsp; If the object supplies a method named __dir__, it will be used; otherwise<br />\r\n&nbsp; &nbsp; the default dir() logic is used and returns:<br />\r\n&nbsp; &nbsp; &nbsp; for a module object: the module&#39;s attributes.<br />\r\n&nbsp; &nbsp; &nbsp; for a class object: &nbsp;its attributes, and recursively the attributes<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; of its bases.<br />\r\n&nbsp; &nbsp; &nbsp; for any other object: its attributes, its class&#39;s attributes, and<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; recursively the attributes of its class&#39;s base classes.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; help(&#39;if&#39;)<br />\r\nThe &quot;if&quot; statement<br />\r\n******************</p>\r\n\r\n<p>The &quot;if&quot; statement is used for conditional execution:</p>\r\n\r\n<p>&nbsp; &nbsp;if_stmt ::= &quot;if&quot; expression &quot;:&quot; suite<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;( &quot;elif&quot; expression &quot;:&quot; suite )*<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[&quot;else&quot; &quot;:&quot; suite]</p>\r\n\r\n<p>It selects exactly one of the suites by evaluating the expressions one<br />\r\nby one until one is found to be true (see section Boolean operations<br />\r\nfor the definition of true and false); then that suite is executed<br />\r\n(and no other part of the &quot;if&quot; statement is executed or evaluated).<br />\r\nIf all expressions are false, the suite of the &quot;else&quot; clause, if<br />\r\npresent, is executed.</p>\r\n\r\n<p>Related help topics: TRUTHVALUE</p>', '<p>It return the identity of an object. This is guaranteed to be unique among simultaneously existing objects.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; id(46)<br />\r\n1758415200<br />\r\n&gt;&gt;&gt; id(100)<br />\r\n1758416064<br />\r\n&gt;&gt;&gt; id(&#39;apple&#39;)<br />\r\n34757184</p>', '<p>It read a string from standard input. Output is always string.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; input(&#39;Whats your name:&#39;)<br />\r\nWhats your name:John<br />\r\n&#39;John&#39;<br />\r\n&gt;&gt;&gt; input(&#39;How old are you \\n&#39;)<br />\r\nHow old are you&nbsp;<br />\r\n25<br />\r\n&#39;25&#39;</p>', '<p>It Return an&nbsp;items of iterable(list, tuple, string,,,) for which function(item) is true. If function is None, return the items that are true. It takes two parameters. one of them is a name of function, second one is iterable object like list, string, tuple.</p>\r\n\r\n<p>filter(function_name, iterable_object)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example: for list</span></strong></p>\r\n\r\n<p>a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br />\r\ndef odd(number):<br />\r\n&nbsp; &nbsp; return number % 2 == 1</p>\r\n\r\n<p>b = filter(odd, a)<br />\r\nprint(b)<br />\r\nprint(*b)</p>\r\n\r\n<p><strong>&lt;filter object at 0x02265490&gt;<br />\r\n1 3 5 7 9</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example: for string</span></strong></p>\r\n\r\n<p><span style="color:null">a = &quot;123456789&quot;<br />\r\ndef odd(string):<br />\r\n&nbsp; &nbsp; return int(string) % 2 == 1</span></p>\r\n\r\n<p><span style="color:null">b = filter(odd, a)<br />\r\nprint(b)<br />\r\nprint(*b)</span></p>\r\n\r\n<p>&lt;filter object at 0x02265490&gt;<br />\r\n1 3 5 7 9</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3: without function</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = filter(None, [1,2,3,4,5])<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n&lt;filter object at 0x022F4E70&gt;<br />\r\n&gt;&gt;&gt; print(*a)<br />\r\n1 2 3 4 5</p>', '<p>return the hash value for the given object which can be string or number.&nbsp; It takes one parameter. If two objects has same value, their hash values are same too.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; hash(12.5)<br />\r\n1073741836<br />\r\n&gt;&gt;&gt; hash(12)<br />\r\n12<br />\r\n&gt;&gt;&gt; hash(&#39;python&#39;)<br />\r\n-443420559<br />\r\n&gt;&gt;&gt; hash(&#39;Hello World&#39;)<br />\r\n-1645620467</p>', '<p>It return whether an object(integer, float, string, list) is an instance of a class. It takes two parameter they are an object and class type. output is True or False.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; isinstance(&#39;apple&#39;, str)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; isinstance(256, str)<br />\r\nFalse<br />\r\n&gt;&gt;&gt; isinstance([], list)<br />\r\nTrue</p>', '<p>Return the number of items in a container. It takes a parameter which is iterable(string, list, tuple,,,). So an integer can&#39;t be a parameter for it. But Output is an integer.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; len(&#39;python&#39;)<br />\r\n6<br />\r\n&gt;&gt;&gt; type(len(&#39;python&#39;))<br />\r\n&lt;class &#39;int&#39;&gt;<br />\r\n&gt;&gt;&gt; len([1,2,3,4,5,6])<br />\r\n6<br />\r\n&gt;&gt;&gt; len(123456)<br />\r\nTraceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#22&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; len(123456)<br />\r\nTypeError: object of type &#39;int&#39; has no len()<br />\r\n&gt;&gt;&gt; len({&#39;a&#39;:5, &#39;b&#39;:6, &#39;c&#39;:8})<br />\r\n3</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>', '<p>It make an iterator that computes the function using arguments from each of the iterables. &nbsp;Stops when the shortest iterable is exhausted.</p>\r\n\r\n<p>map(func, *iterables) --&gt; map object</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example: Given number and 5 will plus</span></strong><br />\r\ndef plus_five(number):<br />\r\n&nbsp; &nbsp; return number + 5</p>\r\n\r\n<p>result = map(plus_five, [1,2,3,4,5,6,7,8,9,10])<br />\r\nprint(*result)</p>\r\n\r\n<p>6 7 8 9 10 11 12 13 14 15</p>', '<p>It return maximum value of an iterable(list, string...). It takes two parameters. one of them is optional(key parameter)</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; max(1,2,3,4,5,6,7,8)<br />\r\n8<br />\r\n&gt;&gt;&gt; max([1,2,3,4,5,6,7,8,9,10])<br />\r\n10<br />\r\n&gt;&gt;&gt; max(&quot;123456789&quot;)<br />\r\n&#39;9&#39;<br />\r\n&gt;&gt;&gt; max(&#39;ahmet&#39;,&#39;as&#39;)<br />\r\n&#39;as&#39;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; a =[&quot;pyhton&quot;, &#39;C++&#39;, &#39;Javascript&#39;]<br />\r\n&gt;&gt;&gt; max(a, key = len)<br />\r\n&#39;Javascript&#39;</span></p>', '<p>It works&nbsp;like max() function but it return minimum value.</p>\r\n\r\n<p>Examples:</p>\r\n\r\n<p>&gt;&gt;&gt; min(&#39;pythom&#39;,&#39;C++&#39;,&#39;Javascript&#39;,&#39;Java&#39;)<br />\r\n&#39;C++&#39;<br />\r\n&gt;&gt;&gt; min(1,2,3,4,5,6,7,8)<br />\r\n1</p>', '<p>To read or write a file , we first must open the file. open() function&nbsp;reads and write a file and it has eight parameters.</p>\r\n\r\n<p>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</p>\r\n\r\n<p>Lets examine all parameters of the open() function</p>\r\n\r\n<p><strong>file</strong><br />\r\nTo open or produce a file, you must type name of a file in the current directory or as writing full adress of a file which can be text file(example.txt) or binary&nbsp;file(example.doc, example.pdf).&nbsp;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples1: if the file is in the current directory,</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; open(&#39;example.txt&#39;)<br />\r\n&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples2: if the file isn&#39;t in the current directory, we must write full adress of the file</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; open(&#39;/home/pythonlesson/Desktop/example.txt&#39;)</p>\r\n\r\n<p><span style="color:null"><strong>mode</strong></span></p>\r\n\r\n<p><span style="color:null">mode is an optional string that specifies the mode in which the file is opened. It defaults to &#39;r&#39; which means open for reading in text mode.&nbsp;For reading and writing raw bytes use binary mode and leave encoding unspecified.</span></p>\r\n\r\n<p><span style="color:null">The available modes are:</span></p>\r\n\r\n<p><span style="color:null">&nbsp; <strong>&nbsp; &#39;r&#39; </strong>&nbsp; &nbsp; &nbsp; open for reading (default)<br />\r\n&nbsp; &nbsp;<strong> &#39;w&#39;</strong> &nbsp; &nbsp; &nbsp; open for writing, truncating the file first<br />\r\n&nbsp; &nbsp;<strong> &#39;x&#39; </strong>&nbsp; &nbsp; &nbsp; create a new file and open it for writing<br />\r\n&nbsp; <strong>&nbsp; &#39;a&#39;</strong> &nbsp; &nbsp; &nbsp; open for writing, appending to the end of the file if it exists<br />\r\n&nbsp; &nbsp;<strong> &#39;b&#39; </strong>&nbsp; &nbsp; &nbsp; binary mode<br />\r\n&nbsp; &nbsp;<strong> &#39;t&#39;</strong> &nbsp; &nbsp; &nbsp; text mode (default)<br />\r\n&nbsp; &nbsp; <strong>&#39;+&#39;</strong> &nbsp; &nbsp; &nbsp; open a disk file for updating (reading and writing)<br />\r\n&nbsp; &nbsp; <strong>&#39;U&#39;</strong> &nbsp; &nbsp; &nbsp; universal newline mode (deprecated)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><strong>buffering</strong></p>\r\n\r\n<p>buffering is an optional integer used to set the buffering policy.&nbsp;<span style="color:null">The available values&nbsp;are:</span></p>\r\n\r\n<p><strong>0</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;is only&nbsp;used for binary mode and it means &quot;switch buffering off&quot;</p>\r\n\r\n<p><strong>1&nbsp;</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;is only used for text mode and it means &quot;line buffering&quot;</p>\r\n\r\n<p><strong>&gt;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong> is used for bothi and it indicates the size of a fixed-size chunk buffer.</p>\r\n\r\n<p><strong>-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>is default value.&nbsp;the default buffering policy is worked by Python. It is recommended.</p>\r\n\r\n<p><strong>encoding</strong></p>\r\n\r\n<p>It should only be used in text mode. It&nbsp;is the name of the encoding used to decode or encode the file.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:3</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; f = open(&#39;example.txt&#39;, encoding=&#39;utf-8&#39;)</p>\r\n\r\n<p><strong>errors</strong></p>\r\n\r\n<p>It is an optional string that specifies how encoding errors are to be handled---this argument should not be used in binary mode.&nbsp;<span style="color:null">The available values&nbsp;are:</span></p>\r\n\r\n<p><strong>strict:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>default value. It will give an error.</p>\r\n\r\n<p><strong>ignore:</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;It behaves there is no&nbsp;</p>\r\n\r\n<p><strong>replace :</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; It replaces &#39;?&#39; character&nbsp;</p>\r\n\r\n<p><strong>xmlcharrefreplace:</strong>&nbsp;It puts xml character</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>newline</strong></p>\r\n\r\n<p>newline controls how universal newlines works. It only applies to text mode. It can be None, &#39;&#39;, &#39;\\n&#39;, &#39;\\r&#39;, and &#39;\\r\\n&#39;.&nbsp;</p>\r\n\r\n<p><strong>closefd</strong> &nbsp; &nbsp;</p>\r\n\r\n<p>If closefd is False, the underlying file descriptor will be kept open when the file is closed. This does not work when a file name is given and must be True in that case.</p>\r\n\r\n<p>If you want to see file descriptor of a file, you should use <em>fileno</em> attribute of open() fuction.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example:4</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; f = open(&#39;example.txt&#39;)<br />\r\n&gt;&gt;&gt; f.fileno()<br />\r\n3</p>\r\n\r\n<p>and then you can open this file with this number like this:</p>\r\n\r\n<p>&gt;&gt;&gt; z = open(3)</p>', '<p>It Equivalents to x**y (with two arguments) or x**y % z (with three arguments)</p>\r\n\r\n<p>pow(x, y, z=None)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1: two arguments</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; pow(2,3)<br />\r\n8</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2: three arguments</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; pow(2,3,2)<br />\r\n0<br />\r\n&gt;&gt;&gt; pow(2,3,3)<br />\r\n2</p>', '<p>It prints the values to a stream, or to sys.stdout by default. &nbsp;&nbsp;</p>\r\n\r\n<p>print(value, ..., sep=&#39; &#39;, end=&#39;\\n&#39;, file=sys.stdout, flush=False)</p>\r\n\r\n<p>Optional keyword arguments:&nbsp; &nbsp;&nbsp;</p>\r\n\r\n<p><strong>&nbsp; &nbsp; file:</strong>&nbsp; &nbsp; &nbsp; &nbsp; a file-like object (stream); defaults to the current sys.stdout.<br />\r\n&nbsp; &nbsp; <strong>sep:</strong>&nbsp; &nbsp; &nbsp; &nbsp;string inserted between values, default a space.<br />\r\n&nbsp; &nbsp; <strong>end:</strong>&nbsp; &nbsp; &nbsp; &nbsp;string appended after the last value, default a newline.<br />\r\n&nbsp; &nbsp; <strong>flush:</strong>&nbsp; &nbsp; &nbsp;whether to forcibly flush the stream.</p>\r\n\r\n<p><strong>value</strong></p>\r\n\r\n<p>It can be any things : strings, integers, floats, list, tuples...</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1: You can use &#39;, &quot; or &quot;&quot; characters for the strings</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&#39;John&#39;,&quot;&quot;&quot;Jack&quot;&quot;&quot;, &quot;Angelina&quot;)<br />\r\nJohn Jack Angelina</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2: If you want to&nbsp;&nbsp;use &#39; or &quot; characters in your strings</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;John&#39;s house&quot;)<br />\r\nJohn&#39;s house</p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;&quot;&quot;John&#39;s last word is : &quot;Bye bye&quot; &quot;&quot;&quot;)<br />\r\nJohn&#39;s last word is : &quot;Bye bye&quot;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3: &quot;&quot;&quot; charachter is very useful to use long strings. other &#39; and &quot; characters can&#39;t do it occur error.</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;&quot;&quot; Welcome to Python 3.6&#39;s help utility!</p>\r\n\r\n<p>If this is your first time using Python, you should definitely check out<br />\r\nthe tutorial on the Internet at http://docs.python.org/3.6/tutorial/.</p>\r\n\r\n<p>Enter the name of any module, keyword, or topic to get help on writing<br />\r\nPython programs and using Python modules. &nbsp;To quit this help utility and<br />\r\nreturn to the interpreter, just type &quot;quit&quot;.</p>\r\n\r\n<p>To get a list of available modules, keywords, symbols, or topics, type<br />\r\n&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;. &nbsp;Each module also comes<br />\r\nwith a one-line summary of what it does; to list the modules whose name<br />\r\nor summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;. &quot;&quot;&quot;)</p>\r\n\r\n<p><strong>sep</strong></p>\r\n\r\n<p>default sep value is &quot; &quot; .</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;www&quot;,&quot;google&quot;,&quot;com&quot;,sep=&quot;.&quot;)<br />\r\nwww.google.com</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; print(&quot;Jack&quot;,&quot;Angelina&quot;,&quot;Micheal&quot;,sep=&quot;-&quot;)<br />\r\nJack-Angelina-Micheal</p>\r\n\r\n<p><strong>end </strong></p>\r\n\r\n<p>default value is&nbsp;&#39;\\n&#39;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example5</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;This is a book&quot;, end=&quot;.&quot;)<br />\r\nThis is a book.</p>\r\n\r\n<p>&gt;&gt;&gt; print( &quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;book&quot;, end = &quot;.&quot;)<br />\r\nThis is a book.</p>\r\n\r\n<p><strong>file</strong></p>\r\n\r\n<p>default value is sys.stdout.&nbsp;</p>\r\n\r\n<p>when the print() function works normally, its output is seen in Python shell or comman line(sys.stdout). If we want to change this, we can use file parameter of print() function.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example6: &quot;Jack&quot; string will be written in the example.txt file. we can&#39;t see anything Python Shell or command line.&nbsp;</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; our_file = open(example.txt, &quot;w&quot;)<br />\r\n&gt;&gt;&gt; print(&quot;Jack&quot;, file = our_file)<br />\r\n&gt;&gt;&gt; our_file.close()</span></p>\r\n\r\n<p><strong>flash</strong></p>\r\n\r\n<p>If the value of flush is True, print() function directly write to&nbsp;sys.stdout without keeping cache.</p>', '<p>it is used to exit from a program or Python Shell.</p>', '<p>Return an object that produces a sequence of integers from start (inclusive) to stop (exclusive) by step. &nbsp;</p>\r\n\r\n<p>range(i, j) produces i, i+1, i+2, ..., j-1. start defaults to 0, and stop is omitted! &nbsp;</p>\r\n\r\n<p>range(4) produces 0, 1, 2, 3. These are exactly the valid indices for a list of 4 elements.</p>\r\n\r\n<p>When step is given, it specifies the increment (or decrement).</p>\r\n\r\n<p>&nbsp;range(stop) -&gt; range object<br />\r\n&nbsp;range(start, stop[, step]) -&gt; range object</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; range(4)<br />\r\nrange(0, 4)</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; print(*range(4))<br />\r\n0 1 2 3</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; print(*range(2,10))<br />\r\n2 3 4 5 6 7 8 9</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; print(*range(2, 40, 2))<br />\r\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; print(*range(40, 2, -2))<br />\r\n40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4</p>\r\n\r\n<p>&gt;&gt;&gt; list(range(4))<br />\r\n[0, 1, 2, 3]</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; tuple(range(4))<br />\r\n(0, 1, 2, 3)</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; set(range(4))<br />\r\n{0, 1, 2, 3}</p>', '<p>Return a reverse iterator.</p>\r\n\r\n<p>reversed(sequence) -&gt; reverse iterator over values of the sequence.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; letters = &quot;abcdefgh&quot;<br />\r\n&gt;&gt;&gt; reversed(letters)<br />\r\n&lt;reversed object at 0x024CC550&gt;<br />\r\n&gt;&gt;&gt; print(*reversed(letters))<br />\r\nh g f e d c b a</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; names = [&quot;John&quot;, &quot;Jack&quot;, &quot;Angelina&quot;, &quot;Micheal&quot;]<br />\r\n&gt;&gt;&gt; list(reversed(names))<br />\r\n[&#39;Micheal&#39;, &#39;Angelina&#39;, &#39;Jack&#39;, &#39;John&#39;]</p>', '<p>Return a new list containing all items from the iterable in ascending order.</p>\r\n\r\n<p>sorted(iterable, key=None, reverse=False)</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; names = [&quot;John&quot;, &quot;Jack&quot;, &quot;Angelina&quot;, &quot;Micheal&quot;]<br />\r\n&gt;&gt;&gt; sorted(names)<br />\r\n[&#39;Angelina&#39;, &#39;Jack&#39;, &#39;John&#39;, &#39;Micheal&#39;]</p>\r\n\r\n<p>&gt;&gt;&gt; sorted(&quot;Angelina&quot;)<br />\r\n[&#39;A&#39;, &#39;a&#39;, &#39;e&#39;, &#39;g&#39;, &#39;i&#39;, &#39;l&#39;, &#39;n&#39;, &#39;n&#39;]</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2: usage of reverse(ascending or descending) parameter</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; sorted(names, reverse=True)<br />\r\n[&#39;Micheal&#39;, &#39;John&#39;, &#39;Jack&#39;, &#39;Angelina&#39;]<br />\r\n&nbsp;</p>\r\n\r\n<p>&gt;&gt;&gt; numbers = [1, 4, 6, 9, -2, 0, 5]<br />\r\n&gt;&gt;&gt; sorted(numbers)<br />\r\n[-2, 0, 1, 4, 5, 6, 9]</p>\r\n\r\n<p>&gt;&gt;&gt; sorted(numbers, reverse=True)<br />\r\n[9, 6, 5, 4, 1, 0, -2]</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3: usage of key parameter</strong></span></p>\r\n\r\n<p><span style="color:null">people= [(&quot;John&quot;, 56), (&quot;Jack&quot;, 45), (&quot;Angelina&quot;, 40), (&quot;Micheal&quot;, 25)]<br />\r\nprint(sorted(people))</span></p>\r\n\r\n<p><strong>[(&#39;Angelina&#39;, 40), (&#39;Jack&#39;, 45), (&#39;John&#39;, 56), (&#39;Micheal&#39;, 25)] </strong><br />\r\nthis result is in ascending(letter(A, Ja, Jo, M)) order&nbsp;but if we want to have in ascending order(number(25, 40, 45, 56)), we should use key parameter of sorted function.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4:</strong></span></p>\r\n\r\n<p>def ranking(person):<br />\r\n&nbsp; &nbsp; return person[1]</p>\r\n\r\n<p>people= [(&quot;John&quot;, 56),<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; (&quot;Jack&quot;, 45),<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; (&quot;Angelina&quot;, 40),<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; (&quot;Micheal&quot;, 25)<br />\r\n&nbsp; &nbsp; ]<br />\r\nprint(sorted(people, key = ranking))</p>\r\n\r\n<p><strong>[(&#39;Micheal&#39;, 25), (&#39;Angelina&#39;, 40), (&#39;Jack&#39;, 45), (&#39;John&#39;, 56)]</strong></p>', '<p>Create a slice object. &nbsp;This is used for extended slicing (e.g. a[0:10:2])</p>\r\n\r\n<p>&nbsp;slice(stop)<br />\r\n&nbsp;slice(start, stop[, step])</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; letters = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]<br />\r\n&gt;&gt;&gt; sl = slice(3)<br />\r\n&gt;&gt;&gt; letters[sl]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; sl1 = slice(3, 5)<br />\r\n&gt;&gt;&gt; letters[sl1]<br />\r\n[&#39;d&#39;, &#39;e&#39;]</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; sl2 = slice(1,6,1)<br />\r\n&gt;&gt;&gt; letters[sl2]<br />\r\n[&#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; sl3 = slice(1,6,2)<br />\r\n&gt;&gt;&gt; letters[sl3]<br />\r\n[&#39;b&#39;, &#39;d&#39;, &#39;f&#39;]</p>', '<p>Return the sum of a &#39;start&#39; value (default: 0) plus an iterable of numbers<br />\r\nsum(iterable, start=0, /)<br />\r\nWhen the iterable is empty, return the start value.</p>\r\n\r\n<p>This function is intended specifically for use with numeric values and may reject non-numeric types.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; sum([1, 2, 3, 4, 5])<br />\r\n15</p>\r\n\r\n<p>&gt;&gt;&gt; sum([])<br />\r\n0</p>', '<p>return type of an object.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; type(1)<br />\r\n&lt;class &#39;int&#39;&gt;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; type(1.5)<br />\r\n&lt;class &#39;float&#39;&gt;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; type(&quot;a&quot;)<br />\r\n&lt;class &#39;str&#39;&gt;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; type(&#39;123&#39;)<br />\r\n&lt;class &#39;str&#39;&gt;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; type([1,2,3])<br />\r\n&lt;class &#39;list&#39;&gt;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; type((1,2,3,4,5))<br />\r\n&lt;class &#39;tuple&#39;&gt;</p>', '<p>Return a zip object whose .__next__() method returns a tuple where the i-th element comes from the i-th iterable argument. &nbsp;The .__next__() method continues until the shortest iterable in the argument sequence is exhausted and then it raises StopIteration.</p>\r\n\r\n<p>zip(iter1 [,iter2 [...]]) --&gt; zip object</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; names = [&quot;John&quot;, &quot;Jack&quot;, &quot;Angelina&quot;]<br />\r\n&gt;&gt;&gt; countries = [&quot;USA&quot;,&quot;EN&quot;,&quot;FR&quot;]<br />\r\n&gt;&gt;&gt; ages = [25, 45, 40]<br />\r\n&gt;&gt;&gt; zip(names, countries, ages)<br />\r\n&lt;zip object at 0x024D8698&gt;<br />\r\n&gt;&gt;&gt; list(zip(names, countries, ages))<br />\r\n[(&#39;John&#39;, &#39;USA&#39;, 25), (&#39;Jack&#39;, &#39;EN&#39;, 45), (&#39;Angelina&#39;, &#39;FR&#39;, 40)]</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2: If the length of iterables is not same,&nbsp;</strong></span></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; names = [&quot;John&quot;, &quot;Jack&quot;, &quot;Angelina&quot;]<br />\r\n&gt;&gt;&gt; languages=[&#39;GER&#39;, &#39;ITA&#39;]<br />\r\n&gt;&gt;&gt; list(zip(names, languages))<br />\r\n[(&#39;John&#39;, &#39;GER&#39;), (&#39;Jack&#39;, &#39;ITA&#39;)]</span></p>', '<p>show attributes&nbsp;of objects as dictionary.</p>\r\n\r\n<p>Without arguments, equivalent to locals().<br />\r\nWith an argument, equivalent to object.__dict__.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; vars()<br />\r\n{&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None, &#39;__package__&#39;: None, &#39;__loader__&#39;: &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &#39;__spec__&#39;: None, &#39;__annotations__&#39;: {}, &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;}</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span><br />\r\n&gt;&gt;&gt; vars(str)<br />\r\nmappingproxy({&#39;__repr__&#39;: &lt;slot wrapper &#39;__repr__&#39; of &#39;str&#39; objects&gt;, &#39;__hash__&#39;: &lt;slot wrapper &#39;__hash__&#39; of &#39;str&#39; objects&gt;, &#39;__str__&#39;: &lt;slot wrapper &#39;__str__&#39; of &#39;str&#39; objects&gt;, &#39;__getattribute__&#39;: &lt;slot wrapper &#39;__getattribute__&#39; of &#39;str&#39; objects&gt;, &#39;__lt__&#39;: &lt;slot wrapper &#39;__lt__&#39; of &#39;str&#39; objects&gt;, &#39;__le__&#39;: &lt;slot wrapper &#39;__le__&#39; of &#39;str&#39; objects&gt;, &#39;__eq__&#39;: &lt;slot wrapper &#39;__eq__&#39; of &#39;str&#39; objects&gt;, &#39;__ne__&#39;: &lt;slot wrapper &#39;__ne__&#39; of &#39;str&#39; objects&gt;, &#39;__gt__&#39;: &lt;slot wrapper &#39;__gt__&#39; of &#39;str&#39; objects&gt;, &#39;__ge__&#39;: &lt;slot wrapper &#39;__ge__&#39; of &#39;str&#39; objects&gt;, &#39;__iter__&#39;: &lt;slot wrapper &#39;__iter__&#39; of &#39;str&#39; objects&gt;, &#39;__mod__&#39;: &lt;slot wrapper &#39;__mod__&#39; of &#39;str&#39; objects&gt;, &#39;__rmod__&#39;: &lt;slot wrapper &#39;__rmod__&#39; of &#39;str&#39; objects&gt;, &#39;__len__&#39;: &lt;slot wrapper &#39;__len__&#39; of &#39;str&#39; objects&gt;, &#39;__getitem__&#39;: &lt;slot wrapper &#39;__getitem__&#39; of &#39;str&#39; objects&gt;, &#39;__add__&#39;: &lt;slot wrapper &#39;__add__&#39; of &#39;str&#39; objects&gt;, &#39;__mul__&#39;: &lt;slot wrapper &#39;__mul__&#39; of &#39;str&#39; objects&gt;, &#39;__rmul__&#39;: &lt;slot wrapper &#39;__rmul__&#39; of &#39;str&#39; objects&gt;, &#39;__contains__&#39;: &lt;slot wrapper &#39;__contains__&#39; of &#39;str&#39; objects&gt;, &#39;__new__&#39;: &lt;built-in method __new__ of type object at 0x5C84B5A0&gt;, &#39;encode&#39;: &lt;method &#39;encode&#39; of &#39;str&#39; objects&gt;, &#39;replace&#39;: &lt;method &#39;replace&#39; of &#39;str&#39; objects&gt;, &#39;split&#39;: &lt;method &#39;split&#39; of &#39;str&#39; objects&gt;, &#39;rsplit&#39;: &lt;method &#39;rsplit&#39; of &#39;str&#39; objects&gt;, &#39;join&#39;: &lt;method &#39;join&#39; of &#39;str&#39; objects&gt;, &#39;capitalize&#39;: &lt;method &#39;capitalize&#39; of &#39;str&#39; objects&gt;, &#39;casefold&#39;: &lt;method &#39;casefold&#39; of &#39;str&#39; objects&gt;, &#39;title&#39;: &lt;method &#39;title&#39; of &#39;str&#39; objects&gt;, &#39;center&#39;: &lt;method &#39;center&#39; of &#39;str&#39; objects&gt;, &#39;count&#39;: &lt;method &#39;count&#39; of &#39;str&#39; objects&gt;, &#39;expandtabs&#39;: &lt;method &#39;expandtabs&#39; of &#39;str&#39; objects&gt;, &#39;find&#39;: &lt;method &#39;find&#39; of &#39;str&#39; objects&gt;, &#39;partition&#39;: &lt;method &#39;partition&#39; of &#39;str&#39; objects&gt;, &#39;index&#39;: &lt;method &#39;index&#39; of &#39;str&#39; objects&gt;, &#39;ljust&#39;: &lt;method &#39;ljust&#39; of &#39;str&#39; objects&gt;, &#39;lower&#39;: &lt;method &#39;lower&#39; of &#39;str&#39; objects&gt;, &#39;lstrip&#39;: &lt;method &#39;lstrip&#39; of &#39;str&#39; objects&gt;, &#39;rfind&#39;: &lt;method &#39;rfind&#39; of &#39;str&#39; objects&gt;, &#39;rindex&#39;: &lt;method &#39;rindex&#39; of &#39;str&#39; objects&gt;, &#39;rjust&#39;: &lt;method &#39;rjust&#39; of &#39;str&#39; objects&gt;, &#39;rstrip&#39;: &lt;method &#39;rstrip&#39; of &#39;str&#39; objects&gt;, &#39;rpartition&#39;: &lt;method &#39;rpartition&#39; of &#39;str&#39; objects&gt;, &#39;splitlines&#39;: &lt;method &#39;splitlines&#39; of &#39;str&#39; objects&gt;, &#39;strip&#39;: &lt;method &#39;strip&#39; of &#39;str&#39; objects&gt;, &#39;swapcase&#39;: &lt;method &#39;swapcase&#39; of &#39;str&#39; objects&gt;, &#39;translate&#39;: &lt;method &#39;translate&#39; of &#39;str&#39; objects&gt;, &#39;upper&#39;: &lt;method &#39;upper&#39; of &#39;str&#39; objects&gt;, &#39;startswith&#39;: &lt;method &#39;startswith&#39; of &#39;str&#39; objects&gt;, &#39;endswith&#39;: &lt;method &#39;endswith&#39; of &#39;str&#39; objects&gt;, &#39;islower&#39;: &lt;method &#39;islower&#39; of &#39;str&#39; objects&gt;, &#39;isupper&#39;: &lt;method &#39;isupper&#39; of &#39;str&#39; objects&gt;, &#39;istitle&#39;: &lt;method &#39;istitle&#39; of &#39;str&#39; objects&gt;, &#39;isspace&#39;: &lt;method &#39;isspace&#39; of &#39;str&#39; objects&gt;, &#39;isdecimal&#39;: &lt;method &#39;isdecimal&#39; of &#39;str&#39; objects&gt;, &#39;isdigit&#39;: &lt;method &#39;isdigit&#39; of &#39;str&#39; objects&gt;, &#39;isnumeric&#39;: &lt;method &#39;isnumeric&#39; of &#39;str&#39; objects&gt;, &#39;isalpha&#39;: &lt;method &#39;isalpha&#39; of &#39;str&#39; objects&gt;, &#39;isalnum&#39;: &lt;method &#39;isalnum&#39; of &#39;str&#39; objects&gt;, &#39;isidentifier&#39;: &lt;method &#39;isidentifier&#39; of &#39;str&#39; objects&gt;, &#39;isprintable&#39;: &lt;method &#39;isprintable&#39; of &#39;str&#39; objects&gt;, &#39;zfill&#39;: &lt;method &#39;zfill&#39; of &#39;str&#39; objects&gt;, &#39;format&#39;: &lt;method &#39;format&#39; of &#39;str&#39; objects&gt;, &#39;format_map&#39;: &lt;method &#39;format_map&#39; of &#39;str&#39; objects&gt;, &#39;__format__&#39;: &lt;method &#39;__format__&#39; of &#39;str&#39; objects&gt;, &#39;maketrans&#39;: &lt;staticmethod object at 0x00110E70&gt;, &#39;__sizeof__&#39;: &lt;method &#39;__sizeof__&#39; of &#39;str&#39; objects&gt;, &#39;__getnewargs__&#39;: &lt;method &#39;__getnewargs__&#39; of &#39;str&#39; objects&gt;, &#39;__doc__&#39;: &quot;str(object=&#39;&#39;) -&gt; str\\nstr(bytes_or_buffer[, encoding[, errors]]) -&gt; str\\n\\nCreate a new string object from the given object. If encoding or\\nerrors is specified, then the object must expose a data buffer\\nthat will be decoded using the given encoding and error handler.\\nOtherwise, returns the result of object.__str__() (if defined)\\nor repr(object).\\nencoding defaults to sys.getdefaultencoding().\\nerrors defaults to &#39;strict&#39;.&quot;})</p>', '<p>Create a new memoryview object which references the given object.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = bytes(&quot;python&quot;, encoding=&quot;ascii&quot;)<br />\r\n&gt;&gt;&gt; memoryview(a)<br />\r\n&lt;memory at 0x022ED920&gt;<br />\r\n&gt;&gt;&gt; print(*memoryview(a))<br />\r\n112 121 116 104 111 110</p>\r\n\r\n<p>&nbsp;</p>', '<p>&nbsp; &nbsp; iter(iterable) -&gt; iterator<br />\r\n&nbsp; &nbsp; iter(callable, sentinel) -&gt; iterator<br />\r\n&nbsp; &nbsp;&nbsp;</p>\r\n\r\n<p>Get an iterator from an object. &nbsp;In the first form, the argument must supply its own iterator, or be a sequence.</p>\r\n\r\n<p>In the second form, the callable is called until it returns the sentinel.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = iter(&#39;python&#39;)<br />\r\n&gt;&gt;&gt; a<br />\r\n&lt;str_iterator object at 0x02258D50&gt;<br />\r\n&gt;&gt;&gt; print(*a)<br />\r\np y t h o n</p>\r\n\r\n<p>&gt;&gt;&gt; list(iter([1, 2, 3, 4, 5]))<br />\r\n[1, 2, 3, 4, 5]</p>', '<p>If we want to create loop, we have two options: while and for</p>\r\n\r\n<p><strong>while statement</strong></p>\r\n\r\n<p>It&nbsp;is used for repeated execution as long as an expression is true. Lets us examine Example1&nbsp;together.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>a = 5<br />\r\nwhile a &gt; 0:<br />\r\n&nbsp; &nbsp; print(a)<br />\r\n&nbsp; &nbsp; a = a -1</p>\r\n\r\n<p>5<br />\r\n4<br />\r\n3<br />\r\n2<br />\r\n1</p>\r\n\r\n<p>1. <strong>a = 5</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>we have &nbsp;the variable a whose value is 5</p>\r\n\r\n<p>2.<strong>&nbsp;while a &gt; 0:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(a)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; a = a -1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>\r\n\r\n<p>while statement has the a &gt; 0 expression and as long as this expression is True, the intended statement&nbsp;and expression&nbsp;will work.&nbsp; In this example we have print(a) and a = a - 1 statements. Lets us examine every loop step by step .</p>\r\n\r\n<p>-<strong>first loop</strong>&nbsp; &nbsp; &nbsp; &nbsp; a = 5&nbsp;and the result of 5&nbsp;&gt; 0 is True and then we will see 5&nbsp;on the Python Shell&nbsp;finally a = 4<br />\r\n<strong>-second loop</strong>&nbsp; a = 4&nbsp;and&nbsp;the result of 4&nbsp;&gt; 0 is True and then we will see 4&nbsp;on the Python Shell&nbsp;finally a = 3<br />\r\n<strong>-third loop</strong>&nbsp; &nbsp; &nbsp; &nbsp;a = 3 and the result of 3 &gt; 0 is True and then we will see 3 on the Python Shell finally a = 2<br />\r\n<strong>-fourth loop</strong>&nbsp; &nbsp; &nbsp;a = 2&nbsp;and the result of 2&nbsp;&gt; 0 is True and then we will see 2&nbsp;on the Python Shell finally a = 1<br />\r\n<strong>-fifth loop</strong>&nbsp; &nbsp; &nbsp; &nbsp; a = 1 and the result of a &gt; 0 is True&nbsp;and then we will see 1&nbsp;on the Python Shell finally a = 0<br />\r\n<s><strong>-sixth loop</strong></s>&nbsp; &nbsp; &nbsp; &nbsp;a = 0 and the result of&nbsp;a &gt; 0 is False so loop ends</p>\r\n\r\n<p><strong>infinite loop</strong></p>\r\n\r\n<p>If we want to create infinite loop, you can use this while statement:&nbsp;</p>\r\n\r\n<p>while True:&nbsp;</p>\r\n\r\n<p>But we should be control to quit from loop, otherwise our program&nbsp;works non-stopping. If we do this mistake, you can quit from program with pushing CTRL +C&nbsp;or Ctrl + Z.</p>\r\n\r\n<p><span style="color:null"><strong>break statement</strong></span></p>\r\n\r\n<p><span style="color:null">It terminates the nearest enclosing loop.</span></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2: This program&nbsp;repeatedly asks for &quot;What is your name&quot;. but if user type &quot;q&quot;, the program ends, else &quot;Hello user&#39;s name&quot;.</strong></span></p>\r\n\r\n<p><span style="color:null">while True:<br />\r\n&nbsp; &nbsp; a = input(&quot; Whats is your name: \\n &quot;)<br />\r\n&nbsp; &nbsp; if a == &quot;q&quot;:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;Bye Bye&quot;)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; break<br />\r\n&nbsp; &nbsp; else:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;Hello&quot;, a, &quot;\\n&quot;)</span></p>\r\n\r\n<p><strong>Result:&nbsp;</strong></p>\r\n\r\n<p><span style="color:null">Whats is your name:<br />\r\nJack<br />\r\nHello Jack&nbsp;</span></p>\r\n\r\n<p><span style="color:null">Whats is your name:<br />\r\nTom<br />\r\nHello Tom&nbsp;</span></p>\r\n\r\n<p><span style="color:null">Whats is your name:<br />\r\nq<br />\r\nBye Bye</span></p>\r\n\r\n<p><strong>continue statement</strong></p>\r\n\r\n<p>It skip to the next iteration without finishing the body of the loop for&nbsp;the current iteration.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3:&nbsp;</span></strong><span style="color:#e74c3c"><strong>This program&nbsp;repeatedly asks for &quot;Please write a letter: &quot;. &nbsp;</strong></span></p>\r\n\r\n<p><span style="color:null">if an user type &quot;q&quot;, the program ends.&nbsp;</span></p>\r\n\r\n<p><span style="color:null">if an user type &quot;c&quot;, continue statement work and then it skips next iteration(</span>print(&quot;You did write&quot;, a, &quot; not q or c&quot;, &quot;\\n&quot;) don&#39;t work<span style="color:null">). </span></p>\r\n\r\n<p><span style="color:null">else </span>print(&quot;You did write&quot;, a, &quot; not q or c&quot;, &quot;\\n&quot;)&nbsp;works.</p>\r\n\r\n<p>while True: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; a = input(&quot;Please write a letter: &nbsp; &quot;)<br />\r\n&nbsp; &nbsp; if a == &quot;q&quot;:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;The break statement worked. Bye Bye!&quot;, &quot;\\n&quot;)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; break<br />\r\n&nbsp; &nbsp; if a == &quot;c&quot;:&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;The continue statement worked. Lets go next loop&quot;, &quot;\\n&quot;)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; continue<br />\r\n&nbsp; &nbsp; print(&quot;You did write&quot;, a, &quot; not q or c&quot;, &quot;\\n&quot;)</p>\r\n\r\n<p><strong>when our input is respectively &quot;a&quot;, &quot;b&quot;, &quot;c&quot; and &quot;q&quot;, our result will be like this:&nbsp;</strong></p>\r\n\r\n<p>Please write a letter: &nbsp; a<br />\r\nYou did write a &nbsp;not q or c&nbsp;</p>\r\n\r\n<p>Please write a letter: &nbsp; b<br />\r\nYou did write b &nbsp;not q or c&nbsp;</p>\r\n\r\n<p>Please write a letter: &nbsp; c<br />\r\nThe continue statement worked. Lets go next loop&nbsp;</p>\r\n\r\n<p>Please write a letter: &nbsp; q<br />\r\nThe break statement worked. Bye Bye!</p>\r\n\r\n<p><strong>for statement</strong></p>\r\n\r\n<p>The &quot;for&quot; statement is used to iterate over the elements of a sequence (such as a string, tuple or list) or other iterable object. This statement is used for creating loop like the while statement. The continue statement and break statement can be used in for statement too like while statement.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>letters = &quot;abcdefg&quot;<br />\r\nfor letter in letters:<br />\r\n&nbsp; &nbsp; print(letter)</p>\r\n\r\n<p>a<br />\r\nb<br />\r\nc<br />\r\nd<br />\r\ne<br />\r\nf<br />\r\ng</p>\r\n\r\n<p>Lets examine the program</p>\r\n\r\n<p>1. <strong>for letter in letters:</strong> variable letters is string which is &quot;abcdefg&quot; and iterable.</p>\r\n\r\n<p>&nbsp; &nbsp; value of letter in letters is True until last letter(&#39;g&#39;). After last letter(g), it is False so our loop ends.&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; letter is string which is &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39; but only one of them can be used in its loop. Such as:</p>\r\n\r\n<p>&nbsp; &nbsp; in first loop value of letter is &#39;a&#39; and print a<br />\r\n&nbsp; &nbsp;&nbsp;in second&nbsp;loop value of letter is &#39;b&#39; and print b<br />\r\n&nbsp; &nbsp;&nbsp;in third&nbsp;loop value of letter is &#39;c&#39; and print c<br />\r\n&nbsp; &nbsp;&nbsp;in fourth&nbsp;loop value of letter is &#39;d&#39; and print d<br />\r\n&nbsp; &nbsp;&nbsp;in fifth&nbsp;loop value of letter is &#39;e&#39; and print e<br />\r\n&nbsp; &nbsp;&nbsp;in sixth&nbsp;loop value of letter is &#39;f&#39; and print f<br />\r\n&nbsp; &nbsp; in seventh&nbsp;loop value of letter is &#39;g&#39; and print g</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>our_list = [&quot;Jack&quot;, &quot;Tom&quot;, &quot;Angelina&quot;]<br />\r\nfor person in our_list:<br />\r\n&nbsp; &nbsp; print(&quot;Hello&quot;, person)</p>\r\n\r\n<p>Hello Jack<br />\r\nHello Tom<br />\r\nHello Angelina</p>\r\n\r\n<p><strong>Note: </strong>Because numbers are not iterable, we shouldn&#39;t&nbsp;use in for loops.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>numbers = 123456<br />\r\nfor number in numbers:<br />\r\n&nbsp; &nbsp; print(number</p>\r\n\r\n<p><span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;C:/Users/sahint&uuml;rk/Desktop/python_programları/for_examples.py&quot;, line 10, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; for number in numbers:<br />\r\nTypeError: &#39;int&#39; object is not iterable</span></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example4:&nbsp;</span></strong></p>\r\n\r\n<p><span style="color:null">numbers = &quot;123456&quot;<br />\r\nfor number in numbers:<br />\r\n&nbsp; &nbsp; print(number)</span></p>\r\n\r\n<p><span style="color:null">1 &nbsp;2 &nbsp;3 &nbsp;4 &nbsp;5 &nbsp;6&nbsp;</span></p>\r\n\r\n<p><strong>Usage of the range() function with for loops</strong></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example5:</strong></span></p>\r\n\r\n<p>for i in range(5):<br />\r\n&nbsp; &nbsp; print(i)</p>\r\n\r\n<p>1<br />\r\n2<br />\r\n3<br />\r\n4</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example6:</strong></span></p>\r\n\r\n<p>for i in range(20,36):<br />\r\n&nbsp; &nbsp; print(i, end = &quot; &nbsp;&quot;)</p>\r\n\r\n<p>20 &nbsp;21 &nbsp;22 &nbsp;23 &nbsp;24 &nbsp;25 &nbsp;26 &nbsp;27 &nbsp;28 &nbsp;29 &nbsp;30 &nbsp;31 &nbsp;32 &nbsp;33 &nbsp;34 &nbsp;35&nbsp;</p>\r\n\r\n<p><strong>pass statement with for loops</strong></p>\r\n\r\n<p>&quot;pass&quot; is a null operation --- when it is executed, nothing happens. It is useful to not take error after &quot;:&quot; character. It is generally used with function and class.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example7: Nothing happend</strong></span></p>\r\n\r\n<p>letters = &quot;abcdefg&quot;<br />\r\nfor letter in letters:<br />\r\n&nbsp; &nbsp; pass</p>', '<p>A function is a sequence of statements that make&nbsp;a computation. In order to define a function,&nbsp; you need the name and specify the name and&nbsp;the sequence of statements. And then you can call the function by using name of it.<br />\r\nLets us examine this:</p>\r\n\r\n<p>&gt;&gt;&gt; len(&quot;python&quot;)<br />\r\n6</p>\r\n\r\n<p>name of this function is &quot;len&quot;<br />\r\nargument for this example is &quot;python&quot;<br />\r\nreturn value of this function is 6&nbsp;<br />\r\nwhen you call the function, you should use parantheses() with name like len(&quot;argument&quot;)</p>\r\n\r\n<p><strong>Why do we need the functions?</strong></p>\r\n\r\n<p>- easier to read, understand, and debug the programs</p>\r\n\r\n<p>-&nbsp;eliminating repetitive code</p>\r\n\r\n<p>-being reusable</p>\r\n\r\n<p><strong>The Kinds of Function</strong></p>\r\n\r\n<p>1. Built-in Functions:&nbsp;This type function is created by Python developer. print(), len(), type(), int(), str() ...</p>\r\n\r\n<p>2. Custom&nbsp;functions: This type function is created by us.</p>', '<p>In order to define a function, you&nbsp;need a keyword whose name is &quot;<strong>def</strong>&quot;, a name, &quot;:&quot; and sequence statements.</p>\r\n\r\n<p>here&#39;is an example:</p>\r\n\r\n<p><span style="color:#e67e22">def</span> <span style="color:#3498db">plus_two_number</span>(number1, number2):<br />\r\n&nbsp; &nbsp; result = number1 + number2<br />\r\n&nbsp; &nbsp; <span style="color:#e74c3c">print</span>(result)<br />\r\n&nbsp; &nbsp; <span style="color:#e67e22">return</span> result</p>\r\n\r\n<p>-&nbsp;<strong>def</strong> is keyword to define&nbsp;<span style="color:#3498db">plus_two_number() function<br />\r\n-&nbsp;</span><span style="color:null"><strong>plus_two_number&nbsp;</strong>is name of this function<br />\r\n- <strong>number1 and number2&nbsp;</strong>are parameters of this function<br />\r\n- <strong>: character</strong> is necessary to compute the intended statements<br />\r\n- </span><strong>result = number1 + number2 and&nbsp;<span style="color:null">print</span>(result)</strong>&nbsp;are&nbsp;<span style="color:null">the intended statements&nbsp;for computing&nbsp;<br />\r\n- <strong>return</strong> is keyword to send a result of a function</span></p>\r\n\r\n<p><span style="color:null"><strong>calling function</strong></span></p>\r\n\r\n<p>In order to use a function, we should call it like this :</p>\r\n\r\n<p><span style="color:null">a = plus_two_number(5, 6)<br />\r\n11</span>&nbsp;&nbsp;</p>\r\n\r\n<p><span style="color:null"><strong>plus_two_number&nbsp;</strong>is name of this function<br />\r\n<strong>5 and 6</strong> are arguments for this function. 5 is for number1 parameter and 6 is for number2 parameter</span><br />\r\n<strong>a&nbsp;</strong>is 11 because of&nbsp;<span style="color:#e67e22">return</span><span style="color:null"> result, we can store in variable a<br />\r\n<strong>11</strong>&nbsp;is shown because of&nbsp;</span><span style="color:#e74c3c">print</span>(result) otherwise you couldn&#39;t anything</p>', '<p>You can define several different type functions which depend on parameters.</p>\r\n\r\n<p><strong>A function without parameter</strong></p>\r\n\r\n<p>you don&#39;t have to define a function with parameter.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>def hello_world():<br />\r\n&nbsp; &nbsp; print(&quot;Hello World&quot;)</p>\r\n\r\n<p>hello_world() # calling the function</p>\r\n\r\n<p>Hello World</p>\r\n\r\n<p><strong>The ordered parameters</strong></p>\r\n\r\n<p>The order of parameters are important when you use them.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>def name_and_age(name, age):<br />\r\n&nbsp; &nbsp; print(&quot;Your name is : &quot;, name)<br />\r\n&nbsp; &nbsp; print(&quot;You are &quot;, age)</p>\r\n\r\n<p>name_and_age(&quot;John&quot;, 40)</p>\r\n\r\n<p>Your name is : &nbsp;John<br />\r\nYou are &nbsp;40</p>\r\n\r\n<p>If you call this function like this:&nbsp;name_and_age(40, &quot;John&quot;), your output will be&nbsp;</p>\r\n\r\n<p>Your name is :&nbsp; 40<br />\r\nYou are&nbsp; John</p>\r\n\r\n<p><strong>The unordered parameters</strong></p>\r\n\r\n<p>when you&nbsp;call above function with parameters, you don&#39;t have to call in order. So You can call like this:</p>\r\n\r\n<p>name_and_age(age = 40, name = &quot;John&quot;)&nbsp;</p>\r\n\r\n<p>Your name is : &nbsp;John<br />\r\nYou are &nbsp;40</p>\r\n\r\n<p>However you can&#39;t call like this:</p>\r\n\r\n<p>name_and_age(age = 40, &quot;John&quot;)&nbsp;</p>\r\n\r\n<p>İf you want, you will take error.</p>\r\n\r\n<p><strong>The default parameters</strong></p>\r\n\r\n<p>If you&nbsp;want to give default value to parameter, you can define like this:</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>def planet(name = &quot;World&quot;):<br />\r\n&nbsp; &nbsp; print(&quot;Your planet is&quot;, name)</p>\r\n\r\n<p>If you call like below:<br />\r\nplanet()<br />\r\nyour result is<br />\r\nYour planet is World</p>\r\n\r\n<p>You can call like this too:<br />\r\nplanet(&quot;Mars&quot;)<br />\r\nYour planet is Mars</p>\r\n\r\n<p><strong>The unordered and infinite parameters</strong></p>\r\n\r\n<p>In order to define infinite unordered parameters, you should use * character.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4</strong></span></p>\r\n\r\n<p>def show_all(*args):<br />\r\n&nbsp; &nbsp; print(args)</p>\r\n\r\n<p>show_all(1, 2, 3, 4, 5, 6, 7, 8)</p>\r\n\r\n<p>(1, 2, 3, 4, 5, 6, 7, 8)</p>\r\n\r\n<p><strong>The infinite ordered parameters</strong></p>\r\n\r\n<p>In order to define infinite unordered parameters, you should use ** character.</p>\r\n\r\n<p>def showing(**kwargs):<br />\r\n&nbsp; &nbsp; print(kwargs)</p>\r\n\r\n<p>showing(name = &quot;John&quot;, age = 40, lastname = &quot;Rock&quot;)</p>\r\n\r\n<p>{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 40, &#39;lastname&#39;: &#39;Rock&#39;}</p>', '<p>l&ouml;</p>', '<p>A string has the characters such as &quot;python&quot;, &quot;&quot;, &quot; &quot;, &quot;+&quot;, &quot;123&quot; .&nbsp;You can access the characters with&nbsp;the bracket operator []. First character is [0] of a string.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;Python&quot;<br />\r\n&gt;&gt;&gt; string<br />\r\n&#39;Python&#39;<br />\r\n&gt;&gt;&gt; string[0]<br />\r\n&#39;P&#39;<br />\r\n&gt;&gt;&gt; string[1]<br />\r\n&#39;y&#39;<br />\r\n&gt;&gt;&gt; string[2]<br />\r\n&#39;t&#39;<br />\r\n&gt;&gt;&gt; string[3]<br />\r\n&#39;h&#39;<br />\r\n&gt;&gt;&gt; string[4]<br />\r\n&#39;o&#39;<br />\r\n&gt;&gt;&gt; string[5]<br />\r\n&#39;n&#39;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>string = &quot;Hello World&quot;<br />\r\nfor letter in string:<br />\r\n&nbsp; &nbsp; print(letter)</p>\r\n\r\n<p>H<br />\r\ne<br />\r\nl<br />\r\nl<br />\r\no<br />\r\n&nbsp;<br />\r\nW<br />\r\no<br />\r\nr<br />\r\nl<br />\r\nd</p>\r\n\r\n<p><strong>Getting the length of a string</strong></p>\r\n\r\n<p>In order to get the length of a string, you can use len() function.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; len(&#39;Python&#39;)<br />\r\n6<br />\r\n&gt;&gt;&gt; len(&#39;apple&#39;)<br />\r\n5</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4:&nbsp;getting the last letter of a string</strong></span></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; string = &quot;computer&quot;<br />\r\n&gt;&gt;&gt; string[len(string) - 1]<br />\r\n&#39;r&#39;</span></p>\r\n\r\n<p><span style="color:null"><strong>Usage of &quot;in&quot; and &quot;not in&quot; statement</strong></span></p>\r\n\r\n<p><span style="color:null">The operators &quot;in&quot; and &quot;not in&quot; test for membership. An output is True or False.</span></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example5:</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; &quot;a&quot; in &quot;apple&quot;<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;q&quot; in &quot;apple&quot;<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;a&quot; not in &quot;apple&quot;<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;q&quot; not in &quot;apple&quot;<br />\r\nTrue</span></p>\r\n\r\n<p><strong>Comparision of string</strong></p>\r\n\r\n<p>To compare strings, you should use == or &gt;, &lt; operators.</p>\r\n\r\n<p>== operators ask if strings are equal.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example6:</span></strong></p>\r\n\r\n<p>string = input(&quot;Please, write a string: &nbsp;&quot;)<br />\r\nif string == &quot;Python&quot;:<br />\r\n&nbsp; &nbsp; print(&quot;It is Python&quot;)<br />\r\nelse:<br />\r\n&nbsp; &nbsp; print(&quot;It isn&#39;t Python&quot;)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&lt; and &gt; operators check if strings are in alphabetical order.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example7:</strong></span></p>\r\n\r\n<p>string = input(&quot;Please, write a string: &nbsp;&quot;)<br />\r\nif string &gt; &quot;Python&quot;:<br />\r\n&nbsp; &nbsp; print(&quot;alphabetical order is&quot;, &quot;Python&quot;, string)<br />\r\nelse:<br />\r\n&nbsp; &nbsp; print(&quot;alphabetical order is&quot;, string, &quot;Python&quot;)</p>', '<p>To take partion of a string, you can use (<strong>:</strong>) character. our formula is</p>\r\n\r\n<p>string[first_elements_order&nbsp;<strong>:</strong> last_elements_order+1]</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;SpiderMan&quot;<br />\r\n&gt;&gt;&gt; string[0:5]<br />\r\n&#39;Spide&#39;<br />\r\n&gt;&gt;&gt; string[0:6]<br />\r\n&#39;Spider&#39;<br />\r\n&gt;&gt;&gt; string[6:9]<br />\r\n&#39;Man&#39;</p>\r\n\r\n<p><strong>Note:</strong>If you omit the first index (before the colon), the slice starts at the beginning of the string. If you omit the second index, the slice goes to the end of the string:</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;SpiderMan&quot;<br />\r\n&gt;&gt;&gt; string[:]<br />\r\n&#39;SpiderMan&#39;<br />\r\n&gt;&gt;&gt; string[:6]<br />\r\n&#39;Spider&#39;<br />\r\n&gt;&gt;&gt; string[6:]<br />\r\n&#39;Man&#39;</p>\r\n\r\n<p><strong>Note: </strong><span style="color:null"><strong>To reverse</strong> of a&nbsp;string, you can use slice character, too.</span></p>\r\n\r\n<p>string[first_character <strong>:</strong>&nbsp;last_character&nbsp;<strong>:</strong>&nbsp;step]</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;Python&quot;<br />\r\n&gt;&gt;&gt; string[::-1]<br />\r\n&#39;nohtyP&#39;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example4: to reverse a partion of a string</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;Python&quot;<br />\r\n&gt;&gt;&gt; string[4:0:-1]<br />\r\n&#39;ohty&#39;<br />\r\n&gt;&gt;&gt; string[4::-1]<br />\r\n&#39;ohtyP&#39;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example5:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; string[0:3]<br />\r\n&#39;Tom&#39;<br />\r\n&gt;&gt;&gt; string[8:]<br />\r\n&#39;Jerry&#39;<br />\r\n&gt;&gt;&gt; string[::1]<br />\r\n&#39;Tom and Jerry&#39;<br />\r\n&gt;&gt;&gt; string[::-1]<br />\r\n&#39;yrreJ dna moT&#39;<br />\r\n&gt;&gt;&gt; string[::2]<br />\r\n&#39;TmadJry&#39;<br />\r\n&gt;&gt;&gt; string[::-2]<br />\r\n&#39;yrJdamT&#39;</p>\r\n\r\n<p>Note: You can use reversed() function to reverse a string, too</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example6:</strong></span></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; print(*reversed(string))<br />\r\ny r r e J &nbsp; d n a &nbsp; m o T</span></p>', '<p>Python has two datatypes which are immutable and mutable. Strings&nbsp;are immutable so if a string assigns a variable, you can&#39;t change this string.&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;Python&quot;<br />\r\n&gt;&gt;&gt; string[0]<br />\r\n&#39;P&#39;<br />\r\n&gt;&gt;&gt; string[0] = &quot;J&quot;<br />\r\nTraceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#20&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; string[0] = &quot;J&quot;<br />\r\nTypeError: &#39;str&#39; object does not support item assignment</p>\r\n\r\n<p><strong>Note:</strong> If you&nbsp;need change a string, you should redefine another string.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; string = &#39;Python&#39;<br />\r\n&gt;&gt;&gt; string = &#39;J&#39; + string[1:]<br />\r\n&gt;&gt;&gt; string<br />\r\n&#39;Jython&#39;</p>', '<p>In order to list methods of the strings, we can use dir function which&nbsp;return an alphabetized list of names comprising (some of) the attributes of the given object, and of attributes reachable from it.</p>\r\n\r\n<p>dir(str) or dir(&quot;&quot;) or dir(&quot;apple&quot;) each of these commands show methods of the string in aphabetical order.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; dir(str)<br />\r\n[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, <strong>&#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;</strong>]&nbsp;</p>\r\n\r\n<p>Above there are all methods of the strings. Because the strings without &quot;__&quot; character are very important, we will examine them next lessons.</p>', '<p>Return a copy of a string&nbsp;with all occurrences of substring old replaced by new. &nbsp;If the optional argument count is given, only the first count occurrences are replaced.</p>\r\n\r\n<p>The methods are used with &quot;.&quot; character after string and other types. This called &quot;dot notation&quot; in Python.</p>\r\n\r\n<p>str.replace(old_character, new_character, count) -&gt; str</p>\r\n\r\n<p><strong>str&nbsp;:</strong> is any string like &quot;Python&quot;, &quot;apple&quot;...<br />\r\n<strong>old_character :&nbsp;</strong>a partion of exisiting character such as:&nbsp; &quot;P&quot;, &quot;Py&quot;, &quot;o&quot; for&nbsp;&quot;Python&quot; ...<br />\r\n<strong>new_character : </strong>any new character such as: &quot;J&quot;, &quot;abc&quot;, &quot;&quot;,&quot; &quot; ...<br />\r\n<strong>count :</strong> optional character is the&nbsp;number of replaced character such as: count =1 only first one old_character is replaced.&nbsp;<br />\r\n<span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; string.replace(&quot;P&quot;, &quot;J&quot;)<br />\r\n&#39;Jython&#39;<br />\r\n&gt;&gt;&gt; string.replace(&quot;Pyt&quot;, &quot;Telep&quot;)<br />\r\n&#39;Telephon&#39;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; string.replace(&quot;a&quot;, &quot;A&quot;)<br />\r\n&#39;bAnAnA&#39;<br />\r\n&gt;&gt;&gt; string.replace(&quot;a&quot;,&quot;A&quot;,1)<br />\r\n&#39;bAnana&#39;<br />\r\n&gt;&gt;&gt; string.replace(&quot;a&quot;,&quot;A&quot;,2)<br />\r\n&#39;bAnAna&#39;<br />\r\n&gt;&gt;&gt; string.replace(&quot;a&quot;,&quot;&quot;)<br />\r\n&#39;bnn&#39;<br />\r\n&gt;&gt;&gt; string.replace(&quot;a&quot;,&quot;&quot;,1)<br />\r\n&#39;bnana&#39;<br />\r\n&gt;&gt;&gt; string.replace(&quot;a&quot;, &quot; &quot;, 2)<br />\r\n&#39;b n na&#39;</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;Please, don&#39;t forget that the strings are immutable. The Methods &nbsp;can&#39;t change the strings. Only they give an output.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;banana&quot;<br />\r\n&gt;&gt;&gt; string.replace(&quot;a&quot;, &quot;A&quot;)<br />\r\n&#39;bAnAnA&#39;<br />\r\n&gt;&gt;&gt; string<br />\r\n&#39;banana&#39;<br />\r\n&gt;&gt;&gt; new_string = string.replace(&quot;a&quot;, &quot;A&quot;)<br />\r\n&gt;&gt;&gt; new_string<br />\r\n&#39;bAnAnA&#39;</p>\r\n\r\n<p><strong>Note:</strong> If sep is not in a string, split method doesn&#39;t anything</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example4:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; string.replace(&quot;c&quot;, &quot;k&quot;)<br />\r\n&#39;banana&#39;</p>', '<p>Return a list of the words in an string, using sep as the delimiter string. &nbsp;If maxsplit is given, at most maxsplit splits are done.</p>\r\n\r\n<p>str.split(sep=None, maxsplit=-1) -&gt; list of strings</p>\r\n\r\n<p><strong>sep :</strong> a seperator character(s) in string such as : &quot;a&quot; for &quot;banana&quot; string<br />\r\n<strong>maxsplit : </strong>number of a split character(s) such as. 0, 1, 2, 3 ...</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;banana&quot;<br />\r\n&gt;&gt;&gt; string.split(&quot;a&quot;)<br />\r\n[&#39;b&#39;, &#39;n&#39;, &#39;n&#39;, &#39;&#39;]<br />\r\n&gt;&gt;&gt; string.split(&quot;n&quot;)<br />\r\n[&#39;ba&#39;, &#39;a&#39;, &#39;a&#39;]<br />\r\n&gt;&gt;&gt; string.split(&quot;b&quot;)<br />\r\n[&#39;&#39;, &#39;anana&#39;]<br />\r\n&gt;&gt;&gt; string.split(&quot;a&quot;,1)<br />\r\n[&#39;b&#39;, &#39;nana&#39;]<br />\r\n&gt;&gt;&gt; string.split(&quot;a&quot;,2)<br />\r\n[&#39;b&#39;, &#39;n&#39;, &#39;na&#39;]</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; cities = &quot;London, Paris, Berlin&quot;<br />\r\n&gt;&gt;&gt; cities.split(&quot;,&quot;)<br />\r\n[&#39;London&#39;, &#39; Paris&#39;, &#39; Berlin&#39;]</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;If sep is not specified or is None, any whitespace string is a separator and empty strings are removed from the result.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;The United State America&quot;<br />\r\n&gt;&gt;&gt; string.split()<br />\r\n[&#39;The&#39;, &#39;United&#39;, &#39;State&#39;, &#39;America&#39;]</p>\r\n\r\n<p>&gt;&gt;&gt; cities = &quot;London,Paris,Berlin&quot;<br />\r\n&gt;&gt;&gt; cities.split(&quot;,&quot;)<br />\r\n[&#39;London&#39;, &#39;Paris&#39;, &#39;Berlin&#39;]</p>\r\n\r\n<p><strong>Note:</strong> If sep is not in string, split method doesn&#39;t anything like replace method</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; string.split(&quot;c&quot;)<br />\r\n[&#39;banana&#39;]</p>\r\n\r\n<p><strong>rsplit()</strong></p>\r\n\r\n<p>It works like split() but it does same things with starting at the end of the string and working to the front.</p>', '<p>Return a list of the lines in string, breaking at line boundaries.</p>\r\n\r\n<p>&nbsp;str.splitlines(keepends) -&gt; list of strings</p>\r\n\r\n<p><strong>keepends :</strong> default value is False, if it is True, you will see &quot;\\n&quot; newline character every element&nbsp;in the occured list</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;&quot;&quot; Welcome to Python 3.6&#39;s help utility!</p>\r\n\r\n<p>If this is your first time using Python, you should definitely check out<br />\r\nthe tutorial on the Internet at http://docs.python.org/3.6/tutorial/.</p>\r\n\r\n<p>Enter the name of any module, keyword, or topic to get help on writing<br />\r\nPython programs and using Python modules. &nbsp;To quit this help utility and<br />\r\nreturn to the interpreter, just type &quot;quit&quot;.</p>\r\n\r\n<p>To get a list of available modules, keywords, symbols, or topics, type<br />\r\n&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;. &nbsp;Each module also comes<br />\r\nwith a one-line summary of what it does; to list the modules whose name<br />\r\nor summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;. &quot;&quot;&quot;</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> string.splitlines()</p>\r\n\r\n<p>[&quot; Welcome to Python 3.6&#39;s help utility!&quot;, &#39;&#39;, &#39;If this is your first time using Python, you should definitely check out&#39;, &#39;the tutorial on the Internet at http://docs.python.org/3.6/tutorial/.&#39;, &#39;&#39;, &#39;Enter the name of any module, keyword, or topic to get help on writing&#39;, &#39;Python programs and using Python modules. &nbsp;To quit this help utility and&#39;, &#39;return to the interpreter, just type &quot;quit&quot;.&#39;, &#39;&#39;, &#39;To get a list of available modules, keywords, symbols, or topics, type&#39;, &#39;&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;. &nbsp;Each module also comes&#39;, &#39;with a one-line summary of what it does; to list the modules whose name&#39;, &#39;or summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;. &#39;]</p>\r\n\r\n<p><span style="color:#e67e22">&gt;&gt;&gt;</span> string.splitlines(True)</p>\r\n\r\n<p><br />\r\n[&quot; Welcome to Python 3.6&#39;s help utility!\\n&quot;, &#39;\\n&#39;, &#39;If this is your first time using Python, you should definitely check out\\n&#39;, &#39;the tutorial on the Internet at http://docs.python.org/3.6/tutorial/.\\n&#39;, &#39;\\n&#39;, &#39;Enter the name of any module, keyword, or topic to get help on writing\\n&#39;, &#39;Python programs and using Python modules. &nbsp;To quit this help utility and\\n&#39;, &#39;return to the interpreter, just type &quot;quit&quot;.\\n&#39;, &#39;\\n&#39;, &#39;To get a list of available modules, keywords, symbols, or topics, type\\n&#39;, &#39;&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;. &nbsp;Each module also comes\\n&#39;, &#39;with a one-line summary of what it does; to list the modules whose name\\n&#39;, &#39;or summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;. &#39;]</p>', '<p>Return a copy of the string S converted to lowercase.</p>\r\n\r\n<p>string.lower() -&gt; str</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; string =&quot;ABCDEFgHIjkl&quot;<br />\r\n&gt;&gt;&gt; string.lower()<br />\r\n&#39;abcdefghijkl&#39;</p>', '<p>Return a copy of S converted to uppercase.</p>\r\n\r\n<p>str.upper() -&gt; str</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;abcdefghijklmn&quot;<br />\r\n&gt;&gt;&gt; string.upper()<br />\r\n&#39;ABCDEFGHIJKLMN&#39;</p>', '<p>Return True if all cased characters in a string&nbsp;are lowercase.&nbsp;otherwise,&nbsp;False</p>\r\n\r\n<p>str.islower() -&gt; bool -&gt; True or False</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;London&quot;<br />\r\n&gt;&gt;&gt; string.islower()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; string = &quot;london&quot;<br />\r\n&gt;&gt;&gt; string.islower<br />\r\n&lt;built-in method islower of str object at 0x024AC6A0&gt;<br />\r\n&gt;&gt;&gt; string.islower()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;abcdefgh&quot;.islower()<br />\r\nTrue</p>', '<p>Return True if all cased characters in S are uppercase,&nbsp;otherwise False.</p>\r\n\r\n<p>S.isupper() -&gt; bool&nbsp;-&gt; True or False</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; string = &quot;ABCDEFGH&quot;<br />\r\n&gt;&gt;&gt; string.isupper()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; string = &quot;aBCDEFGH&quot;<br />\r\n&gt;&gt;&gt; string.isupper()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;USA&quot;.isupper()<br />\r\nTrue</p>', '<p><strong>endswith</strong></p>\r\n\r\n<p>Return True if a string&nbsp;ends with the specified suffix, False otherwise.</p>\r\n\r\n<p>str.endswith(suffix, startpoint, endpoint) -&gt; bool</p>\r\n\r\n<p><strong>suffix :</strong>&nbsp;string like &quot;a&quot;, &quot;banana&quot;, &quot;na&quot;.&nbsp;suffix can also be a tuple of strings to try. such as :&nbsp; a = (&quot;banana&quot;)<br />\r\n<strong>startpoint :</strong> optional start, test string&nbsp;beginning at that position.<br />\r\n<strong>endpoint :</strong>&nbsp; optional end, stop comparing string&nbsp;at that position.<br />\r\n&nbsp; &nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt;string = &quot;banana&quot;<br />\r\n&gt;&gt;&gt; string.endswith(&quot;a&quot;)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; string.endswith(&quot;b&quot;)<br />\r\nFalse</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.endswith(&quot;na&quot;, 5)<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.endswith(&quot;na&quot;, 4)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.endswith(&quot;an&quot;, 0, 3)<br />\r\nTrue</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3: a tuple example</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = (&quot;asdf&quot;)<br />\r\n&gt;&gt;&gt; a.endswith(&quot;f&quot;)<br />\r\nTrue</p>\r\n\r\n<p><strong>startswith</strong></p>\r\n\r\n<p>Return True if a string&nbsp;starts with the specified prefix, False otherwise.</p>\r\n\r\n<p>str.endswith(prefix, startpoint, endpoint) -&gt; bool</p>\r\n\r\n<p><strong>prefix :</strong>&nbsp;string like &quot;a&quot;, &quot;banana&quot;, &quot;na&quot;.&nbsp;suffix can also be a tuple of strings to try. such as :&nbsp; a = (&quot;banana&quot;)<br />\r\n<strong>startpoint :</strong> optional start, test string&nbsp;beginning at that position.<br />\r\n<strong>endpoint :</strong>&nbsp; optional end, stop comparing string&nbsp;at that position.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.startswith(&quot;p&quot;)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;python&quot;.startswith(&quot;y&quot;)<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;python&quot;.startswith(&quot;y&quot;, 1)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;python&quot;.startswith(&quot;tho&quot;, 2, 6)<br />\r\nTrue</p>', '<p>Return a capitalized version of a string, i.e. make the first character have upper case and the rest lower case.</p>\r\n\r\n<p>str.capitalize() -&gt; str</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.capitalize()<br />\r\n&#39;Python&#39;<br />\r\n&gt;&gt;&gt; &quot;the python lesson&quot;.capitalize()<br />\r\n&#39;The python lesson&#39;</p>', '<p>Return a titlecased version of S, i.e. words start with title case characters, all remaining cased characters have lower case.</p>\r\n\r\n<p>str.title() -&gt; str</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;the python lessons&quot;.title()<br />\r\n&#39;The Python Lessons&#39;</p>', '<p>Return a copy of S with uppercase characters converted to lowercase and vice versa.</p>\r\n\r\n<p>str.swapcase() -&gt; str</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; string = &quot;Python&quot;<br />\r\n&gt;&gt;&gt; string.swapcase()<br />\r\n&#39;pYTHON&#39;</span></p>', '<p>Return a version of S suitable for caseless comparisons. It is similar to lower() method.</p>\r\n\r\n<p>str.casefold() -&gt; str</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;Python&quot;.casefold()<br />\r\n&#39;python&#39;<br />\r\n&gt;&gt;&gt; &quot;ABCDEFG&quot;.casefold()<br />\r\n&#39;abcdefg&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;&szlig;&quot;.casefold()<br />\r\n&#39;ss&#39;<br />\r\n&gt;&gt;&gt; &quot;&szlig;&quot;.lower()<br />\r\n&#39;&szlig;&#39;</p>', '<p><strong>strip</strong></p>\r\n\r\n<p>Return a copy of the string S with leading and trailing whitespace removed. If chars is given and not None, remove characters in chars instead.</p>\r\n\r\n<p>str.strip(chars) -&gt; str</p>\r\n\r\n<p>&lsquo; &lsquo;&nbsp; and \\t , \\n , \\r , \\v , \\f escape sequence are removed.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span><br />\r\n&gt;&gt;&gt; &quot;window&quot;.strip(&quot;w&quot;)<br />\r\n&#39;indo&#39;<br />\r\n&gt;&gt;&gt; &quot; window &quot;.strip()<br />\r\n&#39;window&#39;<br />\r\n&gt;&gt;&gt; &quot;\\nwindow\\r&quot;.strip()<br />\r\n&#39;window&#39;</p>\r\n\r\n<p><strong>rstrip&nbsp;</strong></p>\r\n\r\n<p>Return a copy of the string S with trailing(right) whitespace removed.</p>\r\n\r\n<p>str.rstrip(chars) -&gt; str</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;window&quot;.rstrip(&quot;w&quot;)<br />\r\n&#39;windo&#39;<br />\r\n&gt;&gt;&gt; &quot; window &quot;.rstrip()<br />\r\n&#39; window&#39;</p>\r\n\r\n<p><strong>lstrip</strong></p>\r\n\r\n<p>Return a copy of the string S with leading whitespace removed.</p>\r\n\r\n<p>str.lstrip(chars) -&gt; str</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;window&quot;.lstrip(&quot;w&quot;)<br />\r\n&#39;indow&#39;<br />\r\n&gt;&gt;&gt; &quot; window &quot;.lstrip()<br />\r\n&#39;window &#39;</p>', '<p>Return a string which is the concatenation of the strings in the iterable. &nbsp;The separator between elements is string.</p>\r\n\r\n<p>str.join(iterable) -&gt; str</p>\r\n\r\n<p><strong>iterable :</strong> it can be list, tuple</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;.&quot;.join([&quot;www&quot;, &quot;google&quot;, &quot;com&quot;])<br />\r\n&#39;www.google.com&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot;.&quot;.join((&quot;www&quot;, &quot;google&quot;, &quot;com&quot;))<br />\r\n&#39;www.google.com&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot;-&quot;.join(&quot;abcdefgh&quot;)<br />\r\n&#39;a-b-c-d-e-f-g-h&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot; &quot;.join([&quot;Life&quot;, &quot;is&quot;, &quot;beautiful&quot;])<br />\r\n&#39;Life is beautiful&#39;</p>', '<p>Return the number of non-overlapping occurrences of character(s)&nbsp;in string.</p>\r\n\r\n<p>str.count(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong> optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.count(&quot;a&quot;)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.count(&quot;a&quot;,2)<br />\r\n2<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.count(&quot;a&quot;, 2, 4)<br />\r\n1<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.count(&quot;ba&quot;)<br />\r\n1<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.count(&quot;ba&quot;, 3)<br />\r\n0</p>', '<p><strong>index</strong></p>\r\n\r\n<p>show number of the first index for substring.&nbsp;Like S.find() but raise ValueError when the substring is not found.</p>\r\n\r\n<p>str.index(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong> optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:&nbsp;</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.index(&quot;a&quot;)<br />\r\n1<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.index(&quot;b&quot;)<br />\r\n0<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.index(&quot;a&quot;,2)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.index(&quot;a&quot;, 4, 6)<br />\r\n5<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.index(&quot;w&quot;)<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#47&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; &quot;banana&quot;.index(&quot;w&quot;)<br />\r\nValueError: substring not found</span></p>\r\n\r\n<p><span style="color:null"><strong>rindex</strong></span></p>\r\n\r\n<p>show number of the first index for substring reference to the end of a string.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.rindex(&quot;b&quot;)<br />\r\n0<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rindex(&quot;a&quot;)<br />\r\n5<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rindex(&quot;n&quot;)<br />\r\n4<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rindex(&quot;ba&quot;)<br />\r\n0<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rindex(&quot;na&quot;)<br />\r\n4</p>', '<p>Return the lowest index in a string where substring sub is found.</p>\r\n\r\n<p>Return -1 on failure.(not founded situation)</p>\r\n\r\n<p>str.rfind(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong> optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.find(&quot;a&quot;)<br />\r\n1<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.find(&quot;ban&quot;)<br />\r\n0<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.find(&quot;a&quot;, 2)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.find(&quot;a&quot;, 3, 6)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.find(&quot;a&quot;, 4, 6)<br />\r\n5<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.find(&quot;T&quot;)<br />\r\n-1</p>\r\n\r\n<p><strong>rfind</strong></p>\r\n\r\n<p>Return the lowest index in a string where substring sub is found from the ending of string.&nbsp;&nbsp;</p>\r\n\r\n<p>Return -1 on failure.(not founded situation)</p>\r\n\r\n<p>str.find(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong> optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.rfind(&quot;a&quot;)<br />\r\n5<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rfind(&quot;an&quot;)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rfind(&quot;a&quot;,2)<br />\r\n5<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rfind(&quot;a&quot;, 2, 4)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rfind(&quot;t&quot;)<br />\r\n-1</p>', '<p>Return string which is&nbsp;&nbsp;centered in a string of length width. Padding is done using the specified fill character (default is a space)</p>\r\n\r\n<p>str.center(width,&nbsp;fillchar) -&gt; str</p>\r\n\r\n<p><strong>width :</strong> length like 5 , 6, ...<br />\r\n<strong>fillchar :</strong> optional argument to padding whose default is space</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.center(6)<br />\r\n&#39;python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.center(11)<br />\r\n&#39; &nbsp; python &nbsp;&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.center(21, &quot;*&quot;)<br />\r\n&#39;********python*******&#39;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong> If you want see any change with center method, your length argument should be bigger than your length of a string. So&nbsp;&quot;python&quot;.center(6) command show any change.</p>', '<p>Return string&nbsp;right-justified in a string of length width. Padding is done using the specified fill character (default is a space).</p>\r\n\r\n<p>str.rjust(width,&nbsp;fillchar) -&gt; str</p>\r\n\r\n<p><strong>width :</strong>&nbsp;length like 5 , 6, ...<br />\r\n<strong>fillchar :</strong>&nbsp;optional argument to padding its&nbsp;default is space</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.rjust(6)<br />\r\n&#39;python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.rjust(7)<br />\r\n&#39; python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.rjust(8)<br />\r\n&#39; &nbsp;python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.rjust(11, &quot;-&quot;)<br />\r\n&#39;-----python</p>\r\n\r\n<p><strong>ljust</strong></p>\r\n\r\n<p>Return S left-justified in a string of length width. Padding is done using the specified fill character (default is a space).</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.ljust(6)<br />\r\n&#39;python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.ljust(10)<br />\r\n&#39;python &nbsp; &nbsp;&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.ljust(15, &quot;?&quot;)<br />\r\n&#39;python?????????&#39;</p>\r\n\r\n<p><strong>Note:</strong> If you want see any change with rjust and ljust&nbsp;method, your the length argument should be bigger than the length of a string. So&nbsp;&quot;python&quot;.rjust6) command show any change.</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.rjust(6)<br />\r\n&#39;python&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.ljust(6)<br />\r\n&#39;python&#39;</p>', '<p>Pad a numeric string&nbsp;with zeros on the left, to fill a field of the specified width. The string is never truncated.</p>\r\n\r\n<p>string.zfill(width) -&gt; str</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.zfill(7)<br />\r\n&#39;0python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.zfill(11)<br />\r\n&#39;00000python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.zfill(5)<br />\r\n&#39;python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.zfill(6)<br />\r\n&#39;python&#39;</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;If you want see any change with zfill&nbsp;method, your the length argument should be bigger than the length of a string.</p>', '<p>Search for the separator sep in a string, and return the part before it, the separator itself, and the part after it. &nbsp;If the separator is not found, return a string&nbsp;and two empty strings.</p>\r\n\r\n<p>str.partition(sep) -&gt; (head, sep, tail)&nbsp;-&gt; tuple</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;computer&quot;.partition(&quot;pu&quot;)<br />\r\n(&#39;com&#39;, &#39;pu&#39;, &#39;ter&#39;)<br />\r\n&gt;&gt;&gt; &quot;computer&quot;.partition(&quot;c&quot;)<br />\r\n(&#39;&#39;, &#39;c&#39;, &#39;omputer&#39;)<br />\r\n&gt;&gt;&gt; &quot;computer&quot;.partition(&quot;r&quot;)<br />\r\n(&#39;compute&#39;, &#39;r&#39;, &#39;&#39;)<br />\r\n&gt;&gt;&gt; &quot;computer&quot;.partition(&quot;a&quot;)<br />\r\n(&#39;computer&#39;, &#39;&#39;, &#39;&#39;)</p>\r\n\r\n<p><strong>rpartition</strong></p>\r\n\r\n<p>Search for the separator sep in a string, starting at the end of string, and return the part before it, the separator itself, and the part after it. &nbsp;If the separator is not found, return two empty strings.</p>\r\n\r\n<p>str.rpartition(sep) -&gt; (head, sep, tail)&nbsp;-&gt; tuple</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;computer&quot;.rpartition(&quot;com&quot;)<br />\r\n(&#39;&#39;, &#39;com&#39;, &#39;puter&#39;)<br />\r\n&gt;&gt;&gt; &quot;computer&quot;.rpartition(&quot;ter&quot;)<br />\r\n(&#39;compu&#39;, &#39;ter&#39;, &#39;&#39;)</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.rpartition(&quot;na&quot;)<br />\r\n(&#39;bana&#39;, &#39;na&#39;, &#39;&#39;)<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.partition(&quot;na&quot;)<br />\r\n(&#39;ba&#39;, &#39;na&#39;, &#39;na&#39;)</p>', '<p>Encode string&nbsp;using the codec registered for encoding. Default encoding is &#39;utf-8&#39;. errors may be given to set a different error handling scheme. Default is &#39;strict&#39; meaning that encoding errors raise a UnicodeEncodeError. Other possible values are &#39;ignore&#39;, &#39;replace&#39; and &#39;xmlcharrefreplace&#39; as well as any other name registered with codecs.register_error that can handle UnicodeEncodeErrors.</p>\r\n\r\n<p>string.encode(encoding=&#39;utf-8&#39;, errors=&#39;strict&#39;) -&gt; bytes</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.encode(&quot;ascii&quot;)<br />\r\nb&#39;banana&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;&ccedil;ilek&quot;.encode(&quot;cp1254&quot;)<br />\r\nb&#39;\\xe7ilek&#39;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2: Not to have an error, you should the error parameters(&quot;replac&quot;e , &quot;ignore&quot;, &quot;xmlcharrefreplace&quot;)</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;&ccedil;ilek&quot;.encode(&quot;ascii&quot;)<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#32&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; &quot;&ccedil;ilek&quot;.encode(&quot;ascii&quot;)<br />\r\nUnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character &#39;\\xe7&#39; in position 0: ordinal not in range(128)</span><br />\r\n&gt;&gt;&gt; &quot;&ccedil;ilek&quot;.encode(&quot;ascii&quot;, &quot;replace&quot;)<br />\r\nb&#39;?ilek&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;&ccedil;ilek&quot;.encode(&quot;ascii&quot;, &quot;ignore&quot;)<br />\r\nb&#39;ilek&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;&ccedil;ilek&quot;.encode(&quot;ascii&quot;, &quot;xmlcharrefreplace&quot;)<br />\r\nb&#39;&amp;#231;ilek&#39;</p>', '<p>Return a copy of S where all tab characters are expanded using spaces. If tabsize is not given, a tab size of 8 characters is assumed.</p>\r\n\r\n<p>str.expandtabs(tabsize=8) -&gt; str</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;a\\tb\\t&quot;.expandtabs()<br />\r\n&#39;a &nbsp; &nbsp; &nbsp; b &nbsp; &nbsp; &nbsp; &#39;<br />\r\n&gt;&gt;&gt; &quot;a\\tb\\t&quot;.expandtabs(4)<br />\r\n&#39;a &nbsp; b &nbsp; &#39;</p>', '<p><strong>str.maketrans</strong></p>\r\n\r\n<p>Return a translation table usable for str.translate().</p>\r\n\r\n<p>str.maketrans(x, y=None, z=None)&nbsp;&rArr; dict</p>\r\n\r\n<p>If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters to Unicode ordinals, strings or None. Character keys will be then converted to ordinals.</p>\r\n\r\n<ul>\r\n\t<li>str.maketrans({&quot;a&quot;:&#39;A&#39;, &#39;b&#39; :&#39;B&#39;, &#39;c&#39;:&#39;C&#39;})&nbsp;</li>\r\n\t<li>str.maketrans({97: 65, 98: 66, 99: 67})<br />\r\n\tboth of above commands make the same thing.<br />\r\n\tHere Unicode value&nbsp;of &quot;a&quot; is 97, &quot;b is 98&quot;, &quot;c&quot; is 99, &#39;A&#39; is 65, &#39;B&#39; is 66, &#39;C&#39; is 67<br />\r\n\tAs a result of we have dictionary argument for x parameter. If you want to trasnlate this &quot;letter&quot;, you should translate method.&nbsp;&nbsp;&nbsp;</li>\r\n</ul>\r\n\r\n<p>If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y.</p>\r\n\r\n<ul>\r\n\t<li>str.maketrans(&quot;abc&quot;, &quot;ABC&quot;)<br />\r\n\tx = &quot;abc&quot;<br />\r\n\ty = &quot;ABC&quot;</li>\r\n</ul>\r\n\r\n<p>If there is a third argument, it must be a string, whose characters will be mapped to None in the result.</p>\r\n\r\n<ul>\r\n\t<li>str.maketrans(&quot;abc&quot;, &quot;ABC&quot;, &quot;def&quot;)<br />\r\n\tx = &quot;abc&quot;<br />\r\n\ty = &quot;ABC&quot;<br />\r\n\tz = &quot;def&quot;</li>\r\n</ul>\r\n\r\n<p>Finally after this three condition, we have a dict like this :&nbsp;{97: 65, 98: 66, 99: 67} Every&nbsp;number has a&nbsp;chracater like &quot;a&quot;, &quot;A&quot; ...</p>\r\n\r\n<p><strong>Note:</strong> So In order to translate as regard as the dictionary, we need translate() method.&nbsp;</p>\r\n\r\n<p><strong>translate</strong></p>\r\n\r\n<p>Return a copy of the string S in which each character has been mapped through the given translation table. The table must implement lookup/indexing&nbsp;for instance&nbsp;a dictionary or list, mapping Unicode ordinals to Unicode ordinals, strings, or None.</p>\r\n\r\n<p>str.translate(table) -&gt; str</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:&nbsp;To convert from &quot;a&quot; to &quot;A&quot;, from &quot;b&quot; to &quot;B&quot;, from &quot;c&quot; to &quot;C&quot;</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; our_dictionary = str.maketrans({&quot;a&quot;:&#39;A&#39;, &#39;b&#39; :&#39;B&#39;, &#39;c&#39;:&#39;C&#39;})<br />\r\n&gt;&gt;&gt; our_dictionary<br />\r\n{97: &#39;A&#39;, 98: &#39;B&#39;, 99: &#39;C&#39;}<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.translate(our_dictionary)<br />\r\n&#39;BAnAnA&#39;<br />\r\n&gt;&gt;&gt; &quot;abcABC&quot;.translate(our_dictionary)<br />\r\n&#39;ABCABC&#39;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2: Second way to&nbsp;convert from &quot;a&quot; to &quot;A&quot;, from &quot;b&quot; to &quot;B&quot;, from &quot;c&quot; to &quot;C&quot;</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; our_dict = str.maketrans(&quot;abc&quot;, &quot;ABC&quot;)<br />\r\n&gt;&gt;&gt; our_dict<br />\r\n{97: 65, 98: 66, 99: 67}<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.translate(our_dict)<br />\r\n&#39;BAnAnA&#39;<br />\r\n&gt;&gt;&gt; &quot;abcabccccaaa&quot;.translate(our_dict)<br />\r\n&#39;ABCABCCCCAAA&#39;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3: to remove &quot;d&quot;, &quot;e&quot;, and &quot;f&quot;</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; our_dict = str.maketrans(&quot;abc&quot;, &quot;ABC&quot;,&quot;def&quot;)<br />\r\n&gt;&gt;&gt; &quot;abcdefghabcdefgdd&quot;.translate(our_dict)<br />\r\n&#39;ABCghABCg&#39;<br />\r\n&gt;&gt;&gt; &quot;fedfeddef&quot;.translate(our_dict)<br />\r\n&#39;&#39;</p>', '<p>Return True if all characters in S are alphabetic,&nbsp;False otherwise.</p>\r\n\r\n<p>str.isalpha() -&gt; bool&nbsp;-&gt; True or False</p>\r\n\r\n<p>Examples:</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;abcdefgh&quot;.isalpha()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;abc1&quot;.isalpha()<br />\r\nFalse</p>', '<p>Return True if all characters in S are digits, otherwise False.</p>\r\n\r\n<p>str.isdigit() -&gt; bool</p>\r\n\r\n<p><span style="color:#e74c3c">Examples:</span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;123456789&quot;.isdigit()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;123a&quot;.isdigit()<br />\r\nFalse</p>', '<p>Return True if all characters in a string&nbsp;are alphanumeric, otherwise False.</p>\r\n\r\n<p>str.isalnum() -&gt; bool</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;121abc&quot;.isalnum()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;121&quot;.isalnum()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;abc&quot;.isalnum()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;123ab-+&quot;.isalnum()<br />\r\nFalse</p>', '<p>Return True if there are only decimal characters in a string, False otherwise.</p>\r\n\r\n<p>str.isdecimal() -&gt; bool</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;1234&quot;.isdecimal()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;1234.4&quot;.isdecimal()<br />\r\nFalse</p>', '<p>Return True if S is a valid identifier according to the language definition.</p>\r\n\r\n<p>Remember variables rules, too.</p>\r\n\r\n<p>str.isidentifier() -&gt; bool</p>\r\n\r\n<p>Examples:</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;1aa&quot;.isidentifier()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;-ab&quot;.isidentifier()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;string&quot;.isidentifier()<br />\r\nTrue</p>\r\n\r\n<p><strong>Note:</strong> Use keyword.iskeyword() to test for reserved identifiers such as &quot;def&quot; and &quot;class&quot;.</p>', '<p>Return True if there are only numeric characters in a string, False otherwise.</p>\r\n\r\n<p>str.isnumeric() -&gt; bool</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;123e&quot;.isnumeric()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;1234.6&quot;.isnumeric()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;12345&quot;.isnumeric()<br />\r\nTrue</p>', '<p>Return True if all characters in a string&nbsp;are whitespace and there is at least one character in a string, False otherwise.</p>\r\n\r\n<p>str.isspace() -&gt; bool</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot; &nbsp; &nbsp; &nbsp;&quot;.isspace()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot; &quot;.isspace()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot; asd &nbsp; &quot;.isspace()<br />\r\nFalse</p>', '<p>Return True if all characters in a string are considered printable in repr() or a string&nbsp;is empty, False otherwise.</p>\r\n\r\n<p>non-printing characters are \\n, \\t, ...</p>\r\n\r\n<p>printing-characters are a, b, c, ...</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;abcdef&quot;.isprintable()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;abc*n&quot;.isprintable()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;abc\\n&quot;.isprintable()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;&quot;.isprintable()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot; &quot;.isprintable()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;\\r&quot;.isprintable()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;\\t&quot;.isprintable()<br />\r\nFalse</p>', '<p>Return a formatted version of a string, using substitutions from args and kwargs. The substitutions are identified by braces (&#39;{&#39; and &#39;}&#39;).</p>\r\n\r\n<p>str.format(*args, **kwargs) -&gt; str</p>\r\n\r\n<p><strong>args : &quot;</strong>{} and {}&quot;.format(&quot;Tom&quot;, &quot;Jerry&quot;)<br />\r\n<strong>kwargs :&nbsp; </strong>&quot;{} and {}&quot;.format(a = &quot;Tom&quot;, b = &quot;Jerry&quot;)</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{} and {}&quot;.format(&quot;Tom&quot;, &quot;Jerry&quot;)<br />\r\n&#39;Tom and Jerry&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot;{a} and {b}&quot;.format(a = &quot;Tom&quot;, b= &quot;Jerry&quot;)<br />\r\n&#39;Tom and Jerry&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot;{} and {a}&quot;.format(&quot;Tom&quot;, a = &quot;Jerry&quot;)<br />\r\n&#39;Tom and Jerry&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot;{a} and {}&quot;.format(&quot;Tom&quot;, a = &quot;Jerry&quot;)<br />\r\n&#39;Jerry and Tom&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot;{} and {}&quot;.format(*&quot;ab&quot;)<br />\r\n&#39;a and b&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; array = (&quot;Tom&quot;, &quot;Jerry&quot;)<br />\r\n&gt;&gt;&gt; &quot;{} and {}&quot;.format(*array)<br />\r\n&#39;Tom and Jerry&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; dictionary = {&quot;a&quot;:&quot;Tom&quot;, &quot;b&quot;:&quot;Jerry&quot;}<br />\r\n&gt;&gt;&gt; &quot;{a} and {b}&quot;.format(**dictionary)<br />\r\n&#39;Tom and Jerry&#39;</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;You can order args using integer numbers</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{0} and {1}&quot;.format(&quot;Tom&quot;, &quot;Jerry&quot;)<br />\r\n&#39;Tom and Jerry&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot;{1} and {0}&quot;.format(&quot;Tom&quot;, &quot;Jerry&quot;)<br />\r\n&#39;Jerry and Tom&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; array = (&quot;Tom&quot;, &quot;Jerry&quot;)<br />\r\n&gt;&gt;&gt; &quot;{0[1]} and {0[0]}&quot;.format(array)<br />\r\n&#39;Jerry and Tom&#39;</p>\r\n\r\n<p><strong>characters of the format method</strong></p>\r\n\r\n<p>You can use some useful character(s) in {} after (:) character. Now let&#39;s us examine these.&nbsp;</p>\r\n\r\n<p><strong>&gt;</strong> right-justified</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:&gt;15}&quot;.format(&quot;python&quot;)<br />\r\n&#39; &nbsp; &nbsp; &nbsp; &nbsp; python&#39;</p>\r\n\r\n<p><strong>&lt;</strong> left-justified</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:&lt;15}&quot;.format(&quot;python&quot;)<br />\r\n&#39;python &nbsp; &nbsp; &nbsp; &nbsp; &#39;</p>\r\n\r\n<p><strong>^</strong> center-justified</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example5:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:^15}&quot;.format(&quot;python&quot;)<br />\r\n&#39; &nbsp; &nbsp;python &nbsp; &nbsp; &#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:*^15}&quot;.format(&quot;python&quot;)<br />\r\n&#39;****python*****&#39;<br />\r\n&gt;&gt;&gt; &quot;{:-^15}&quot;.format(&quot;python&quot;)<br />\r\n&#39;----python-----&#39;</p>\r\n\r\n<p><strong>s&nbsp;</strong> &nbsp;</p>\r\n\r\n<p>String format. This is the default type for strings and may be omitted. <u>It is not useful!</u></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example6:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:s}&quot;.format(&quot;python&quot;)<br />\r\n&#39;python&#39;<br />\r\n&gt;&gt;&gt; &quot;{:s}&quot;.format(5)<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#177&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; &quot;{:s}&quot;.format(5)<br />\r\nValueError: Unknown format code &#39;s&#39; for object of type &#39;int&#39;</span></p>\r\n\r\n<p><strong>b</strong></p>\r\n\r\n<p>Binary format. Outputs the number in base 2.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example7:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:b}&quot;.format(65)<br />\r\n&#39;1000001&#39;</p>\r\n\r\n<p><strong>c</strong></p>\r\n\r\n<p>Character. Converts the integer to the corresponding&nbsp;unicode character before printing.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example8:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:c}&quot;.format(65)<br />\r\n&#39;A&#39;</p>\r\n\r\n<p><strong>d</strong></p>\r\n\r\n<p>Decimal Integer. Outputs the number in base 10.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example9:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:d}&quot;.format(15)<br />\r\n&#39;15&#39;</p>\r\n\r\n<p><strong>o</strong></p>\r\n\r\n<p>Octal format. Outputs the number in base 8.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example10:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:o}&quot;.format(65)<br />\r\n&#39;101&#39;</p>\r\n\r\n<p><strong>x</strong></p>\r\n\r\n<p>Hex format. Outputs the number in base 16, using lower- case letters for the digits above 9.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example11:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:x}&quot;.format(1205)<br />\r\n&#39;4b5&#39;</p>\r\n\r\n<p><strong>X</strong></p>\r\n\r\n<p>Hex format. Outputs the number in base 16, using upper-case letters for the digits above 9.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example12:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:X}&quot;.format(1205)<br />\r\n&#39;4B5&#39;</p>\r\n\r\n<p><strong>n</strong></p>\r\n\r\n<p>Number. This is the same as &quot;&#39;d&#39;&quot;, except that it uses the&nbsp;current locale setting to insert the appropriate number separator characters.&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example13:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;{:n}&quot;.format(1205)<br />\r\n&#39;1205&#39;</p>\r\n\r\n<p><strong>, comma</strong></p>\r\n\r\n<p>a thousands separator</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example14:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &#39;{:,}&#39;.format(1234567890)<br />\r\n&#39;1,234,567,890&#39;</p>\r\n\r\n<p><strong>% percentage</strong></p>\r\n\r\n<p>Multiplies the number by 100 and displays in&nbsp;fixed (&quot;&#39;f&#39;&quot;) format, followed by a percent sign.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example15:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &#39;{:.2%}&#39;.format(1/3)<br />\r\n&#39;33.33%&#39;<br />\r\n&gt;&gt;&gt; &#39;{:.5%}&#39;.format(1/3)<br />\r\n&#39;33.33333%&#39;</p>\r\n\r\n<p><strong>Using type-specific formatting:</strong></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example16:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; import datetime<br />\r\n&gt;&gt;&gt; d = datetime.datetime(2012, 8, 3, 11, 14, 45)<br />\r\n&gt;&gt;&gt; &#39;{:%Y-%m-%d %H:%M:%S}&#39;.format(d)<br />\r\n&#39;2012-08-03&nbsp;11:14:45&#39;</p>', '<p>The Lists are a datatype and They&nbsp;have a&nbsp;sequence of values&nbsp;like a string.&nbsp;The values of a string&nbsp;are characters; in a list, they can be any type. The values in list are called elements or sometimes items.</p>\r\n\r\n<p><strong>To define a list</strong></p>\r\n\r\n<p>You can use&nbsp;empty brackets, [] to construct a list or list() function.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; [&quot;a&quot;, &quot;b&quot;, &quot;v&quot;, &quot;apple&quot;, 25, 38, &quot;orange&quot;]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;v&#39;, &#39;apple&#39;, 25, 38, &#39;orange&#39;]</p>\r\n\r\n<p>&gt;&gt;&gt; [&quot;John&quot;, 23, &quot;banana&quot;, &quot;python&quot;, [1, 2, 3], (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)]<br />\r\n[&#39;John&#39;, 23, &#39;banana&#39;, &#39;python&#39;, [1, 2, 3], (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)]</p>\r\n\r\n<p>&gt;&gt;&gt; list(&quot;banana&quot;)<br />\r\n[&#39;b&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;]</p>\r\n\r\n<p><strong>To access the elements or items</strong></p>\r\n\r\n<p>You can use bracket [] and index number together. Such as first item is called [0], second one [1] so on...</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [12, 25, 45]<br />\r\n&gt;&gt;&gt; a[0]<br />\r\n12<br />\r\n&gt;&gt;&gt; a[1]<br />\r\n25<br />\r\n&gt;&gt;&gt; a[2]<br />\r\n45<br />\r\n&gt;&gt;&gt; a[-1]<br />\r\n45<br />\r\n&gt;&gt;&gt; a[-2]<br />\r\n25</p>\r\n\r\n<p><strong>Nested lists</strong></p>\r\n\r\n<p>In order to access elements of a nested list, you can use one more bracket&nbsp; [].</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; nested_list[2]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]<br />\r\n&gt;&gt;&gt; nested_list[2][0]<br />\r\n&#39;a&#39;<br />\r\n&gt;&gt;&gt; nested_list[2][1]<br />\r\n&#39;b&#39;<br />\r\n&gt;&gt;&gt; nested_list[2][2]<br />\r\n&#39;c&#39;&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4: </strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = [[1, 2, 3, [23, 45, 45, [&quot;target&quot;]]]]<br />\r\n&gt;&gt;&gt; a[0][3][3][0]<br />\r\n&#39;target&#39;</p>\r\n\r\n<p><strong>Lists are mutable</strong></p>\r\n\r\n<p>you can change the lists using some methods or expressions. Please, don&#39;t forget the string are immutable.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example5:&nbsp;item 1&nbsp;of list a&nbsp;is replaced by &quot;one&quot;</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = [1, 2, 3]<br />\r\n&gt;&gt;&gt; a[0] = &quot;one&quot;<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;one&#39;, 2, 3]</p>\r\n\r\n<p><strong>List slices</strong></p>\r\n\r\n<p>To access slice of a list&nbsp;from *i* to *j*, You can use this expression:&nbsp;[ i : j ]</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example6:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = [1, 2, 3, 4, 5]<br />\r\n&gt;&gt;&gt; a[0:2]<br />\r\n[1, 2]<br />\r\n&gt;&gt;&gt; a[3:5]<br />\r\n[4, 5]<br />\r\n&gt;&gt;&gt; a[3:5] = (&quot;four&quot;, &quot;five&quot;)<br />\r\n&gt;&gt;&gt; a<br />\r\n[1, 2, 3, &#39;four&#39;, &#39;five&#39;]<br />\r\n&gt;&gt;&gt; a[0:2] = &quot;onetwo&quot;<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;o&#39;, &#39;n&#39;, &#39;e&#39;, &#39;t&#39;, &#39;w&#39;, &#39;o&#39;, 3, &#39;four&#39;, &#39;five&#39;]</p>\r\n\r\n<p><strong>List operations</strong></p>\r\n\r\n<p><strong>+ operator</strong></p>\r\n\r\n<p>The + operator concatenates lists:</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example7:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; [1,2,3] + [4,5,6,7]<br />\r\n[1, 2, 3, 4, 5, 6, 7]</p>\r\n\r\n<p>&gt;&gt;&gt; [1, 2, 3] + [&quot;four&quot;, &quot;five&quot;]<br />\r\n[1, 2, 3, &#39;four&#39;, &#39;five&#39;]</p>\r\n\r\n<p><strong>* operator</strong></p>\r\n\r\n<p>the operator repeats a list a given number of times</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example8:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; [1, 2, 3] * 3<br />\r\n[1, 2, 3, 1, 2, 3, 1, 2, 3]<br />\r\n&gt;&gt;&gt; [1, 2, 3] * 5<br />\r\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]</p>\r\n\r\n<p><strong>Usage of &quot;in&quot; statement with lists</strong></p>\r\n\r\n<p>Return True if there is,&nbsp;False otherwise</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example9</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; 1 in [1, 2, 3]<br />\r\nTrue<br />\r\n&gt;&gt;&gt; 5 in [1, 2, 3]<br />\r\nFalse</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example10:</strong></span></p>\r\n\r\n<p>my_list = [&quot;one&quot;, &quot;two&quot;, 3, 4, &quot;five&quot;]<br />\r\nfor item in my_list:<br />\r\n&nbsp; &nbsp; print(item)</p>\r\n\r\n<p>one<br />\r\ntwo<br />\r\n3<br />\r\n4<br />\r\nfive</p>\r\n\r\n<p><strong>Length of a list</strong></p>\r\n\r\n<p>You can use the len() function</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example11:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; my_list = [1, 2, 3, 4, 5]<br />\r\n&gt;&gt;&gt; len(my_list)<br />\r\n5</p>\r\n\r\n<p><strong>To remove the elements of an list</strong></p>\r\n\r\n<p>You can use &quot;del&quot; statement</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example12:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]<br />\r\n&gt;&gt;&gt; del a[0]<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;b&#39;, &#39;c&#39;, &#39;d&#39;]<br />\r\n&gt;&gt;&gt; del a[-2]<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;b&#39;, &#39;d&#39;]<br />\r\n&gt;&gt;&gt; del a[0:2]<br />\r\n&gt;&gt;&gt; a<br />\r\n[]</p>\r\n\r\n<p><strong>Note:</strong> You can completely delete a list</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example13:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; b = [1 , 2, 3]<br />\r\n&gt;&gt;&gt; del b<br />\r\n&gt;&gt;&gt; b<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#61&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; b<br />\r\nNameError: name &#39;b&#39; is not defined</span></p>\r\n\r\n<p><strong>Copy a list</strong></p>\r\n\r\n<p>There are 4&nbsp;options.</p>\r\n\r\n<p><strong>1. list2 = list2</strong></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example14:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; list1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]<br />\r\n&gt;&gt;&gt; list1 = list2<br />\r\n&gt;&gt;&gt; list2 = list1<br />\r\n&gt;&gt;&gt; list2<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</p>\r\n\r\n<p><strong>Note :</strong> If&nbsp;you change list1, you will see that you change list2, too and vice versa. If you don&#39;t want this, you should use other three&nbsp;options.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example15: continue of the Example14</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; list1[0] = 1<br />\r\n&gt;&gt;&gt; list1<br />\r\n[1, &#39;b&#39;, &#39;c&#39;]<br />\r\n&gt;&gt;&gt; list2<br />\r\n[1, &#39;b&#39;, &#39;c&#39;]</p>\r\n\r\n<p>&gt;&gt;&gt; list2[1] = 2<br />\r\n&gt;&gt;&gt; list2<br />\r\n[1, 2, &#39;c&#39;]<br />\r\n&gt;&gt;&gt; list1<br />\r\n[1, 2, &#39;c&#39;]</p>\r\n\r\n<p><strong>2. list2 = list1[:]</strong></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example16</strong></span>:</p>\r\n\r\n<p>&gt;&gt;&gt; a = [1, 2, 3]<br />\r\n&gt;&gt;&gt; b = a[:]<br />\r\n&gt;&gt;&gt; b<br />\r\n[1, 2, 3]<br />\r\n&gt;&gt;&gt; a[0] = &quot;one&quot;<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;one&#39;, 2, 3]<br />\r\n&gt;&gt;&gt; b<br />\r\n[1, 2, 3]</p>\r\n\r\n<p><strong>3. list() function: list2 = list(list1)</strong></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example17:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]<br />\r\n&gt;&gt;&gt; b = list(a)<br />\r\n&gt;&gt;&gt; b<br />\r\n[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]<br />\r\n&gt;&gt;&gt; a[0] = 1<br />\r\n&gt;&gt;&gt; a<br />\r\n[1, &#39;two&#39;, &#39;three&#39;]<br />\r\n&gt;&gt;&gt; b<br />\r\n[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]</p>\r\n\r\n<p><strong>4.&nbsp;liste2 = liste1.copy()</strong></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example18:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;banana&quot;, &quot;apple&quot;, &quot;nut&quot;, &quot;flower&quot;,&quot;banana&quot;, &quot;apple&quot;, &quot;apple&quot;]<br />\r\n&gt;&gt;&gt; b = a.copy()<br />\r\n&gt;&gt;&gt; b<br />\r\n[&#39;banana&#39;, &#39;apple&#39;, &#39;nut&#39;, &#39;flower&#39;, &#39;banana&#39;, &#39;apple&#39;, &#39;apple&#39;]</p>\r\n\r\n<p>range() function to create list</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples19:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; list(range(10))<br />\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</p>\r\n\r\n<p><strong>List Comprehensions</strong></p>\r\n\r\n<p>you can use&nbsp;&quot;for&quot; statement and range() function to obtain a list. This comprehension&nbsp;is very useful and short.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example20:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; my_list = [i for i in range(10)]<br />\r\n&gt;&gt;&gt; my_list<br />\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example21:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; my_list = [i for i in &quot;abcdefgh&quot;]<br />\r\n&gt;&gt;&gt; my_list<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;]</p>\r\n\r\n<p><strong>Note :</strong> Don&#39;t forget that you can use list(&quot;abcdefgh&quot;) but list comprhensions give you possibility to change item.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example22: odd numbers in 0-9</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; odd_numbers = [i for i in range(10) if i % 2 == 1]<br />\r\n&gt;&gt;&gt; odd_numbers<br />\r\n[1, 3, 5, 7, 9]</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example23: finding if &quot;cat&quot;, &quot;dog&quot; and &quot;fish&quot; words are in a string(&quot;the cats eat the smallfishes&quot;)</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; my_list = [i for i in (&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;) if i in &quot;the cats eat the smallfishes &quot;]<br />\r\n&gt;&gt;&gt; my_list<br />\r\n[&#39;cat&#39;, &#39;fish&#39;]</p>', '<p>To list&nbsp;methods, you can use dir function</p>\r\n\r\n<p>&gt;&gt;&gt; dir(list)<br />\r\n[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, <strong>&#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;</strong>]</p>\r\n\r\n<p>&#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;&nbsp;are the most important ones. We will see them next lessons.</p>', '<p>It appends element&nbsp;to the end of a&nbsp;list.</p>\r\n\r\n<p>list.append(object)-&gt; None</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [1, 2, 3]<br />\r\n&gt;&gt;&gt; a.append(4)<br />\r\n&gt;&gt;&gt; a<br />\r\n[1, 2, 3, 4]</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; a.append(&quot;apple&quot;)<br />\r\n&gt;&gt;&gt; a<br />\r\n[1, 2, 3, 4, &#39;apple&#39;]</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; a.append([&quot;a&quot;, &quot;b&quot;,&quot;c&quot;])<br />\r\n&gt;&gt;&gt; a<br />\r\n[1, 2, 3, 4, &#39;apple&#39;, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]</p>\r\n\r\n<p><strong>Note:</strong> Don&#39;t forget that append method takes only one argument.&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a.append(&quot;a&quot;, &quot;b&quot;, &quot;v&quot;)<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#119&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; a.append(&quot;a&quot;, &quot;b&quot;, &quot;v&quot;)<br />\r\nTypeError: append() takes exactly one argument (3 given)</span></p>', '<p>It extends list by appending elements from the iterable.</p>\r\n\r\n<p>list.extend(iterable) -&gt; None</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:&nbsp;extends a&nbsp;with the contents of b</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [1, 2, 3]<br />\r\n&gt;&gt;&gt; b = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]<br />\r\n&gt;&gt;&gt; a<br />\r\n[1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>a = [&quot;A&quot;]<br />\r\n&gt;&gt;&gt; a.extend(&quot;bcdefg&quot;)<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;A&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;]</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;Please, be careful about difference between append and extend.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [1, 2, 3]<br />\r\n&gt;&gt;&gt; b = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]<br />\r\n&gt;&gt;&gt; a.append(b)<br />\r\n&gt;&gt;&gt; a<br />\r\n[1, 2, 3, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]</p>', '<p>It inserts object before index.</p>\r\n\r\n<p>list.insert(index, object)</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;a&quot;, &quot;c&quot;, &quot;d&quot;]<br />\r\n&gt;&gt;&gt; a.insert(1, &quot;b&quot;)<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]<br />\r\n&gt;&gt;&gt; a.insert(2,[1, 2, 3])<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;a&#39;, &#39;b&#39;, [1, 2, 3], &#39;c&#39;, &#39;d&#39;]</p>', '<p>It removes first occurrence of value. Raises ValueError if the value is not present.</p>\r\n\r\n<p>list.remove(value) -&gt; None</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;a&quot;, &quot;b&quot;, 1, 2, 3]<br />\r\n&gt;&gt;&gt; a.remove(&quot;b&quot;)<br />\r\n&gt;&gt;&gt; a.remove(2)<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;a&#39;, 1, 3]</p>', '<p>It reverse in place.</p>\r\n\r\n<p>list.reverse()</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [1, 2, 3, 4, 5]<br />\r\n&gt;&gt;&gt; a.reverse()<br />\r\n&gt;&gt;&gt; a<br />\r\n[5, 4, 3, 2, 1]</p>\r\n\r\n<p><strong>Note:</strong> You can reverse using slice method or reversed() function, too.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = [1, 2, 3, 4, 5]<br />\r\n&gt;&gt;&gt; a[::-1]<br />\r\n[5, 4, 3, 2, 1]<br />\r\n&gt;&gt;&gt; a[::-2]<br />\r\n[5, 3, 1]<br />\r\n&gt;&gt;&gt; print(*reversed(a))<br />\r\n5 4 3 2 1</p>', '<p>remove and return item at index (default last). Raises IndexError if list is empty or index is out of range.</p>\r\n\r\n<p>list.pop(index) -&gt; item</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; my_list = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]<br />\r\n&gt;&gt;&gt; my_list.pop(1)<br />\r\n&#39;b&#39;<br />\r\n&gt;&gt;&gt; my_list<br />\r\n[&#39;a&#39;, &#39;c&#39;, &#39;d&#39;]</p>', '<p>stable sort in place.</p>\r\n\r\n<p>list.sort(key=None, reverse=False) -&gt; None</p>\r\n\r\n<p><strong>key :</strong> function to change order option<br />\r\n<strong>reverse:</strong> default False if it is changed, the order option is reversed.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1: alphabetical</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;John&quot;, &quot;Angelina&quot;, &quot;Jack&quot;, &quot;Marry&quot;,&quot;Alfred&quot;]<br />\r\n&gt;&gt;&gt; a.sort()<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;Alfred&#39;, &#39;Angelina&#39;, &#39;Jack&#39;, &#39;John&#39;, &#39;Marry&#39;]<br />\r\n&gt;&gt;&gt; a.sort(reverse = True)<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;Marry&#39;, &#39;John&#39;, &#39;Jack&#39;, &#39;Angelina&#39;, &#39;Alfred&#39;]</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2: numbers</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = [1, 100, 56, 324]<br />\r\n&gt;&gt;&gt; a.sort()<br />\r\n&gt;&gt;&gt; a<br />\r\n[1, 56, 100, 324]<br />\r\n&gt;&gt;&gt; a.sort(reverse = True)<br />\r\n&gt;&gt;&gt; a<br />\r\n[324, 100, 56, 1]</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;a&quot;, &quot;b&quot;, &quot;A&quot;, &quot;B&quot;]<br />\r\n&gt;&gt;&gt; a.sort()<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;A&#39;, &#39;B&#39;, &#39;a&#39;, &#39;b&#39;]<br />\r\n&gt;&gt;&gt; a.sort(key = str.lower)<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;A&#39;, &#39;a&#39;, &#39;B&#39;, &#39;b&#39;]</p>', '<p><strong>index()</strong></p>\r\n\r\n<p>return first index of value. Raises ValueError if the value is not present.</p>\r\n\r\n<p>list.index(value, start, stop) -&gt; integer, start and stop are optional</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]<br />\r\n&gt;&gt;&gt; a.index(&quot;b&quot;)<br />\r\n1<br />\r\n&gt;&gt;&gt; a.index(&quot;c&quot;)<br />\r\n2</p>\r\n\r\n<p><strong>count()</strong></p>\r\n\r\n<p>return number of occurrences of value&nbsp;</p>\r\n\r\n<p>list.count(value) -&gt; integer</p>\r\n\r\n<p>a = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]&nbsp;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;banana&quot;, &quot;apple&quot;, &quot;nut&quot;, &quot;flower&quot;,&quot;banana&quot;, &quot;apple&quot;, &quot;apple&quot;]<br />\r\n&gt;&gt;&gt; a.count(&quot;banana&quot;)<br />\r\n2<br />\r\n&gt;&gt;&gt; a.count(&quot;apple&quot;)<br />\r\n3</p>', '<p>list.copy() -&gt; list&nbsp;</p>\r\n\r\n<p>a shallow copy of L</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;banana&quot;, &quot;apple&quot;, &quot;nut&quot;, &quot;flower&quot;,&quot;banana&quot;, &quot;apple&quot;, &quot;apple&quot;]<br />\r\n&gt;&gt;&gt; b = a.copy()<br />\r\n&gt;&gt;&gt; b<br />\r\n[&#39;banana&#39;, &#39;apple&#39;, &#39;nut&#39;, &#39;flower&#39;, &#39;banana&#39;, &#39;apple&#39;, &#39;apple&#39;]</p>', '<p>remove all items from a list.</p>\r\n\r\n<p>L.clear() -&gt; None</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;banana&quot;, &quot;apple&quot;, &quot;nut&quot;, &quot;flower&quot;,&quot;banana&quot;, &quot;apple&quot;, &quot;apple&quot;]<br />\r\n&gt;&gt;&gt; a.clear()<br />\r\n&gt;&gt;&gt; a<br />\r\n[]</p>', '<p>The Tuples&nbsp;are a datatype and They&nbsp;have a&nbsp;sequence of values&nbsp;like a list. In a tupple, the values&nbsp;can be any type. The values in a tuple&nbsp;are called elements or sometimes items.The important difference between the tuples and list are mutability. The Tuples are immutable. we can&#39;t change them.</p>\r\n\r\n<p><strong>To define a tuple</strong></p>\r\n\r\n<p>Tuples may be constructed in a number of ways:</p>\r\n\r\n<p><strong>Using a pair of parentheses to denote the empty tuple: &quot;()&quot;</strong></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; ()<br />\r\n()</p>\r\n\r\n<p><strong>Using a trailing comma for a singleton tuple: &quot;a&quot;, or &quot;(a,)&quot;</strong></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;a&quot;,<br />\r\n(&#39;a&#39;,)</p>\r\n\r\n<p>&gt;&gt;&gt; (&quot;a&quot;,)<br />\r\n(&#39;a&#39;,)</p>\r\n\r\n<p><strong>Note:</strong> Don&#39;t forget that &quot;a&quot; and (&quot;a&quot;) are string type.</p>\r\n\r\n<p><strong>Separating items with commas: &quot;a, b, c&quot; or &quot;(a, b, c)&quot;</strong></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;a&quot;, &quot;b&quot;, &quot;c&quot;<br />\r\n(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot;a&quot;, &quot;b&quot;, &quot;c&quot;,<br />\r\n(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)<br />\r\n(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;,)<br />\r\n(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</p>\r\n\r\n<p><strong>Using the &quot;tuple()&quot; built-in: &quot;tuple()&quot; or &quot;tuple(iterable)&quot;</strong></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example4:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; tuple()<br />\r\n()</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example5:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; tuple(&quot;abcdefgh&quot;)<br />\r\n(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;)</p>\r\n\r\n<p><strong>Accessing to the elements</strong></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example6:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;]<br />\r\n&gt;&gt;&gt; a[0]<br />\r\n&#39;a&#39;<br />\r\n&gt;&gt;&gt; a[1]<br />\r\n&#39;b&#39;<br />\r\n&gt;&gt;&gt; a[:]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;]<br />\r\n&gt;&gt;&gt; a[3:6]<br />\r\n[&#39;d&#39;, &#39;e&#39;, &#39;f&#39;]<br />\r\n&gt;&gt;&gt; a[:6]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]<br />\r\n&gt;&gt;&gt; a[4:]<br />\r\n[&#39;e&#39;, &#39;f&#39;, &#39;g&#39;]<br />\r\n&gt;&gt;&gt; a[:-1]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]<br />\r\n&gt;&gt;&gt; a[:-2]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</p>', '<p>To list the tuple methods, you can use dir() function.</p>\r\n\r\n<p>&gt;&gt;&gt; dir(tuple)<br />\r\n[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, <strong>&#39;count&#39;, &#39;index&#39;</strong>]</p>\r\n\r\n<p>A Tuple has only two important methods. count() and index()</p>\r\n\r\n<p><strong>count()</strong></p>\r\n\r\n<p>return number of occurrences of value</p>\r\n\r\n<p>tuple.count(value) -&gt; integer</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; a = (&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;a&quot;, &quot;b&quot;)<br />\r\n&gt;&gt;&gt; a.count(&quot;a&quot;)<br />\r\n3<br />\r\n&gt;&gt;&gt; a.count(&quot;b&quot;)<br />\r\n2<br />\r\n&gt;&gt;&gt; a.count(&quot;c&quot;)<br />\r\n1</span></p>\r\n\r\n<p><strong>index()&nbsp;</strong></p>\r\n\r\n<p>return first index of value. Raises ValueError if the value is not present.</p>\r\n\r\n<p>tuple.index(value, start, stop) -&gt; integer&nbsp; &nbsp;start and stop parameters are optional.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = (&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;a&quot;, &quot;b&quot;)<br />\r\n&gt;&gt;&gt; a.index(&quot;a&quot;)<br />\r\n0</p>\r\n\r\n<p>&gt;&gt;&gt; a.index(&quot;a&quot;, 1)<br />\r\n2</p>\r\n\r\n<p>&gt;&gt;&gt; a.index(&quot;a&quot;, 3, 5)<br />\r\n4</p>', '<p>Dictionaries have two main parts. Key and Value. In order to access elements in a list, you use&nbsp;&nbsp;integer index. However In a dictionary you can keys which can be any type.&nbsp;</p>\r\n\r\n<p><strong>To define a dictionary</strong></p>\r\n\r\n<p>The Dictionaries can be created by placing a comma-separated list of &quot;key: value&quot; pairs within braces{} or dict() function.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; {&quot;one&quot;: 1, &quot;two&quot;: 2, three:&quot;3&quot;}<br />\r\n{&#39;one&#39;: 1, &#39;two&#39;: 2, 3: &#39;three&#39;}</p>\r\n\r\n<p>In the Example1 keys are &quot;one&quot;, &quot;two&quot; and &quot;three&quot;, values are 1, 2 and 3</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:&nbsp;</strong></span>the following examples all return a dictionary equal to &quot;{&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3}&quot;:</p>\r\n\r\n<p>&gt;&gt;&gt; a = dict(one=1, two=2, three=3)<br />\r\n&gt;&gt;&gt; b = {&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: 3}<br />\r\n&gt;&gt;&gt; c = dict(zip([&#39;one&#39;, &#39;two&#39;, &#39;three&#39;], [1, 2, 3]))<br />\r\n&gt;&gt;&gt; d = dict([(&#39;two&#39;, 2), (&#39;one&#39;, 1), (&#39;three&#39;, 3)])<br />\r\n&gt;&gt;&gt; e = dict({&#39;three&#39;: 3, &#39;one&#39;: 1, &#39;two&#39;: 2})<br />\r\n&gt;&gt;&gt; a == b == c == d == e<br />\r\n&nbsp; &nbsp; &nbsp; True</p>\r\n\r\n<p><strong>Acces to keys and values of a dictionary</strong></p>\r\n\r\n<p>To reach&nbsp;values the dictionary, you can use key in square brackets[ ]&nbsp; and they are arbitrary.&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; team = {&quot;club&quot;: &quot;Liverpool&quot;, &quot;win&quot;:15, &quot;lose&quot;:3, &quot;stadium&quot;:&quot;Anfield Road&quot;, &quot;last_five_result&quot;:[&quot;W&quot;,&quot;W&quot;,&quot;D&quot;,&quot;L&quot;,&quot;W&quot; ]}<br />\r\n&gt;&gt;&gt; team[&quot;club&quot;]<br />\r\n&#39;Liverpool&#39;<br />\r\n&gt;&gt;&gt; team[&quot;stadium&quot;]<br />\r\n&#39;Anfield Road&#39;<br />\r\n&gt;&gt;&gt; team[&quot;last_five_result&quot;]<br />\r\n[&#39;W&#39;, &#39;W&#39;, &#39;D&#39;, &#39;L&#39;, &#39;W&#39;]<br />\r\n&gt;&gt;&gt; team[&quot;last_five_result&quot;][0]<br />\r\n&#39;W&#39;</p>\r\n\r\n<p>To reach all values and keys of the dictionary, you can use keys() and values() methods.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = {&quot;country&quot;:&quot;Italy&quot;, &quot;capital&quot;:&quot;Rome&quot;, &quot;language&quot;:&quot;Italian&quot;}<br />\r\n&gt;&gt;&gt; keys = a.keys()<br />\r\n&gt;&gt;&gt; list(keys)<br />\r\n[&#39;country&#39;, &#39;capital&#39;, &#39;language&#39;]<br />\r\n&gt;&gt;&gt; values = a.values()<br />\r\n&gt;&gt;&gt; list(values)<br />\r\n[&#39;Italy&#39;, &#39;Rome&#39;, &#39;Italian&#39;]</p>\r\n\r\n<p><strong>Adding an element to a dictionary</strong></p>\r\n\r\n<p>Don&#39;t foregt that the order&nbsp;of items in a dictionary is unpredictable.</p>\r\n\r\n<p>dictionary[key] = value</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example5:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = {}<br />\r\n&gt;&gt;&gt; a[&quot;one&quot;] = 1<br />\r\n&gt;&gt;&gt; a<br />\r\n{&#39;one&#39;: 1}<br />\r\n&gt;&gt;&gt; a[&quot;two&quot;] = 2<br />\r\n&gt;&gt;&gt; a<br />\r\n{&#39;one&#39;: 1, &#39;two&#39;: 2}</p>\r\n\r\n<p><strong>Structure of the dictionaries</strong></p>\r\n\r\n<p>The values can be any type such as: integer, string, list, tuple, set, dictionary but the keys can only be the immutable types which are tuples, string and numbers. mutable types can&#39;t be a key of a dcitionary. List and dictionary types are not.&nbsp;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example6:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; l = [1, 2, 3]<br />\r\n&gt;&gt;&gt; d = {}<br />\r\n&gt;&gt;&gt; d[l] = &quot;apple&quot;<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#49&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; d[l] = &quot;apple&quot;<br />\r\nTypeError: unhashable type: &#39;list&#39;</span></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; t = (1 , 2, 3)<br />\r\n&gt;&gt;&gt; d[t] = &quot;apple&quot;<br />\r\n&gt;&gt;&gt; d<br />\r\n{(1, 2, 3): &#39;apple&#39;}</span></p>\r\n\r\n<p><strong>Change the dictionaries</strong></p>\r\n\r\n<p>Because The dictionaries are mutable, you can change them.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example7:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; d = {&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: 3}<br />\r\n&gt;&gt;&gt; d[&quot;one&quot;] = 111111<br />\r\n&gt;&gt;&gt; d<br />\r\n{&#39;one&#39;: 111111, &#39;two&#39;: 2, &#39;three&#39;: 3}</p>\r\n\r\n<p><strong>Dictionary Comprehensions</strong></p>\r\n\r\n<p>This way is very easy&nbsp;to construct a complex a dictonary.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example8:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; letters =&quot;abcdefgh&quot;<br />\r\n&gt;&gt;&gt; dictionary = {letter: letters.index(letter) for letter in letters}<br />\r\n&gt;&gt;&gt; dictionary<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}</p>\r\n\r\n<p><strong>Looping</strong></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example9:</strong></span></p>\r\n\r\n<p>team = {&quot;club&quot;: &quot;Liverpool&quot;, &quot;win&quot;:15, &quot;lose&quot;:3, &quot;stadium&quot;:&quot;Anfield Road&quot;, &quot;last_five_result&quot;:[&quot;W&quot;,&quot;W&quot;,&quot;D&quot;,&quot;L&quot;,&quot;W&quot; ]}<br />\r\nfor key in team:<br />\r\n&nbsp; &nbsp; print(key, &quot;:&quot;, &nbsp;team[key])</p>\r\n\r\n<p>club : Liverpool<br />\r\nwin : 15<br />\r\nlose : 3<br />\r\nstadium : Anfield Road<br />\r\nlast_five_result : [&#39;W&#39;, &#39;W&#39;, &#39;D&#39;, &#39;L&#39;, &#39;W&#39;]</p>\r\n\r\n<p><span style="color:null"><strong>copy a dictionary</strong></span></p>\r\n\r\n<p>There are two options.</p>\r\n\r\n<p><strong>1. dict2 = dict1</strong></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example10:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; dict1 = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict2 = dict1<br />\r\n&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict1[&quot;g&quot;] = 8<br />\r\n&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, <strong>&#39;g&#39;: 8, </strong>&#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, <strong>&#39;g&#39;: 8,</strong> &#39;h&#39;: 7</p>\r\n\r\n<p><strong>Note :</strong>&nbsp;If&nbsp;you change dict1, you will see that you change dict2, too and vice versa. If you don&#39;t want this, you should use other&nbsp;option(copy() method) .</p>\r\n\r\n<p><strong>2. dict2 dict1.copy()</strong></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example11:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; dict1 = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict2 = dict1.copy()<br />\r\n&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict1[&quot;g&quot;] = 8<br />\r\n&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, <strong>&#39;g&#39;: 8</strong>, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, <strong>&#39;g&#39;: 6,</strong> &#39;h&#39;: 7}</p>', '<p>To see methods of the dictionary, you can use dir() function like this:</p>\r\n\r\n<p>&gt;&gt;&gt; dir(dict)<br />\r\n[&#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;,<strong> &#39;clear&#39;, &#39;copy&#39;, &#39;fromkeys&#39;, &#39;get&#39;, &#39;items&#39;, &#39;keys&#39;, &#39;pop&#39;, &#39;popitem&#39;, &#39;setdefault&#39;, &#39;update&#39;, &#39;values&#39;</strong>]</p>\r\n\r\n<p>1. clear()<br />\r\n2. copy()<br />\r\n3. fromkeys()<br />\r\n4. get()<br />\r\n5. items()<br />\r\n6. keys()<br />\r\n7. pop()<br />\r\n8. popitem()<br />\r\n9. setdefault()<br />\r\n10. update()<br />\r\n11. values()</p>', '<p>dict.keys() -&gt; a set-like object providing a view on key of a dictionary.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; a.keys()<br />\r\ndict_keys([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;])<br />\r\n&gt;&gt;&gt; list(a.keys())<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;]</p>', '<p>D.values() -&gt; an object providing a view on values of a dictionariy.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; a.values()<br />\r\ndict_values([0, 1, 2, 3, 4, 5, 6, 7])<br />\r\n&gt;&gt;&gt; list(a.values())<br />\r\n[0, 1, 2, 3, 4, 5, 6, 7]</p>', '<p>dict.items() -&gt; a set-like object providing a view on all elements of a dictionary.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; a.items()<br />\r\ndict_items([(&#39;a&#39;, 0), (&#39;b&#39;, 1), (&#39;c&#39;, 2), (&#39;d&#39;, 3), (&#39;e&#39;, 4), (&#39;f&#39;, 5), (&#39;g&#39;, 6), (&#39;h&#39;, 7)])<br />\r\n&gt;&gt;&gt; list(a.items())<br />\r\n[(&#39;a&#39;, 0), (&#39;b&#39;, 1), (&#39;c&#39;, 2), (&#39;d&#39;, 3), (&#39;e&#39;, 4), (&#39;f&#39;, 5), (&#39;g&#39;, 6), (&#39;h&#39;, 7)]</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>a = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\nfor key, value in a.items():<br />\r\n&nbsp; &nbsp; print(key, &quot;&rarr;&quot;, value)</p>\r\n\r\n<p>a &rarr; 0<br />\r\nb &rarr; 1<br />\r\nc &rarr; 2<br />\r\nd &rarr; 3<br />\r\ne &rarr; 4<br />\r\nf &rarr; 5<br />\r\ng &rarr; 6<br />\r\nh &rarr; 7</p>', '<p>dict.get(k, d]) -&gt; D[k] if k in D, else d. &nbsp;d is optional and defaults to None.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;D[k] if k is not&nbsp; in a dictionary, then Python give an error. But get() method do not.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; a.get(&quot;c&quot;)<br />\r\n2</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; a.get(&quot;f&quot;)<br />\r\n5</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; a.get(&quot;z&quot;, &quot;There is no &#39;z&#39; in the dictionary&quot;)<br />\r\n&quot;There is no &#39;z&#39; in the dictionary&quot;</p>\r\n\r\n<p>&nbsp;</p>', '<p>Remove all items from a dictionary.</p>\r\n\r\n<p>D.clear() -&gt; None. &nbsp;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; a.clear()<br />\r\n&gt;&gt;&gt; a<br />\r\n{}</p>', '<p>dict.copy() -&gt; a shallow copy of the dictionary</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; dict2 = dict1.copy()<br />\r\n&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict1[&quot;g&quot;] = 8<br />\r\n&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 8, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict1 = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict1 = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}</p>', '<p>Returns a new dict with keys from iterable and values equal to value.</p>\r\n\r\n<p>fromkeys(iterable, value=None)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; dict.fromkeys(&quot;abc&quot;)<br />\r\n{&#39;a&#39;: None, &#39;b&#39;: None, &#39;c&#39;: None}</p>\r\n\r\n<p>&gt;&gt;&gt; dict.fromkeys(&quot;abc&quot;, 1)<br />\r\n{&#39;a&#39;: 1, &#39;b&#39;: 1, &#39;c&#39;: 1}</p>\r\n\r\n<p>&gt;&gt;&gt; dict.fromkeys(&quot;abc&quot;, [1,2,3])<br />\r\n{&#39;a&#39;: [1, 2, 3], &#39;b&#39;: [1, 2, 3], &#39;c&#39;: [1, 2, 3]}</p>\r\n\r\n<p>&gt;&gt;&gt; dict.fromkeys([1 ,2, 3])<br />\r\n{1: None, 2: None, 3: None</p>\r\n\r\n<p>&gt;&gt;&gt; dict.fromkeys([1 ,2, 3], &quot;a&quot;)<br />\r\n{1: &#39;a&#39;, 2: &#39;a&#39;, 3: &#39;a&#39;}</p>', '<p>remove specified key and return the corresponding value. If key is not found, d is optional and returned if given, otherwise KeyError is raised</p>\r\n\r\n<p>dict.pop(k, d) -&gt; value of dict[k]</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; dict1 = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict1.pop(&quot;a&quot;)<br />\r\n0</p>\r\n\r\n<p>&gt;&gt;&gt; dict1.pop(&quot;d&quot;)<br />\r\n3<br />\r\n&gt;&gt;&gt; dict1<br />\r\n{&#39;b&#39;: 1, &#39;c&#39;: 2, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict1.pop(&quot;d&quot;, &quot;Sorry There is no &#39;d&#39; here&quot;)<br />\r\n&quot;Sorry There is no &#39;d&#39; here&quot;<br />\r\n&gt;&gt;&gt; dict.pop(&quot;d&quot;)<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#149&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; dict.pop(&quot;d&quot;)<br />\r\nTypeError: descriptor &#39;pop&#39; requires a &#39;dict&#39; object but received a &#39;str&#39;</span></p>', '<p>remove and return some (key, value) pair as a 2-tuple; but raise KeyError if the dict&nbsp;is empty.</p>\r\n\r\n<p>dict.popitem() -&gt; (k, v)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; dict1 = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}&nbsp;<br />\r\n&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;h&#39;, 7)<br />\r\n&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;g&#39;, 6)<br />\r\n&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;f&#39;, 5)<br />\r\n&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;e&#39;, 4)<br />\r\n&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;d&#39;, 3)<br />\r\n&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;c&#39;, 2)<br />\r\n&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;b&#39;, 1)<br />\r\n&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;a&#39;, 0)<br />\r\n&gt;&gt;&gt; dict1.popitem()<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#161&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; dict1.popitem()<br />\r\nKeyError: &#39;popitem(): dictionary is empty&#39;</span></p>', '<p>dict.setdefault(k, d) -&gt; D.get(k,d),&nbsp; also set D[k]=d if k not in the dictionary. d is optional</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; dict1 = {&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}<br />\r\n&gt;&gt;&gt; dict1.setdefault(&quot;a&quot;)<br />\r\n0<br />\r\n&gt;&gt;&gt; dict1.setdefault(&quot;k&quot; , 8)<br />\r\n8<br />\r\n&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7, &#39;k&#39;: 8}<br />\r\n&gt;&gt;&gt; dict1.setdefault(&quot;z&quot;)<br />\r\n&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7, &#39;k&#39;: 8, &#39;z&#39;: None}</p>', '<p>Update the dictionary with new dictionary</p>\r\n\r\n<p>dict.update(new_dict)&nbsp;-&gt; None</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; dict1 = {&quot;a&quot;:1, &quot;b&quot;:2, &quot;c&quot;:3}<br />\r\n&gt;&gt;&gt; new_dict = {&quot;a&quot;:11, &quot;b&quot;:22, &quot;c&quot;:33}<br />\r\n&gt;&gt;&gt; dict1.update(new_dict)<br />\r\n&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 11, &#39;b&#39;: 22, &#39;c&#39;: 33}<br />\r\n&gt;&gt;&gt; dict1.update({&quot;a&quot;:111})<br />\r\n&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 111, &#39;b&#39;: 22, &#39;c&#39;: 33}<br />\r\n&gt;&gt;&gt; dict1.update({&quot;d&quot;: 44})<br />\r\n&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 111, &#39;b&#39;: 22, &#39;c&#39;: 33, &#39;d&#39;: 44}</p>', '<p>Python has three kinds of number.&nbsp;</p>\r\n\r\n<p>1. Integers&nbsp; : 0 , 1,&nbsp; 2,&nbsp; 100, -25</p>\r\n\r\n<p>2. Floats&nbsp; &nbsp; &nbsp;: 0.1,&nbsp; 5.5,&nbsp; 12.5,&nbsp; -15.9</p>\r\n\r\n<p>3. Complex :&nbsp;3+4j, 5+5j, 21+15j</p>\r\n\r\n<p><strong>Example1:</strong></p>\r\n\r\n<p>&gt;&gt;&gt; 12<br />\r\n12<br />\r\n&gt;&gt;&gt; 12.5<br />\r\n12.5<br />\r\n&gt;&gt;&gt; -12<br />\r\n-12<br />\r\n&gt;&gt;&gt; 31 + 4j<br />\r\n(31+4j)<br />\r\n&gt;&gt;&gt; type(12)<br />\r\n&lt;class &#39;int&#39;&gt;<br />\r\n&gt;&gt;&gt; type(12.5)<br />\r\n&lt;class &#39;float&#39;&gt;<br />\r\n&gt;&gt;&gt; type(3 + 4j)<br />\r\n&lt;class &#39;complex&#39;&gt;</p>\r\n\r\n<p><strong>Integer methods</strong></p>\r\n\r\n<p>Integers have &#39;bit_length&#39;, &#39;conjugate&#39;, &#39;denominator&#39;, &#39;from_bytes&#39;, &#39;imag&#39;, &#39;numerator&#39;, &#39;real&#39;, and&nbsp; &#39;to_bytes&#39; methods.</p>\r\n\r\n<p><strong>bit_length</strong></p>\r\n\r\n<p>int.bit_length() -&gt; int</p>\r\n\r\n<p>Number of bits necessary to represent self in binary.<br />\r\n&gt;&gt;&gt; bin(37)<br />\r\n&#39;0b100101&#39;<br />\r\n&gt;&gt;&gt; (37).bit_length()<br />\r\n6</p>\r\n\r\n<p><strong>Example2:</strong></p>\r\n\r\n<p>&gt;&gt;&gt; (2).bit_length()<br />\r\n2<br />\r\n&gt;&gt;&gt; (8).bit_length()<br />\r\n4<br />\r\n&gt;&gt;&gt; (1024).bit_length()<br />\r\n11<br />\r\n&gt;&gt;&gt; (2048).bit_length()<br />\r\n12</p>\r\n\r\n<p><strong>conjugate</strong></p>\r\n\r\n<p>Returns self, the complex conjugate of any int. İt is useful for complex numbers.</p>\r\n\r\n<p>&gt;&gt;&gt; (2).conjugate()<br />\r\n2<br />\r\n&gt;&gt;&gt; (-10).conjugate()<br />\r\n-10<br />\r\n&gt;&gt;&gt; (-10+ 5j).conjugate()<br />\r\n(-10-5j)</p>', '<p>Python has a set type like list, tuple. But The sets do not have any character to construct itself. like [], () or {} so It is used to set() function to construct sets.</p>\r\n\r\n<p>We already know sets from mathematic so you can use all operation about sets like mathematic such as: intersection, union, difference.</p>\r\n\r\n<p>The sets are mutable.</p>\r\n\r\n<p><strong>Define the&nbsp;set</strong></p>\r\n\r\n<p>We have two options.&nbsp;</p>\r\n\r\n<p>1. set() -&gt; new empty set object<br />\r\n&nbsp;2.set(iterable) -&gt; new set object</p>\r\n\r\n<p>iterable can be strings, lists, tuples...</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; set()<br />\r\nset()<br />\r\n&gt;&gt;&gt; set(&quot;abcdefgh&quot;)<br />\r\n{&#39;f&#39;, &#39;g&#39;, &#39;a&#39;, &#39;d&#39;, &#39;h&#39;, &#39;c&#39;, &#39;b&#39;, &#39;e&#39;}<br />\r\n&gt;&gt;&gt; set([&quot;John&quot;, &quot;Jack&quot;, &quot;Brad&quot;, &quot;Angelina&quot;])<br />\r\n{&#39;John&#39;, &#39;Angelina&#39;, &#39;Brad&#39;, &#39;Jack&#39;}</p>\r\n\r\n<p><strong>The Structure of sets</strong></p>\r\n\r\n<p>1. The sets can&#39;t have same item which can be one in a&nbsp;set.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span> <strong><span style="color:#e74c3c">Although &quot;banana&quot; string has three&nbsp;&quot;a&quot; and two&nbsp;&quot;n&quot;, set has only one &quot;a&quot; and one &quot;n&quot; character</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; set(&quot;banana&quot;)<br />\r\n{&#39;b&#39;, &#39;a&#39;, &#39;n&#39;}</p>\r\n\r\n<p>2. sets&nbsp;do&nbsp;not support indexing.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; set([&quot;John&quot;, &quot;Jack&quot;, &quot;Brad&quot;, &quot;Angelina&quot;])<br />\r\n{&#39;John&#39;, &#39;Angelina&#39;, &#39;Brad&#39;, &#39;Jack&#39;}</p>\r\n\r\n<p>3. The sets can be constructed using {} but don&#39;t forget that&nbsp;{} is special for dictionaries. So you can&#39;t make an empty set. ıf you try, it is obtained an empty dictyionary.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; {&quot;a&quot;, &quot;b&quot;, &quot;v&quot;}<br />\r\n{&#39;v&#39;, &#39;b&#39;, &#39;a&#39;}</p>\r\n\r\n<p>&gt;&gt;&gt; type({})<br />\r\n&lt;class &#39;dict&#39;&gt;</p>\r\n\r\n<p>4. An Element&nbsp;of a set can be only immutable type which are string, tuple and number. So you can&#39;t add list, dictionary and set.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example5:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([&quot;a&quot;, &quot;b&quot;, [&quot;nested_list&quot;]])<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#84&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; a = set([&quot;a&quot;, &quot;b&quot;, [&quot;nested_list&quot;]])<br />\r\n<strong>TypeError: unhashable type: &#39;list&#39;</strong></span></p>\r\n\r\n<p><span style="color:null"><strong>Set Comprehensions</strong></span></p>\r\n\r\n<p>It is used {} to do it.&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example6:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; our_list = list(range(200))<br />\r\n&gt;&gt;&gt; our_list<br />\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]<br />\r\n&gt;&gt;&gt; our_set = {i for i in our_list if 150 &lt; i &lt; 175}<br />\r\n&gt;&gt;&gt; our_set<br />\r\n{151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174}</p>', '<p>You can list dir() function.</p>\r\n\r\n<p>[&#39;__and__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iand__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__ior__&#39;, &#39;__isub__&#39;, &#39;__iter__&#39;, &#39;__ixor__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__or__&#39;, &#39;__rand__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__ror__&#39;, &#39;__rsub__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__xor__&#39;, &#39;add&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;difference&#39;, &#39;difference_update&#39;, &#39;discard&#39;, &#39;intersection&#39;, &#39;intersection_update&#39;, &#39;isdisjoint&#39;, &#39;issubset&#39;, &#39;issuperset&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;symmetric_difference&#39;, &#39;symmetric_difference_update&#39;, &#39;union&#39;, &#39;update&#39;]</p>\r\n\r\n<p><strong>&#39;add&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;difference&#39;, &#39;difference_update&#39;, &#39;discard&#39;, &#39;intersection&#39;, &#39;intersection_update&#39;, &#39;isdisjoint&#39;, &#39;issubset&#39;, &#39;issuperset&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;symmetric_difference&#39;, &#39;symmetric_difference_update&#39;, &#39;union&#39;, &#39;update&#39;</strong></p>', '<p>Remove all elements from this set.</p>\r\n\r\n<p>set.clear()</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set(&quot;abcdefgh&quot;)<br />\r\n&gt;&gt;&gt; a<br />\r\n{&#39;f&#39;, &#39;g&#39;, &#39;a&#39;, &#39;d&#39;, &#39;h&#39;, &#39;c&#39;, &#39;b&#39;, &#39;e&#39;}<br />\r\n&gt;&gt;&gt; a.clear()<br />\r\n&gt;&gt;&gt; a<br />\r\nset()</p>', '<p>Return a shallow copy of a set.</p>\r\n\r\n<p>set.copy()</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([&quot;London&quot;, &quot;Paris&quot;, &quot;Tokyo&quot;, &quot;Berlin&quot;])<br />\r\n&gt;&gt;&gt; a<br />\r\n{&#39;London&#39;, &#39;Berlin&#39;, &#39;Tokyo&#39;, &#39;Paris&#39;}<br />\r\n&gt;&gt;&gt; b = a.copy()<br />\r\n&gt;&gt;&gt; b<br />\r\n{&#39;London&#39;, &#39;Berlin&#39;, &#39;Tokyo&#39;, &#39;Paris&#39;}</p>', '<p>&nbsp;Add an element to a set. This has no effect if the element is already present.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([&quot;London&quot;, &quot;Paris&quot;, &quot;Tokyo&quot;, &quot;Berlin&quot;])<br />\r\n&gt;&gt;&gt; a<br />\r\n{&#39;London&#39;, &#39;Berlin&#39;, &#39;Tokyo&#39;, &#39;Paris&#39;}<br />\r\n&gt;&gt;&gt; a.add(&quot;Madrid&quot;)<br />\r\n&gt;&gt;&gt; a<br />\r\n{&#39;Tokyo&#39;, &#39;London&#39;, &#39;Berlin&#39;, &#39;Madrid&#39;, &#39;Paris&#39;}</p>', '<p>Return the difference of two or more sets as a new set.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 4, 5, 7])<br />\r\n&gt;&gt;&gt; a.difference(b)<br />\r\n{3, 6}</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; c = set([1, 2, 4, 5, 6])<br />\r\n&gt;&gt;&gt; a.difference(b, c)<br />\r\n{3}</p>\r\n\r\n<p>Note : You can use &quot;-&quot; character for same thing.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 4, 5, 7])<br />\r\n&gt;&gt;&gt; a - b<br />\r\n{3, 6}</p>', '<p>Remove all elements of another set from this set.</p>\r\n\r\n<p>set.difference_update(other_set(s))</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 4, 5, 7])<br />\r\n&gt;&gt;&gt; a.difference_update(b)<br />\r\n&gt;&gt;&gt; a<br />\r\n{3, 6}<br />\r\n&gt;&gt;&gt; b<br />\r\n{1, 2, 4, 5, 7}</p>', '<p>Remove an element from a set if it is a member. If the element is not a member, do nothing.</p>\r\n\r\n<p>set.discard(item)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; fruits = set([&quot;apple&quot;, &quot;orange&quot;, &quot;strawberry&quot;])<br />\r\n&gt;&gt;&gt; fruits.discard(&quot;apple&quot;)<br />\r\n&gt;&gt;&gt; fruits<br />\r\n{&#39;strawberry&#39;, &#39;orange&#39;}</p>', '<p>Remove an element from a set; it must be a member. If the element is not a member, raise a KeyError.</p>\r\n\r\n<p>set.remove(item)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; fruits = set([&quot;apple&quot;, &quot;orange&quot;, &quot;strawberry&quot;])<br />\r\n&gt;&gt;&gt; fruits.discard(&quot;orange&quot;)<br />\r\n&gt;&gt;&gt; fruits<br />\r\n{&#39;strawberry&#39;, &#39;apple&#39;}</p>', '<p>Return the intersection of two sets as a new set. (i.e. all elements that are in both sets.)</p>\r\n\r\n<p>set.intersection(set1, &nbsp;,,,)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 4, 5, 7])<br />\r\n&gt;&gt;&gt; a.intersection(b)<br />\r\n{1, 2, 5}</p>', '<p>Update a set with the intersection of itself and another.</p>\r\n\r\n<p>set.intersection_update(set1, ...)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 4, 5, 7])<br />\r\n&gt;&gt;&gt; a.intersection_update(b)<br />\r\n&gt;&gt;&gt; a<br />\r\n{1, 2, 5}</p>', '<p>Return True if two sets have a null intersection.</p>\r\n\r\n<p>set.isdisjoint(set1)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 4, 5, 7])<br />\r\n&gt;&gt;&gt; a.isdisjoint(b)<br />\r\nFalse</p>\r\n\r\n<p>&gt;&gt;&gt; c = set([9, 10, 11])<br />\r\n&gt;&gt;&gt; a.isdisjoint(c)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; b.isdisjoint(c)<br />\r\nTrue</p>', '<p>Report whether another set contains this set.</p>\r\n\r\n<p>set.issubset(set1)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 3])<br />\r\n&gt;&gt;&gt; c = set([1, 2, 3, 4])<br />\r\n&gt;&gt;&gt; b.issubset(a)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; c.issubset(a)<br />\r\nFalse<br />\r\n&gt;&gt;&gt; a.issubset(b)<br />\r\nFalse</p>', '<p>Report whether this set contains another set.</p>\r\n\r\n<p>set.isupperset(set1)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 3])<br />\r\n&gt;&gt;&gt; c = set([1, 2, 3, 4])<br />\r\n&gt;&gt;&gt; a.issuperset(b)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; a.issuperset(c)<br />\r\nFalse</p>', '<p>Return the union of sets as a new set. (i.e. all elements that are in either set.)</p>\r\n\r\n<p>set.union(set1, ...)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 3, 8, 7])<br />\r\n&gt;&gt;&gt; c = set([1, 2, 3, 4, 7, 12])<br />\r\n&gt;&gt;&gt; a.union(b)<br />\r\n{1, 2, 3, 5, 6, 7, 8}<br />\r\n&gt;&gt;&gt; a.union(b, c)<br />\r\n{1, 2, 3, 4, 5, 6, 7, 8, 12}</p>', '<p>Update a set with the union of itself and others.</p>\r\n\r\n<p>set.update(set1)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 3, 8, 7])<br />\r\n&gt;&gt;&gt; a.update(b)<br />\r\n&gt;&gt;&gt; a<br />\r\n{1, 2, 3, 5, 6, 7, 8}</p>', '<p>Return the symmetric difference of two sets as a new set. (i.e. all elements that are in exactly one of the sets.)</p>\r\n\r\n<p>set.symmetric_difference(set1)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 3, 8, 7])<br />\r\n&gt;&gt;&gt; a.difference(b)<br />\r\n{5, 6}<br />\r\n&gt;&gt;&gt; b.difference(a)<br />\r\n{8, 7}<br />\r\n&gt;&gt;&gt; a.symmetric_difference(b)<br />\r\n{5, 6, 7, 8}</p>', '<p>Update a set with the symmetric difference of itself and another.</p>\r\n\r\n<p>set.symmetric_difference_update(set1)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])<br />\r\n&gt;&gt;&gt; b = set([1, 2, 3, 8, 7])<br />\r\n&gt;&gt;&gt; a.symmetric_difference_update(b)<br />\r\n&gt;&gt;&gt; a<br />\r\n{5, 6, 7, 8}</p>', '<p>Remove and return an arbitrary set element. Raises KeyError if the set is empty.</p>\r\n\r\n<p>set.pop()</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; a = set([1, 2, 3, 5, 6])</p>\r\n\r\n<p>&gt;&gt;&gt; a.pop()<br />\r\n1<br />\r\n&gt;&gt;&gt; a.pop()<br />\r\n2<br />\r\n&gt;&gt;&gt; a.pop()<br />\r\n3<br />\r\n&gt;&gt;&gt; a.pop()<br />\r\n5<br />\r\n&gt;&gt;&gt; a.pop()<br />\r\n6<br />\r\n&gt;&gt;&gt; a.pop()<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#181&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; a.pop()<br />\r\n<strong>KeyError: &#39;pop from an empty set&#39;</strong></span></p>', '<p>Frozenset is like set. But there is important difference between them. The Frozensets are immutable so it can&#39;t be changed. So They have less methods than sets. Other things are same&nbsp;as sets. Now we see methods of frozensets.</p>\r\n\r\n<p>[&#39;__and__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__or__&#39;, &#39;__rand__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__ror__&#39;, &#39;__rsub__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__xor__&#39;, &#39;copy&#39;, &#39;difference&#39;, &#39;intersection&#39;, &#39;isdisjoint&#39;, &#39;issubset&#39;, &#39;issuperset&#39;, &#39;symmetric_difference&#39;, &#39;union&#39;]</p>\r\n\r\n<p><strong>&#39;copy&#39;, &#39;difference&#39;, &#39;intersection&#39;, &#39;isdisjoint&#39;, &#39;issubset&#39;, &#39;issuperset&#39;, &#39;symmetric_difference&#39;</strong>, &#39;union&#39; are same as like methods of sets.</p>', '<p>When we type a program or code, we can take the unfiriendly error messages from Python. Such as:</p>\r\n\r\n<p>SyntaxError<br />\r\nValueError<br />\r\nIndexError<br />\r\nZeroDivisionError<br />\r\nNameError<br />\r\nIOError<br />\r\nTypeError</p>\r\n\r\n<p>To catch these errors, it is used try,,, except... statements.</p>\r\n\r\n<p><strong>try... except...</strong></p>\r\n\r\n<p>These expected or unexpected errors can be handled by &quot;try / except&quot; statement which has two main blocks.&nbsp;</p>\r\n\r\n<p><em><strong>try:</strong>&nbsp;</em>If an error occurs in this block,&nbsp;Python jumps out of the try block to except block.&nbsp;If there is no error, except block doesn&#39;t work.&nbsp;</p>\r\n\r\n<p><em><strong>except:</strong></em> &nbsp;you can&nbsp;add some statements under this block.&nbsp; they are executed,&nbsp;If an error occurs in try block, If there is no error, added statements doesn&#39;t work and&nbsp;this block&nbsp;are ignored.&nbsp;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example:1</span></strong></p>\r\n\r\n<p>number = input(&quot;Please, Enter a number: &quot;)</p>\r\n\r\n<p>try:<br />\r\n&nbsp; &nbsp; print(int(number) ** 2)</p>\r\n\r\n<p>except:<br />\r\n&nbsp; &nbsp; print(&quot;You don&#39;t enter a number.&quot;)</p>\r\n\r\n<p>Above the Example1 if an user enter a number, only, try block does work. except block doesn&#39;t work. So&nbsp; <em>print(int(number) ** 2) works.</em></p>\r\n\r\n<p>If an user enter not a number such as &quot;five&quot;, in line <em>print(int(number) ** 2)</em> an Valueerror occurs because of number**2. So&nbsp;Python jumps out of the try block to except block. It does work.&nbsp;<em> print(&quot;You don&#39;t enter a number.&quot;) works.</em></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2: If you are sure about errortype, You can use like this, too</span></strong></p>\r\n\r\n<p>number = input(&quot;Please, Enter a number: &quot;)</p>\r\n\r\n<p>try:<br />\r\n&nbsp; &nbsp; print(int(number) ** 2)</p>\r\n\r\n<p>except ValuError:<br />\r\n&nbsp; &nbsp; print(&quot;You don&#39;t enter a number.&quot;)</p>\r\n\r\n<p><strong>Note:</strong> You can add&nbsp;more except&nbsp;block too</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3: It is added&nbsp;ZeroDivisionError&nbsp;to except block against possibility of 100/0</span></strong></p>\r\n\r\n<p>number = input(&quot;Please, Enter a number: &quot;)</p>\r\n\r\n<p>try:<br />\r\n&nbsp; &nbsp; print(100/ int(number))</p>\r\n\r\n<p>except ZeroDivisionError:<br />\r\n&nbsp; &nbsp; print(&quot;You can not divide a number with &#39;0&#39; &quot;)<br />\r\nexcept ValueError:<br />\r\n&nbsp; &nbsp; print(&quot;You don&#39;t enter a number.&quot;)</p>\r\n\r\n<p style="margin-left:0cm; margin-right:0cm"><span style="color:#e74c3c"><strong>Example4:You can use like this too:&nbsp;except (ValueError, ZeroDivisionError):</strong></span></p>\r\n\r\n<p>number = input(&quot;Please, Enter a number: &quot;)</p>\r\n\r\n<p>try:<br />\r\n&nbsp; &nbsp; print(100/ int(number))</p>\r\n\r\n<p>except (ValueError, ZeroDivisionError):<br />\r\n&nbsp; &nbsp; print(&quot;An error occurs&quot;)</p>\r\n\r\n<p><strong>try... except... as...</strong></p>\r\n\r\n<p>If you want to show Pyhon error message, you can additionally use &quot;as&quot; statement next to except statement.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example5: If you don&#39;t enter a number, You will see Python error like this &quot;invalid literal for int() with base 10: &#39;f&#39;&nbsp;&quot;</span></strong></p>\r\n\r\n<p>number = input(&quot;Please, Enter a number: &quot;)</p>\r\n\r\n<p>try:<br />\r\n&nbsp; &nbsp; print(int(number) ** 2)</p>\r\n\r\n<p>except ValueError as my_error:<br />\r\n&nbsp; &nbsp; print(&quot;You don&#39;t enter a number.&quot;)<br />\r\n&nbsp; &nbsp; print(my_error)</p>\r\n\r\n<p><strong>try... except... else</strong></p>\r\n\r\n<p>If you want to divide errors step by step, You can use &quot;else&quot; statement.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example6: If you enter not a number, you will see &quot;&quot;You don&#39;t enter a number.&quot;<br />\r\nIf you enter 0, you will see&nbsp;&nbsp;&quot;You can not divide a number with &#39;0&#39;&quot;</span></strong></p>\r\n\r\n<p>try:<br />\r\n&nbsp; &nbsp; number = int(input(&quot;Please, Enter a number: &quot;))<br />\r\nexcept ValueError:<br />\r\n&nbsp; &nbsp; print(&quot;You don&#39;t enter a number.&quot;)</p>\r\n\r\n<p>else:<br />\r\n&nbsp; &nbsp; try:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(100/ number)<br />\r\n&nbsp; &nbsp; except ZeroDivisionError:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;You can not divide a number with &#39;0&#39; &quot;)</p>\r\n\r\n<p><strong>try... except... finally...</strong></p>\r\n\r\n<p>finally block works, whichever error occurs or not. It is very useful about file execution.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example7:&nbsp;</span></strong></p>\r\n\r\n<p>number = input(&quot;Please, Enter a number: &quot;)</p>\r\n\r\n<p>try:<br />\r\n&nbsp; &nbsp; print(int(number) ** 2)</p>\r\n\r\n<p>except ValueError as my_error:<br />\r\n&nbsp; &nbsp; print(&quot;You don&#39;t enter a number.&quot;)<br />\r\n&nbsp; &nbsp; print(my_error)</p>\r\n\r\n<p>finally:<br />\r\n&nbsp; &nbsp; print(&quot;I am the last station&quot;)</p>\r\n\r\n<p><strong>raise</strong></p>\r\n\r\n<p>Although there is no error, sometimes you want to show error message. So You can use raise statement. If the raise statement works, a program ends.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example8: If an user enter 13 number, program ends and see <em>&#39;raise Exception(&quot;I hate 13 number. So you can&#39;t use this number&quot;)<br />\r\nException: I hate 13 number. So you can&#39;t use this number&#39;</em> message</strong></span></p>\r\n\r\n<p>number = input(&quot;Please, Enter a number: &quot;)</p>\r\n\r\n<p>if int(number) == 13:<br />\r\n&nbsp; &nbsp; raise Exception(&quot;I hate 13 number. So you can&#39;t use this number&quot;)</p>\r\n\r\n<p>try:<br />\r\n&nbsp; &nbsp; print(int(number) ** 2)</p>\r\n\r\n<p>except ValueError as my_error:<br />\r\n&nbsp; &nbsp; print(&quot;You don&#39;t enter a number.&quot;)<br />\r\n&nbsp; &nbsp; print(my_error)</p>\r\n\r\n<p><strong>Note:</strong> You can use under except block to show one more error message.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example9:</span></strong></p>\r\n\r\n<p>number = input(&quot;Please, Enter a number: &quot;)<br />\r\ntry:<br />\r\n&nbsp; &nbsp; print(int(number) ** 2)</p>\r\n\r\n<p>except:<br />\r\n&nbsp; &nbsp; raise RuntimeError(&quot;Something bad happened&quot;)</p>\r\n\r\n<p>when this codes run and enter a not number, You will see these error messages:</p>\r\n\r\n<p>Please, Enter a number: bbhbhh<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\nValueError: invalid literal for int() with base 10: &#39;bbhbhh&#39;<br />\r\nDuring handling of the above exception, another exception occurred:</span></p>\r\n\r\n<p><span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; &nbsp; raise RuntimeError(&quot;<strong>Something bad happened</strong>&quot;)<br />\r\nRuntimeError: <strong>Something bad happened</strong></span></p>\r\n\r\n<p><strong>catching all errors</strong></p>\r\n\r\n<p>You can use only try... except... blocks to find&nbsp;all errors.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example10:</span></strong></p>\r\n\r\n<p>number = input(&quot;Please, Enter a number: &quot;)<br />\r\ntry:<br />\r\n&nbsp; &nbsp; print(100/ int(number))</p>\r\n\r\n<p>except:<br />\r\n&nbsp; &nbsp; print(&quot;An error occurs&quot;)</p>\r\n\r\n<p>&nbsp;</p>', '<p>Escape sequences are only recognized in string literals are. When you use in print() function, you can&#39;t see them.&nbsp;</p>\r\n\r\n<p><strong>single quote(&#39;), double quote(&quot;) and triple qupte(&quot;&quot;&quot;)</strong></p>\r\n\r\n<p>To define a string without any function, there are three ways using single quote(&#39;), double quote(&quot;) and triple qupte(&quot;&quot;&quot;).</p>\r\n\r\n<p>&gt;&gt;&gt; &#39;Jack&#39;<br />\r\n&#39;Jack<br />\r\n&gt;&gt;&gt; &quot;Jack&quot;<br />\r\n&#39;Jack&#39;<br />\r\n&gt;&gt;&gt; &quot;&quot;&quot;Jack&quot;&quot;&quot;<br />\r\n&#39;Jack&#39;</p>\r\n\r\n<p>If you want to use these characters in your string, you should be carefull.</p>\r\n\r\n<p>So How should i construct&nbsp;What&#39;s your name or he said &quot; My name is Jack and this isn&#39;t mine&quot; . Look at these below examples.</p>\r\n\r\n<p><em>Wrong usages</em></p>\r\n\r\n<p>&nbsp;&gt;&gt;&gt; &nbsp;&#39;What&#39;s your name&#39;<br />\r\nSyntaxError: invalid character in identifier</p>\r\n\r\n<p>&#39; &quot;My name is Jack and this isn&#39;t mine&quot; &#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot; he said: &quot;My name is Jack and this is not &#39;mine&#39; &quot; &quot;<br />\r\nSyntaxError: invalid syntax</p>\r\n\r\n<p><em>Right usages</em></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;What&#39;s your name&quot;<br />\r\n&quot;What&#39;s your name&quot;</p>\r\n\r\n<p>&gt;&gt;&gt; &#39; &quot;My name is Jack&quot; &#39;<br />\r\n&#39; &quot;My name is Jack&quot; &#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;&quot;&quot; he said: &quot;My name is Jack and this is not &#39;mine&#39; &quot; &quot;&quot;&quot;<br />\r\n&#39; he said: &quot;My name is Jack and this is not \\&#39;mine\\&#39; &quot; &#39;</p>\r\n\r\n<p>Finally we can say this: if there is only<em> &#39; character</em>&nbsp; in our string, we can use &quot; or &quot;&quot;&quot; characters at the begining and ending of our string.</p>\r\n\r\n<p>if there is only<em> &#39;&quot;character</em>&nbsp; in our string, we can use &#39;&nbsp;or &quot;&quot;&quot; characters at the begining and ending of our string.</p>\r\n\r\n<p>if there is <em>&nbsp;&#39;&nbsp; and &quot;&quot; characters</em>&nbsp; in our string, we can useonly &quot;&quot;&quot;&nbsp;characters at the begining and ending of our string.</p>\r\n\r\n<p>Now we will learn&nbsp;some interesting and secret characters in the strings, too. They are called escape sequence. You&nbsp;can&#39;t normaly&nbsp;see them in your string but Python knows them so you should, too.</p>\r\n\r\n<p><strong>(\\)&nbsp;</strong><strong>Backslash</strong></p>\r\n\r\n<p>Python read strings from left&nbsp;to right&nbsp;and knows them from &#39;, &quot;&quot; or &quot;&quot;&quot; characters. (\\) character says to&nbsp;Python &quot;Please don&#39;t see as a character if it is one of the escape sequences(&#39;, &quot; or &quot;&quot;&quot;)&nbsp;after me &quot;. Now look at below examples.</p>\r\n\r\n<p>If you want to&nbsp;write a string like &#39;What&#39;s your name&#39; between (&#39;) characters, you can use (\\) character before second (&#39;) character.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p><span style="color:null">&gt;&gt;&gt; &#39;What\\&#39;s your name&#39;<br />\r\n&quot;What&#39;s your name&quot;</span></p>\r\n\r\n<p>Above Example1 Python starts read from left to right our strings. Firstly Python see (&#39;) and waits a string until other (&#39;)&nbsp;and then Python see W, h, a, t and&nbsp; then see (\\) character so Python understand that there is a coomand&nbsp;for it and&nbsp;so Python do not behave string operation for (&#39;) and see (&#39;)&nbsp;as only a normal cahracter and show it in Python shell without error. and then Python see &quot;s&quot;, &quot; &quot;, &quot;your name&quot; and&nbsp;finally see third (&#39;).&nbsp;</p>\r\n\r\n<p>Briefly,</p>\r\n\r\n<p><span style="font-size:20px"><strong><span style="color:#e74c3c">&#39;</span></strong>What<strong><span style="color:#2ecc71">\\</span><span style="color:#2980b9">&#39;</span></strong>s your name<strong><span style="color:#e74c3c">&#39;</span></strong></span></p>\r\n\r\n<p><span style="color:#e74c3c">for this example both<span style="font-size:20px"> <strong>(&#39;)</strong></span> is used to show character in the string. such as &#39;jack&#39;</span></p>\r\n\r\n<p><span style="color:#1abc9c"><strong><span style="font-size:20px">(\\&#39;)</span></strong></span> sends command to Python I am an escape sequence like \\n, \\t, \\r ...</p>\r\n\r\n<p><strong><span style="font-size:20px"><span style="color:#2980b9">(&#39;)</span></span></strong> is understood like nomral string character like &#39;a&#39;, &#39;b&#39;, &#39;*&#39;</p>\r\n\r\n<p><strong>Note:</strong> \\ character is used to divide long strings and contents without taking any error.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt;string = &quot;Welcome to Python 3.6&#39;s help utility! \\<br />\r\nIf this is your first time using Python, you should definitely check out\\<br />\r\nthe tutorial on the Internet at http://docs.python.org/3.6/tutorial/.&quot;</p>\r\n\r\n<p><strong>(\\n) new line</strong></p>\r\n\r\n<p>It is used to obstruct line feed.&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;first line\\nsecond line\\nthird line&quot;)<br />\r\nfirst line<br />\r\nsecond line<br />\r\nthird line</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4: If you not use \\n for above Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt;print(&quot;first linesecond linethird line&quot;)<br />\r\nfirst linesecond linethird line</p>\r\n\r\n<p><strong>Note:</strong> Please, be careful when you use &#39;n&#39; chacter in your strings with \\n.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example5:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; print(&#39;n&#39;)<br />\r\nn<br />\r\n&gt;&gt;&gt; print(&#39;\\n&#39;)</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; print(&#39;\\nn&#39;)</p>\r\n\r\n<p>n</p>\r\n\r\n<p><strong>\\t horizontal tab</strong></p>\r\n\r\n<p>It is used to obstruct horizonral tab.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example6:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;a)\\tabc&quot;)<br />\r\na)&nbsp;&nbsp; &nbsp;abc</p>\r\n\r\n<p>&gt;&gt;&gt; print(*&quot;abcd&quot;, sep=&quot;\\t&quot;)<br />\r\na&nbsp;&nbsp; &nbsp;b&nbsp;&nbsp; &nbsp;c&nbsp;&nbsp; &nbsp;d</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example7:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;a)\\tstrings\\nb)\\tlists\\nc)\\ttuples&quot;)<br />\r\na)&nbsp;&nbsp; &nbsp;strings<br />\r\nb)&nbsp;&nbsp; &nbsp;lists<br />\r\nc)&nbsp;&nbsp; &nbsp;tuples</p>\r\n\r\n<p><strong>Note:</strong> Please, be careful when you use &#39;t&#39; chacter in your strings with \\t.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example8:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;\\ttime&quot;)<br />\r\n&nbsp;&nbsp; &nbsp;time<br />\r\n&gt;&gt;&gt; print(&quot;\\time&quot;)<br />\r\n&nbsp;&nbsp; &nbsp;ime</p>\r\n\r\n<p><strong>\\a bell</strong></p>\r\n\r\n<p>It is used to construct bell.</p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;\\a&quot;)<br />\r\n\x07<br />\r\n&gt;&gt;&gt; print(&quot;\\a&quot;*10)<br />\r\n\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07</p>\r\n\r\n<p><strong>Note:</strong> Please, be careful when you use &#39;a&#39; chacter in your strings with \\a.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example9:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;\\apple&quot;)<br />\r\n\x07pple<br />\r\n&gt;&gt;&gt; print(&quot;\\aapple&quot;)<br />\r\n\x07apple</p>\r\n\r\n<p><strong>\\r&nbsp;Carriage Return</strong></p>\r\n\r\n<p>It is used to return&nbsp;same beginning of the line.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example10:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt;print(&quot;hello\\Jim&quot;)<br />\r\nJimlo</p>\r\n\r\n<p><strong>Note:</strong> Please, be careful when you use &#39;r&#39; chacter in your strings with \\r.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example11:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;\\rrabbit&quot;)<br />\r\nrabbit<br />\r\n&gt;&gt;&gt; print(&quot;\\rabbit&quot;)<br />\r\nabbit</p>\r\n\r\n<p><strong>\\v vertical tab</strong></p>\r\n\r\n<p>It is used for vertical tab.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example12:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;vertical\\vtab&quot;)<br />\r\nd&uuml;şey<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sekme</p>\r\n\r\n<p><strong>Note:</strong> It may not work in every operating system. Don&#39;t trust this escape sequence.</p>\r\n\r\n<p><strong>\\b backspace</strong></p>\r\n\r\n<p>It is used for backspace</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example13:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt;print(&quot;google.com\\b.uk&quot;)<br />\r\ngoogle.co.uk</p>\r\n\r\n<p><strong>Note:</strong> Please, be careful when you use &#39;b&#39; chacter in your strings with \\b.</p>\r\n\r\n<p><strong>\\u&nbsp;16-bit unicode hex value</strong></p>\r\n\r\n<p>It is used to show meaning of UNICODE characters</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example14:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;\\u0066&quot;)<br />\r\nf<br />\r\n&gt;&gt;&gt; print(&quot;\\u0065&quot;)<br />\r\ne</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;Please, be careful when you use &#39;u&#39; chacter in your strings with \\u. Especially when you want to use with &quot;users&quot; word such as&nbsp;C:\\users\\...</p>\r\n\r\n<p><strong>\\U 32-bit unicode hex value</strong></p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example15:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;\\U00000065&quot;)<br />\r\ne</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;Please, be careful when you use &#39;U&#39; chracter in your strings with \\U. Especially when you want to use with &quot;users&quot; word such as&nbsp;C:\\Users\\...</p>\r\n\r\n<p><strong>\\N character name&nbsp;in the UNICODE</strong></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example16:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;\\N{LATIN SMALL LETTER E}&quot;)<br />\r\ne</p>\r\n\r\n<p><strong>Note: </strong>Please, be careful when you use &#39;N&#39; chacter in your strings with \\N.</p>\r\n\r\n<p><strong>\\x character with hexadecimal value</strong></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example17:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; print(&quot;\\x51&quot;)<br />\r\nQ</p>\r\n\r\n<p><strong>Note: </strong>Please, be careful when you use &#39;x&#39; chacter in your strings with \\x.</p>\r\n\r\n<p>\\f new page</p>\r\n\r\n<p>It is used to open new page especially for writer.</p>\r\n\r\n<p><strong>r chracter</strong></p>\r\n\r\n<p>If you want to get&nbsp;Python to show and&nbsp;neglect all escape sequnce, you can use r character the ending of a string</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example18:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt;print(r&quot;Escape Sequnces are: \\n\\r\\v\\n&quot;)<br />\r\nEscape Sequnces are: \\n\\r\\v\\n</p>\r\n\r\n<p>print(&quot;Escape Sequnces are: \\n\\r\\v\\n&quot;)<br />\r\nEscape Sequnces are:&nbsp;</p>\r\n\r\n<p><strong>Note:</strong> You can use one more&nbsp;(\\) character to show escape sequences.&nbsp;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example19:</strong></span></p>\r\n\r\n<p>print(&quot;Escape Sequnces are: \\\\n\\\\r\\\\v\\\\n&quot;)<br />\r\nEscape Sequnces are: \\n\\r\\v\\n</p>\r\n\r\n<p><strong>&nbsp;Meanings of the Escape Sequences</strong></p>\r\n\r\n<table align="left" border="1" cellpadding="1" cellspacing="1" style="width:280px">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\\&rsquo;</td>\r\n\t\t\t<td>It is useful to show quote (&#39;)&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\\\</td>\r\n\t\t\t<td>It is useful to show \\</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\n</td>\r\n\t\t\t<td>It is used to open new line</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\t</td>\r\n\t\t\t<td>It is used to make horizontal tab</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\u</td>\r\n\t\t\t<td>Character with 16-bit hex value</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\U</td>\r\n\t\t\t<td>Character with 32-bit hex value</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\N</td>\r\n\t\t\t<td>It is used to UNICODE character name</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\x</td>\r\n\t\t\t<td>It is used to show meaning of hex value</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\a</td>\r\n\t\t\t<td>bip noise</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\r</td>\r\n\t\t\t<td>It is used to return same line</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\b</td>\r\n\t\t\t<td>It is used for backspace</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\v</td>\r\n\t\t\t<td>It is used to make vertical tab</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\\f</td>\r\n\t\t\t<td>It is used to open new page</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>r</td>\r\n\t\t\t<td>It is used to show escape sequences</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>', '<p>Until now, we have seen conditional execution, functions, arithemetic and boolean operation, assignment of strings, lists, tuples, dictionaries, and sets. All these work in main memory of CPU(central processing unit). when a computer is turned off, all these datas are erased from from main memory. So All they are ge&ccedil;ici işlemlerdir.</p>\r\n\r\n<p>The computers have secondary memory, too like harddisks. In this lesson we will work with&nbsp;files, on the other&nbsp; meaning secondary memory. Secondary memory operation is not erased, when the computer is turned off.&nbsp;</p>\r\n\r\n<p>Now we will work on&nbsp;how to read, write and construct the files.&nbsp;</p>\r\n\r\n<p><strong>To Construct a file</strong></p>\r\n\r\n<p>It is used to open() function to construct a file.&nbsp;</p>\r\n\r\n<p>open(file_name, mode=&#39;w&#39;)&nbsp;<strong>&rArr; </strong>This command&nbsp;constructs the&nbsp;file_name in which directory Python Shell or Python file(example.py) works.&nbsp; If Python Shell or Python file works in Desktop, your file(example.txt)&nbsp;will occur in Desktop.&nbsp;</p>\r\n\r\n<p>Here file_name is name of the file such as: &#39;example.txt&#39; or You must type exact adress of the file such as:&nbsp;open(&quot;C:\\\\users\\\\users_name\\\\desktop\\\\example.txt&quot;, &quot;w&quot;)</p>\r\n\r\n<p>&#39;w&#39; means writing and this mode construct a file. But if there is already a file, this mode deletes all content of the file. So we should be careful about it.</p>\r\n\r\n<p><strong>Note: </strong>If you want to learn directory of Python shell or file, you can use os module like this:</p>\r\n\r\n<p>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; os.getcwd()<br />\r\n&#39;C:\\\\Users\\\\pythonlessons\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;</p>\r\n\r\n<p>If your Python Shell runs in Desktop, You will see like this</p>\r\n\r\n<p>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; os.getcwd()<br />\r\n&#39;C:\\\\Users\\\\sahint&uuml;rk\\\\Desktop&#39;</p>\r\n\r\n<p><strong>write() method</strong></p>\r\n\r\n<p>Write string to stream. Returns the number of characters written (which is always equal to the length of the string).</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:&nbsp; example.txt will be constructed in the directory of Python Shell&nbsp;</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; open(&#39;example.txt&#39;, &quot;w&quot;)</p>\r\n\r\n<p><strong>Writing to the files</strong></p>\r\n\r\n<p>In order to write something to a file, there are&nbsp;three stages.</p>\r\n\r\n<p>1. construct the file<br />\r\n&nbsp; &nbsp; file = open(&#39;example.txt&#39;, &quot;w&quot;)</p>\r\n\r\n<p>2. write() method of the files : is used to write something<br />\r\n&nbsp; &nbsp; file.write(&quot;John is a doctor.&quot;)<br />\r\n<br />\r\n3.close() method of the files: is used to save&nbsp;and exit<br />\r\n&nbsp; &nbsp; file.close()</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2: you can save below codes as example.py in your desktop. If you do that, you will see&nbsp;in your desktop&nbsp;example.txt which has&nbsp;&quot;John is a doctor&quot; string inside</span></strong></p>\r\n\r\n<p>file = open(&#39;example.txt&#39;, &quot;w&quot;)<br />\r\nfile.write(&quot;John is a doctor.&quot;)<br />\r\nfile.close()</p>\r\n\r\n<p><strong>Reading the files</strong></p>\r\n\r\n<p>To read file,&nbsp; open() function is used, too. But we should change mode parameter as &#39;r&#39; of open() function. Actually default&nbsp;value of&nbsp; mode is already &#39;r&#39;. So you can use only file_name inside open function.&nbsp;</p>\r\n\r\n<p>file = open(&#39;example.txt&#39;, &quot;r&quot;) or&nbsp;file = open(&#39;example.txt&#39;) Both of them are same.&nbsp;Please remember, this mode was &quot;w&quot; in the Example2.&nbsp;</p>\r\n\r\n<p>In order to read&nbsp;something from&nbsp;a file, there are&nbsp;three methods of the files. they are&nbsp;read(), readline() and&nbsp;readlines()</p>\r\n\r\n<p>Now In order to understand diffrences all of these methods, we will create a example.txt and write below sentences inside of it like below image.&nbsp;Don&#39;t forget to save example.txt.</p>\r\n\r\n<p><img alt="" src="http://127.0.0.1:8000/static/img/example.png" style="height:100px; width:250px" /></p>\r\n\r\n<p><span style="color:null"><strong>read()</strong></span></p>\r\n\r\n<p><span style="color:null">reads all content of a file as strings.</span></p>\r\n\r\n<p><span style="color:null">Now we will read inside the example.txt with <strong>read() method step by step.&nbsp;</strong></span></p>\r\n\r\n<p><span style="color:null"><strong>1.</strong> Firstly, we open a Python file which can be named example.py in the directory of the example.txt.&nbsp;</span></p>\r\n\r\n<p><span style="color:null"><strong>2.</strong> We write below codes inside&nbsp;the example.py</span></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p><span style="color:null">file = open(&quot;example.txt&quot;)<br />\r\nreading = file.read()<br />\r\nprint(reading)<br />\r\nprint(type(reading))<br />\r\nfile.close()</span></p>\r\n\r\n<p><strong>3. </strong>Then save and run</p>\r\n\r\n<p>Finally, Our&nbsp;result is like this:</p>\r\n\r\n<p>John is a doctor.<br />\r\nAngelina is a nurse.<br />\r\nTim is an engineer.<br />\r\n&lt;class &#39;str&#39;&gt;</p>\r\n\r\n<p>Now we will examine our codes</p>\r\n\r\n<p><span style="color:null"><em><strong>file = open(&quot;example.txt&quot;)</strong></em><br />\r\nwe have opened the example.txt.&nbsp;</span></p>\r\n\r\n<p><span style="color:null"><em><strong>reading = file.read()&nbsp;</strong></em><br />\r\nwe read the all content of example.txt and then store in the variable reading</span></p>\r\n\r\n<p><span style="color:null"><em><strong>print(reading)</strong></em>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\nwe print the content to Python Shell</span></p>\r\n\r\n<p><span style="color:null"><strong><em>print(type(reading))</em></strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\nwe print type of the content</span></p>\r\n\r\n<p><span style="color:null"><em><strong>file.close()</strong></em>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\nwe close example.txt</span></p>\r\n\r\n<p><span style="color:null"><strong>Our result:</strong> read() method reads all content of a file as strings.</span></p>\r\n\r\n<p><strong>readline() </strong></p>\r\n\r\n<p>This method reads only one line after open a file. So below example we used this method three times in our Python file.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example4:</strong></span></p>\r\n\r\n<p>file = open(&quot;example.txt&quot;)<br />\r\nline1 = file.readline()<br />\r\nline2 = file.readline()<br />\r\nline3 = file.readline()<br />\r\nprint(line1)<br />\r\nprint(line2)<br />\r\nprint(line3)<br />\r\nfile.close()</p>\r\n\r\n<p><strong>Result </strong></p>\r\n\r\n<p>John is a doctor.(line1)</p>\r\n\r\n<p>Angelina is a nurse.(line2)</p>\r\n\r\n<p>Tim is an engineer.(line3)</p>\r\n\r\n<p><strong>Note:</strong> readline kepp \\n character in its string.</p>\r\n\r\n<p>If you want to see letters of line1 &nbsp;above Example4, you can use below codes.</p>\r\n\r\n<p>a=[]<br />\r\nfor b in line1:<br />\r\n&nbsp; &nbsp; a.append(b)<br />\r\nprint(a)</p>\r\n\r\n<p>[&#39;J&#39;, &#39;o&#39;, &#39;h&#39;, &#39;n&#39;, &#39; &#39;, &#39;i&#39;, &#39;s&#39;, &#39; &#39;, &#39;a&#39;, &#39; &#39;, &#39;d&#39;, &#39;o&#39;, &#39;c&#39;, &#39;t&#39;, &#39;o&#39;, &#39;r&#39;, &#39;.&#39;, <strong>&#39;\\n&#39;</strong>]</p>\r\n\r\n<p><strong>readlines()</strong></p>\r\n\r\n<p>This method returns a list of lines from the content of a file.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example5:</strong></span></p>\r\n\r\n<p>file = open(&quot;example.txt&quot;)<br />\r\nreading = file.readlines()<br />\r\nprint(reading)<br />\r\nprint(type(reading))<br />\r\nfile.close()</p>\r\n\r\n<p>Your result is a list.<br />\r\n[&#39;John is a doctor.\\n&#39;, &#39;Angelina is a nurse.\\n&#39;, &#39;Tim is an engineer.&#39;]<br />\r\n&lt;class &#39;list&#39;&gt;</p>\r\n\r\n<p><strong>Reading files with for loop</strong></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example6:</strong></span></p>\r\n\r\n<p>file = open(&quot;example.txt&quot;)<br />\r\nfor line in file:<br />\r\n&nbsp; &nbsp; print(line)<br />\r\nfile.close()</p>\r\n\r\n<p><strong>Result in Python Shell</strong><br />\r\nJohn is a doctor.</p>\r\n\r\n<p>Angelina is a nurse.</p>\r\n\r\n<p>Tim is an engineer.</p>\r\n\r\n<p><strong>close()</strong></p>\r\n\r\n<p>Flush and close the&nbsp;file. This method has no effect if the file is already closed. Closing the file&nbsp;is very important to be sure about&nbsp;saving&nbsp;the file. Operating system always performs on the file. We don&#39;t want this.</p>\r\n\r\n<p>In order to be sure about closing the file, we have two options</p>\r\n\r\n<p>1. Using try... except statements</p>\r\n\r\n<p>2. Using with statement</p>\r\n\r\n<p>These two options absolutely close the file, Whichever error occur.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example7:</span></strong></p>\r\n\r\n<p>try:<br />\r\n&nbsp; &nbsp; file = open(&quot;example.txt&quot;)<br />\r\n&nbsp; &nbsp; reading = file.readlines()<br />\r\nexcept:<br />\r\n&nbsp; &nbsp; print(&quot;There is an error&quot;)<br />\r\nfinally:<br />\r\n&nbsp; &nbsp; file.close()</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example8:</span></strong></p>\r\n\r\n<p>with open(&quot;example.txt&quot;) as file:<br />\r\n&nbsp; &nbsp; print(file.read())</p>\r\n\r\n<p><strong><u>example.txt</u></strong><br />\r\nJohn is a doctor.<br />\r\nAngelina is a nurse.<br />\r\nTim is an engineer.</p>\r\n\r\n<p><strong>seek() and tell()</strong></p>\r\n\r\n<p>seek(byte_number) method changes cursor&nbsp;position in the file. cursor position&nbsp;is necessary from where to&nbsp;read or where to write. we need reference position&nbsp;Return the new absolute position.</p>\r\n\r\n<p>seek(0) &rArr; cursor goes the beginning of the file.<br />\r\nseek(10)&nbsp;&rArr; cursor goes 10.th byte cursor position of the file.</p>\r\n\r\n<p>tell() method return&nbsp;current cursor&nbsp;position.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example9:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; file = open(&quot;example.txt&quot;)<br />\r\n&gt;&gt;&gt; file.read()<br />\r\n&#39;John is a doctor.\\nAngelina is a nurse.\\nTim is an engineer.\\nJack is a teacher.&#39;<br />\r\n&gt;&gt;&gt; file.read()<br />\r\n&#39;&#39;<br />\r\n&gt;&gt;&gt; file.seek(0)<br />\r\n0<br />\r\n&gt;&gt;&gt; file.read()<br />\r\n&#39;John is a doctor.\\nAngelina is a nurse.\\nTim is an engineer.\\nJack is a teacher.&#39;<br />\r\n&gt;&gt;&gt; file.tell()<br />\r\n80<br />\r\n&gt;&gt;&gt; file.seek(20)<br />\r\n20<br />\r\n&gt;&gt;&gt; file.read()<br />\r\n&#39;ngelina is a nurse.\\nTim is an engineer.\\nJack is a teacher.&#39;<br />\r\n&gt;&gt;&gt; file.seek(40)<br />\r\n40<br />\r\n&gt;&gt;&gt; file.read()<br />\r\n&#39;\\nTim is an engineer.\\nJack is a teacher.&#39;<br />\r\n&gt;&gt;&gt; file.seek(60)<br />\r\n60<br />\r\n&gt;&gt;&gt; file.tell()<br />\r\n60<br />\r\n&gt;&gt;&gt; file.read()<br />\r\n&#39;\\nJack is a teacher.&#39;<br />\r\nfile.close()</p>\r\n\r\n<p>Now we expain what happened.</p>\r\n\r\n<p><em>&gt;&gt;&gt; file.read()<br />\r\n&#39;John is a doctor.\\nAngelina is a nurse.\\nTim is an engineer.\\nJack is a teacher.&#39;</em></p>\r\n\r\n<p><em>we read all content of the files. Cursor position is at ending of the file.&nbsp;</em></p>\r\n\r\n<p><em>&gt;&gt;&gt; file.read()<br />\r\n&#39;&#39;</em></p>\r\n\r\n<p>because cursor position is at the ending of the file, we couldn&#39;t read anything.</p>\r\n\r\n<p><em>&gt;&gt;&gt; file.seek(0)</em><br />\r\n0</p>\r\n\r\n<p>we goes 0.byte so at the beginning of the file. So we are ready to read again.</p>\r\n\r\n<p><em>&gt;&gt;&gt; file.seek(40)</em><br />\r\n40</p>\r\n\r\n<p>we goes 40.byte of the file.&nbsp;</p>\r\n\r\n<p><em>&gt;&gt;&gt; file.read()</em><br />\r\n&#39;\\nTim is an engineer.\\nJack is a teacher.&#39;</p>\r\n\r\n<p>Due to byte position, we can read middle of the file.</p>\r\n\r\n<p><strong>Update the files</strong></p>\r\n\r\n<p>when we want to change a file, we should be sure about cursor position of the file. Beginning, Middle or Ending?</p>\r\n\r\n<p><strong>Update ending of the file</strong></p>\r\n\r\n<p>In order to update a file without erasing, we need &#39;a&#39; mode of open function.&nbsp;</p>\r\n\r\n<p>&#39;a&#39; mode&nbsp;opens for writing&nbsp;appending to the end of the file if it exists.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example10:</span></strong></p>\r\n\r\n<p>with open(&quot;example.txt&quot;, &quot;a&quot;) as file:<br />\r\n&nbsp; &nbsp; file.write(&quot;\\nJack is a teacher.&quot;)</p>\r\n\r\n<p><strong><u>example.txt</u></strong><br />\r\nJohn is a doctor.<br />\r\nAngelina is a nurse.<br />\r\nTim is an engineer.<br />\r\nJack is a teacher.</p>\r\n\r\n<p><strong>Update beginning of the file</strong></p>\r\n\r\n<p>when the file is opened with &#39;r&#39; mode, you can&#39;t write inside of it. On the other hand when the file is opened &#39;w&#39; mode, you can&#39;t read it.</p>\r\n\r\n<p>In order to update at the beginning of the file, &nbsp;we need firstly read and then write something.&nbsp;So open() function give us &#39;r+&#39; mode which opens a file for updating (reading and writing)</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example11:</span></strong></p>\r\n\r\n<p>with open(&quot;example.txt&quot;, &quot;r+&quot;) as f:<br />\r\n&nbsp; &nbsp; content = f.read()<br />\r\n&nbsp; &nbsp; f.seek(0) #we will go at the beginning<br />\r\n&nbsp; &nbsp; f.write(&quot;Mary is an engineer\\n&quot; + content )</p>\r\n\r\n<p><strong><u>example.txt</u></strong><br />\r\nMary is an engineer<br />\r\nJohn is a doctor.<br />\r\nAngelina is a nurse.<br />\r\nTim is an engineer.<br />\r\nJack is a teacher.</p>\r\n\r\n<p><strong>Update middile of the file</strong></p>\r\n\r\n<p>In order to this, we will use readlines() method&nbsp;because its result is mutable list data. You can use read() and readline() method, too but their results are string which is immutable.</p>\r\n\r\n<p><strong>writelines() method</strong></p>\r\n\r\n<p>This method writes strings in a list to the file.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example12:</span></strong></p>\r\n\r\n<p>with open(&quot;example.txt&quot;, &quot;r+&quot;) as file:<br />\r\n&nbsp; &nbsp; content = file.readlines()<br />\r\n&nbsp; &nbsp; content.insert(3, &quot;Micheal is a workman\\n&quot;)<br />\r\n&nbsp; &nbsp; file.seek(0)<br />\r\n&nbsp; &nbsp; file.writelines(content)</p>\r\n\r\n<p><strong><u>example.txt</u></strong><br />\r\nMary is an engineer<br />\r\nJohn is a doctor.<br />\r\nAngelina is a nurse.<br />\r\nMicheal is a workman<br />\r\nTim is an engineer.<br />\r\nJack is a teacher.</p>\r\n\r\n<p><strong>The modes of the open() function</strong></p>\r\n\r\n<p><strong>r:</strong> It is used to read a plain file&nbsp;default value of mode</p>\r\n\r\n<p><strong>w:</strong> It is used to open for writing, truncating the file first. It deletes if the file already exists.</p>\r\n\r\n<p><strong>a:</strong> It is used to&nbsp;open for writing, appending to the end of the file if it exists</p>\r\n\r\n<p><strong>x:</strong>&nbsp;It is used to create a new file and open it for writing. It raises an `FileExistsError` if the file already exists.</p>\r\n\r\n<p><strong>r+</strong>: It is used to open a&nbsp;file for updating (reading and writing)</p>\r\n\r\n<p><strong>w+</strong>:&nbsp;It is used to open a&nbsp;file for updating (reading and writing).&nbsp;It deletes if the file already exists.</p>\r\n\r\n<p><strong>a+:</strong> It is used to open a file for updating (reading and writing). It creates&nbsp;if the file do not exists.</p>\r\n\r\n<p><strong>x+:</strong>&nbsp;It is used to open a&nbsp;file for updating (reading and writing).&nbsp;It raises an `FileExistsError` if the file already exists.</p>\r\n\r\n<p><strong>rb:&nbsp;</strong> It is used to read a binary file such as: pdf, word...</p>\r\n\r\n<p><strong>wb:</strong>&nbsp;It is used to open for writing, truncating the binary file first. It deletes if the file already exists.</p>\r\n\r\n<p><strong>ab:</strong> It is used to&nbsp;open for writing, appending to the end of the binary file if it exists</p>\r\n\r\n<p><strong>xb:</strong>&nbsp;It is used to create a new binary file and open it for writing. It raises an `FileExistsError` if the file already exists.</p>\r\n\r\n<p><strong>rb+</strong>: It is used to open a binary file for updating (reading and writing)</p>\r\n\r\n<p><strong>wb+</strong>:&nbsp;It is used to open a binary&nbsp;file for updating (reading and writing).&nbsp;It deletes if the file already exists.</p>\r\n\r\n<p><strong>ab+:</strong> It is used to open a binary file for updating (reading and writing). It creates&nbsp;if the file do not exists.</p>\r\n\r\n<p><strong>xb+:</strong>&nbsp;It is used to open a binary file for updating (reading and writing).&nbsp;It raises an `FileExistsError` if the file already exists.</p>', '<p>We have learnt some of the files method previous lesson &quot;&quot;Files like read(), readline(), readlines(), write(), writelines(), seek(), tell(). Now we will learn other methods and attribute of the files.</p>\r\n\r\n<p><strong>closed attribute</strong></p>\r\n\r\n<p>It checks whether a file is open or not. Return True or False.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; file.closed<br />\r\nTrue</p>\r\n\r\n<p><strong>readable()</strong></p>\r\n\r\n<p>Return whether file&nbsp;was opened for reading. If False, read() will raise OSError. If the file is not opened, it will raise error.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; file = open(&quot;example.txt&quot;)<br />\r\n&gt;&gt;&gt; file.readable()<br />\r\nTrue</p>\r\n\r\n<p><strong>writable()</strong></p>\r\n\r\n<p>Return whether object was opened for writing. If False, write() will raise OSError.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example3:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; file = open(&quot;example.txt&quot;)<br />\r\n&gt;&gt;&gt; file.writeable()<br />\r\nFalse</p>\r\n\r\n<p><strong>truncate()</strong></p>\r\n\r\n<p>Truncate file to size bytes. File pointer is left unchanged.</p>\r\n\r\n<p>truncate(self, pos=None) pos: byte</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example4:&nbsp;</span></strong></p>\r\n\r\n<p>before:&nbsp;<strong>example.txt</strong><br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Mary is an engineer<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; John is a doctor.<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Angelina is a nurse.<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Micheal is a workman<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Tim is an engineer.<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Jack is a teacher.</p>\r\n\r\n<p>later:&nbsp; &nbsp; &nbsp;<strong>example.txt</strong><br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Mary is an engineer</p>\r\n\r\n<p><strong>mode attribute</strong></p>\r\n\r\n<p>return mode of a file</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example5:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; file = open(&quot;example.txt&quot;)<br />\r\n&gt;&gt;&gt; file.mode<br />\r\n&#39;r&#39;</p>\r\n\r\n<p>name attribute</p>\r\n\r\n<p>return name of a file</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example6:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; file = open(&quot;example.txt&quot;)<br />\r\n&gt;&gt;&gt; file.name<br />\r\n&#39;example.txt&#39;</p>\r\n\r\n<p><strong>encoding attribute</strong></p>\r\n\r\n<p>return encoding of a file</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example7:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; file = open(&quot;example.txt&quot;)<br />\r\n&gt;&gt;&gt; file.name<br />\r\n&#39;cp1254&#39; #for windows<br />\r\n&#39;utf-8&#39; #for linux</p>', '<p>We already&nbsp;learnt plain texts which can be created and read by Notepad,&nbsp;Gedit, Kwrite, Python IDLE. Such as: txt, py, html, js texts.</p>\r\n\r\n<p>Binary files are more complex than plain texts. Such as: video files, image files, doc files, mp3 files... Such as: A video file&nbsp;can&#39;t be opened by Notepa Gedit, Kwrite. we need a video player program for it like windows Media Player.</p>\r\n\r\n<p>When we open a file with Python, we should say the type of the file to Python. In order to this, open() function has mode parameter.</p>\r\n\r\n<p>For binary files the modes are :</p>\r\n\r\n<p><strong>rb:&nbsp;</strong>&nbsp;It is used to read a binary file such as: pdf, word...</p>\r\n\r\n<p><strong>wb:</strong>&nbsp;It is used to open for writing, truncating the binary file first. It deletes if the file already exists.</p>\r\n\r\n<p><strong>ab:</strong>&nbsp;It is used to&nbsp;open for writing, appending to the end of the binary file if it exists</p>\r\n\r\n<p><strong>xb:</strong>&nbsp;It is used to create a new binary file and open it for writing. It raises an `FileExistsError` if the file already exists.</p>\r\n\r\n<p><strong>rb+</strong>: It is used to open a binary file for updating (reading and writing)</p>\r\n\r\n<p><strong>wb+</strong>:&nbsp;It is used to open a binary&nbsp;file for updating (reading and writing).&nbsp;It deletes if the file already exists.</p>\r\n\r\n<p><strong>ab+:</strong>&nbsp;It is used to open a binary file for updating (reading and writing). It creates&nbsp;if the file do not exists.</p>\r\n\r\n<p><strong>xb+:</strong>&nbsp;It is used to open a binary file for updating (reading and writing).&nbsp;It raises an `FileExistsError` if the file already exists.</p>\r\n\r\n<p><br />\r\n&nbsp;</p>', '<p>Python has byte data type&nbsp;like strings, lists, tuples, dictionaries... But they are immutable like strings. before working about the bytes, you&nbsp;should learn some terms like bit, decimal, hexadecimal, octal, encoding, decoding.</p>\r\n\r\n<p>8 bit equals 1 byte. Such as:&nbsp;&nbsp;01011110&nbsp;&rArr; 8 bit&nbsp;<br />\r\n1 byte equals 8 bits and has&nbsp;&nbsp;2**8 = 256 numbers.<br />\r\n2 bytes equal&nbsp;16 bits and have&nbsp;2**16&nbsp;= 65,536 numbers.<br />\r\n3 bytes&nbsp;equal&nbsp;24 bits and have&nbsp;2**24 = 16,777,216 numbers<br />\r\n4 bytes&nbsp;equal&nbsp;32 bits and have 2**32 = 4,294,967,296 numbers</p>\r\n\r\n<p>In Python a byte is shown like this: b&#39;\\xc3\\xa7&#39; is two byte data.</p>\r\n\r\n<p>b in b&#39;\\xc3\\xa7&#39; means this is a byte data has&nbsp;hexadecimal number or numbers.<br />\r\n\\xc3 in&nbsp;b&#39;\\xc3\\xa7&#39; means 1 byte data its value is c3 which is hexadecimal number.<br />\r\n\\xa7&nbsp;in&nbsp;b&#39;\\xc3\\xa7&#39; means 1 byte data its value is a7&nbsp;which is hexadecimal number.</p>\r\n\r\n<p><strong>Defining&nbsp;bytes</strong></p>\r\n\r\n<p>bytes are a data type like lists, strings, tuples.. In order to define a byte, there are two options: using b character and bytes() function</p>\r\n\r\n<p><strong>1. using b character</strong></p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example5:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; type(b&#39;&#39;)<br />\r\n&lt;class &#39;bytes&#39;&gt;</p>\r\n\r\n<p><strong>Note:</strong> b character accepts only ASCII character. If you try, you will take an error.</p>\r\n\r\n<p>&gt;&gt;&gt; b&#39;&ccedil;&#39;<br />\r\nFile &quot;&lt;stdin&gt;&quot;, line 1<br />\r\n<strong><span style="color:#e74c3c">SyntaxError:</span></strong> bytes can only contain ASCII literal characters.</p>\r\n\r\n<p><strong>2. bytes() function</strong></p>\r\n\r\n<p>it creates byte type data.</p>\r\n\r\n<p><strong>bytes(int) -&gt; bytes</strong></p>\r\n\r\n<p>If it has an integer&nbsp;argument, it returns&nbsp; given integer times&nbsp;byte data.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example6</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; bytes(5)<br />\r\nb&#39;\\x00\\x00\\x00\\x00\\x00&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; bytes(2)<br />\r\nb&#39;\\x00\\x00&#39;</p>\r\n\r\n<p><strong>bytes(string, encoding, error) -&gt; bytes</strong></p>\r\n\r\n<p>If it has a string&nbsp;argument, it returns&nbsp; bytes depend on encoding type which can be ASCII, UTF-8, CP857, CP1254... error is used as optional parameter to not have an error.&nbsp;</p>\r\n\r\n<p><strong>Note: </strong>when a string has only ASCII character, the result is b&#39;string&#39;.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example7:&nbsp;</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; bytes(&quot;door&quot;, &quot;ascii&quot;)<br />\r\nb&#39;door&#39;</p>\r\n\r\n<p><strong>Note: </strong>when a string has not any ASCII character, the result is hexadecimal value of that character.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example8:&nbsp;</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; bytes(&#39;Ş&#39;, &#39;utf-8&#39;)<br />\r\nb&#39;\\xc5\\x9e&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;Ş&#39;, &#39;cp1254&#39;)<br />\r\nb&#39;\\xde&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;Ş&#39;, &#39;cp857&#39;)<br />\r\nb&#39;\\x9e&#39;</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>If string isn&#39;t inside encoding type, it will give an error because of ASCII has noy &#39;Ş&#39; character.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example9:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; bytes(&#39;Ş&#39;,&#39;ascii&#39;)<br />\r\nTraceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#75&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; bytes(&#39;Ş&#39;,&#39;ascii&#39;)<br />\r\n<strong><span style="color:#e74c3c">UnicodeEncodeError:</span></strong> &#39;ascii&#39; codec can&#39;t encode character &#39;\\u015e&#39; in position 0: ordinal not in range(128)</p>\r\n\r\n<p>To not have error, you should use error parameter. Error parameter can be &#39;strict&#39;, &#39;&#39;replace&#39;, &#39;ignore&#39;, &#39;xmlcharrefreplace&#39;.</p>\r\n\r\n<p><strong>strict:&nbsp;</strong>default value. It will give an error.</p>\r\n\r\n<p><strong>ignore:</strong>&nbsp;It behaves there is no&nbsp;</p>\r\n\r\n<p><strong>replace :</strong>&nbsp;It replaces &#39;?&#39; character&nbsp;</p>\r\n\r\n<p><strong>xmlcharrefreplace:</strong>&nbsp;It puts xml character</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example10</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; bytes(&#39;ŞII&#39;,&#39;ascii&#39;,&#39;replace&#39;)<br />\r\nb&#39;?II&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;ŞII&#39;,&#39;ascii&#39;,&#39;ignore&#39;)<br />\r\nb&#39;II&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;ŞII&#39;,&#39;ascii&#39;,&#39;xmlcharrefreplace&#39;)<br />\r\nb&#39;&amp;#350;II&#39;</p>\r\n\r\n<h3><strong>Byte methods</strong></h3>\r\n\r\n<p>Bytes have&nbsp;&#39;capitalize&#39;, &#39;center&#39;, &#39;count&#39;, &#39;decode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;fromhex&#39;, &#39;hex&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isdigit&#39;, &#39;islower&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39; methods.&nbsp;</p>\r\n\r\n<p>They are similiar to the methods of strings. Their usage is same&nbsp;as the strings. But the bytes two different methods.</p>\r\n\r\n<p><strong>1. decode()</strong></p>\r\n\r\n<p>Decode the bytes using the codec registered for encoding.</p>\r\n\r\n<p>decode(encoding=&#39;utf-8&#39;, errors=&#39;strict&#39;)</p>\r\n\r\n<p>the encoding is&nbsp;with which to decode the bytes.<br />\r\nerror has the default value that is &#39;strict&#39; meaning that decoding errors raise a UnicodeDecodeError. Other possible values are &#39;ignore&#39; and &#39;replace&#39;</p>\r\n\r\n<p><strong>Example1:</strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;İ&quot;.encode(&quot;utf-8&quot;)<br />\r\nb&#39;\\xc4\\xb0&#39;<br />\r\n&gt;&gt;&gt; &quot;İ&quot;.encode(&quot;cp1254&quot;)<br />\r\nb&#39;\\xdd&#39;<br />\r\n&gt;&gt;&gt; b&quot;\\xc4\\xb0&quot;.decode(&quot;utf-8&quot;)<br />\r\n&#39;İ&#39;<br />\r\n&gt;&gt;&gt; b&quot;\\xc4\\xb0&quot;.decode(&quot;cp1254&quot;)<br />\r\n&#39;&Auml;&deg;&#39;<br />\r\n&gt;&gt;&gt; b&#39;\\xdd&#39;.decode(&quot;cp1254&quot;)<br />\r\n&#39;İ&#39;</p>\r\n\r\n<p><strong>2.fromhex()</strong></p>\r\n\r\n<p>Create a bytes object from a string of hexadecimal numbers.</p>\r\n\r\n<p>fromhex(string)&nbsp;</p>\r\n\r\n<p>Spaces between two numbers are accepted. Example: bytes.fromhex(&#39;B9 01EF&#39;) -&gt; b&#39;\\\\xb9\\\\x01\\\\xef&#39;.</p>\r\n\r\n<p><strong>Example2:</strong></p>\r\n\r\n<p>&gt;&gt;&gt; bytes.fromhex(&quot;cf a2&quot;)<br />\r\nb&#39;\\xcf\\xa2&#39;</p>\r\n\r\n<p><strong>bytearrays</strong></p>\r\n\r\n<p>Python has one more data type about bytes. They are called bytearray. Because bytes are&nbsp;immutable like strings, they can&#39;t be updated. So Python give a chance to use mutable bytearray data type like lists.</p>\r\n\r\n<p><strong>Defining bytearray</strong></p>\r\n\r\n<p>To define a bytearray, bytearray() function is used.&nbsp;</p>\r\n\r\n<p><strong>Example1:&nbsp;</strong></p>\r\n\r\n<p>&gt;&gt;&gt; bytearray(b&quot;door12&quot;)<br />\r\nbytearray(b&#39;door12&#39;)</p>\r\n\r\n<p><strong>bytearraymethods</strong></p>\r\n\r\n<p>&nbsp;&#39;append&#39;, &#39;capitalize&#39;, &#39;center&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;decode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;extend&#39;, &#39;find&#39;, &#39;fromhex&#39;, &#39;hex&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isdigit&#39;, &#39;islower&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;replace&#39;, &#39;reverse&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;</p>', '<p>In electronic and computer science, about 0 volt means 0&nbsp;number and about 5 volt means 1 number. So because of two number ( 0 and 1), this number system is called <strong>binary digit(bit).</strong>&nbsp; A computer uses them to understand&nbsp;what to do. However using only these numbers can&#39;t solve people&#39;s ihtiya&ccedil;. So we need the characters such as: a, b, c, d, !, &#39;, ...But how can it be possible? The answer of this question is encoding the bits like mors alphabet.&nbsp;</p>\r\n\r\n<p><strong>what are&nbsp;the encoding characters and ASCII?</strong></p>\r\n\r\n<p>Every character should has its special number depend on a standart.&nbsp;In order to determine these special numbers for characters, American Standard Code for Information Interchange(ASCII) was prepeared in 1960 by the sicientists from IBM. You can see this list form&nbsp;<a href="http://http//www.asciitable.com/">http://www.asciitable.com/</a>&nbsp;adress. ASCII is an encoding type. when you look this table, there are 128 characters. The computer in 1980 has only 8 bits and one of them is used parity check so there are&nbsp;only seven bits to encode characters. As a result it hhas 2^7&nbsp;= 128 characters.</p>\r\n\r\n<p>When you look at the ASCII table, you will see a number which can be (decimal, binary, hex, oct) for every character. Such as:</p>\r\n\r\n<p>65 &rArr;1000001 &rArr; A<br />\r\n66 &rArr;1000010&nbsp;&rArr; B<br />\r\n67 &rArr;1000011&nbsp;&rArr; C<br />\r\n68 &rArr;1000100&nbsp;&rArr; D<br />\r\n69 &rArr;1000101&nbsp;&rArr; E<br />\r\n70 &rArr;1000110&nbsp;&rArr; F</p>\r\n\r\n<p><img alt="" src="http://127.0.0.1:8000/static/img/ascii_table.png" /></p>\r\n\r\n<p>You can check them with Python like this:</p>\r\n\r\n<div class="Code Computer" style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><strong>Example1:</strong></p>\r\n\r\n<p><code>&gt;&gt;&gt; chr(65)<br />\r\n&#39;A&#39;<br />\r\n&gt;&gt;&gt; oct(65)<br />\r\n&#39;0o101&#39;<br />\r\n&gt;&gt;&gt; hex(65)<br />\r\n&#39;0x41&#39;<br />\r\n&gt;&gt;&gt; chr(0x41)<br />\r\n&#39;A&#39;<br />\r\n&gt;&gt;&gt; chr(0o101)<br />\r\n&#39;A&#39;<br />\r\n&gt;&gt;&gt; bin(65)<br />\r\n&#39;0b1000001&#39;<br />\r\n&gt;&gt;&gt; chr(0b1000001)<br />\r\n&#39;A&#39;</code></p>\r\n</div>\r\n\r\n<p><strong>UNICODE</strong></p>\r\n\r\n<p>The ASCII&nbsp;table is prepeared for English letters so in it&nbsp; you can&#39;t see the characters of other languages such as: &eacute;, &auml;, &ouml;, &ccedil; or&nbsp;Chineese, Japaneese, Arabic characters&nbsp;in this list. You may not read &eacute;, &auml;, &ouml;, &ccedil; characters with ASCII system. Therefore,&nbsp;operating systems(Windows, Linux, Android) need more powerful lists than ASCII. but it&nbsp;is a reference point for other&nbsp;&nbsp;encoding type.&nbsp;</p>\r\n\r\n<p>Because of all that, UNICODE sytem is set by Joe Becker from from Xerox,&nbsp;Lee Collins ve Mark Davis from Apple. This system encodes more than 1.000.000 characters.These system has some encoding and decoding&nbsp;systems. Such as:&nbsp;UTF-1, UTF-7, UTF-8, UTF-16 ve UTF-32. But UTF-8 is very useful to encode a lot of characters. You see them from this:&nbsp;<a href="http://www.fileformat.info/info/charset/UTF-8/list.htm">http://www.fileformat.info/info/charset/UTF-8/list.htm</a>&nbsp;.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2:</p>\r\n\r\n<p><code>&gt;&gt;&gt; &quot;&eacute;&quot;.encode(&quot;utf-8&quot;)<br />\r\nb&#39;\\xc3\\xa9&#39;<br />\r\n&gt;&gt;&gt; &quot;&auml;&quot;.encode(&quot;utf-8&quot;)<br />\r\nb&#39;\\xc3\\xa4&#39;<br />\r\n&gt;&gt;&gt; &quot;&ouml;&quot;.encode(&quot;utf-8&quot;)<br />\r\nb&#39;\\xc3\\xb6&#39;<br />\r\n&gt;&gt;&gt; &quot;&ccedil;&quot;.encode(&quot;utf-8&quot;)<br />\r\nb&#39;\\xc3\\xa7&#39;</code></p>\r\n\r\n<hr />\r\n<p><samp>for&nbsp;<code>b&#39;\\xc3\\xa7&#39;</code></samp></p>\r\n\r\n<p><samp><code>b means this is a byte data which is shown with hexadecimal numbers.<br />\r\nx means this number is a hexadecimal(base 16)<br />\r\nc3 and a7 is hexadecimal numbers. and c3 is one byte,&nbsp;and a7 is one byte. The character &quot;&ccedil;&quot; has two bytes capacity.</code><br />\r\nDon&#39;t forget 1 byte equals 8 bits so this character contains 16 bits.</samp></p>\r\n</div>\r\n\r\n<p><strong>Note:</strong> &eacute;, &auml;, &ouml;, &ccedil; are not in ASCII table so you can&#39;t encode them with ASCII. If you try, you will take an error like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><code>Example3:</code></p>\r\n\r\n<p><code>&gt;&gt;&gt; &quot;&auml;&quot;.encode(&quot;ascii&quot;)<br />\r\nTraceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#26&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; &quot;&auml;&quot;.encode(&quot;ascii&quot;)<br />\r\nUnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character &#39;\\xe4&#39; in position 0: ordinal not in range(128)</code></p>\r\n</div>\r\n\r\n<p>&nbsp;<strong>Note:</strong>&nbsp;The different encode systems can have different values for a same character.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4:</p>\r\n\r\n<p><code>&gt;&gt;&gt; &quot;&eacute;&quot;.encode(&quot;utf-16&quot;)<br />\r\nb&#39;\\xff\\xfe\\xe9\\x00&#39;<br />\r\n&gt;&gt;&gt; &quot;&eacute;&quot;.encode(&quot;utf-8&quot;)<br />\r\nb&#39;\\xc3\\xa9&#39;</code></p>\r\n\r\n<hr />\r\n<p><span style="color:null"><tt><code>&quot;&eacute;&quot; has &#39;ff fe e9 00&#39; value for UTF-16. it has four bytes data.&nbsp;which equals 32&nbsp;bits.<br />\r\n&quot;&eacute;&quot; has &#39;c3&nbsp;a9&#39; value for UTF-8. it has two&nbsp;bytes data which equals 16 bits.<br />\r\n&nbsp;for &quot;&eacute;&quot; you should use UTF-8 system because of capacity.</code></tt></span><br />\r\n&gt;&gt;&gt; bin(0xfffee900)<br />\r\n&#39;0b11111111111111101110100100000000&#39;<br />\r\n&gt;&gt;&gt; 0b11111111111111101110100100000000.bit_length()<br />\r\n32</p>\r\n</div>\r\n\r\n<p><strong>Note: </strong>The First 128 characters of UTF-8&nbsp;are same as ASCII whose character&nbsp;is shown in Python as character.</p>\r\n\r\n<p><strong>Example5:</strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;A&quot;.encode(&quot;utf-8&quot;)<br />\r\nb&#39;A&#39;<br />\r\n&gt;&gt;&gt; &quot;A&quot;.encode(&quot;ascii&quot;)<br />\r\nb&#39;A&#39;</p>\r\n\r\n<p>Note: If you want to see encode type, you can use this codes:</p>\r\n\r\n<p><strong>Example6:</strong></p>\r\n\r\n<p>&gt;&gt;&gt;import locale<br />\r\n&gt;&gt;&gt; locale.getpreferredencoding()<br />\r\n&#39;cp1254&#39;</p>\r\n\r\n<p>these codes will show &#39;cp1254&#39; in Windows. It is encoding system in Windows.<br />\r\nthese codes will show &#39;utf-8&#39; in Linux. It is encoding system in UNICODE.&nbsp;</p>\r\n\r\n<p><strong>Note:</strong> If a file is encoded with cp1254, You will not&nbsp;decode with utf-8. You will take the error.</p>\r\n\r\n<p><strong>The&nbsp;useful functions for encoding</strong></p>\r\n\r\n<p><strong>ascii()</strong></p>\r\n\r\n<p>It show and return printable value to us. This result is always string.</p>\r\n\r\n<p><strong>Example7</strong></p>\r\n\r\n<p>&gt;&gt;&gt; a = &quot;python&quot;<br />\r\n&gt;&gt;&gt; ascii(a)<br />\r\n&quot;&#39;python&#39;&quot;<br />\r\n&gt;&gt;&gt; b = ascii(a)<br />\r\n&gt;&gt;&gt; b<br />\r\n&quot;&#39;python&#39;&quot;</p>\r\n\r\n<p><strong>Example8</strong></p>\r\n\r\n<p>&gt;&gt;&gt; list1 = [&quot;John&quot;,&#39;Jack&#39;,&quot;Angelina&quot;]<br />\r\n&gt;&gt;&gt; ascii(list1)<br />\r\n&quot;[&#39;John&#39;, &#39;Jack&#39;, &#39;Angelina&#39;]&quot;</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>If value is not ASCII, it retuens UNICODE value.</p>\r\n\r\n<p><strong>Example9:</strong></p>\r\n\r\n<p>&gt;&gt;&gt; ascii(&quot;Ş&quot;)<br />\r\n&quot;&#39;\\\\u015e&#39;&quot;</p>\r\n\r\n<p><strong>repr()</strong></p>\r\n\r\n<p>repr() function, which It shows and returns printable value to us, is same as ascii() function except about ASCII characters.&nbsp;If value is not ASCII, repr() function&nbsp;returns value as normal. it returns always string.</p>\r\n\r\n<p><strong>Example10</strong></p>\r\n\r\n<p>&gt;&gt;&gt; repr(&quot;Ş&quot;)<br />\r\n&quot;&#39;Ş&#39;&quot;</p>\r\n\r\n<p>&gt;&gt;&gt; ascii(&quot;Ş&quot;)<br />\r\n&quot;&#39;\\\\u015e&#39;&quot;</p>\r\n\r\n<p><strong>Example11:</strong></p>\r\n\r\n<p>&gt;&gt;&gt; repr([&quot;John&quot;,&#39;Jack&#39;,&quot;Angelina&quot;])<br />\r\n&quot;[&#39;John&#39;, &#39;Jack&#39;, &#39;Angelina&#39;]&quot;</p>\r\n\r\n<p><strong>ord()</strong></p>\r\n\r\n<p>It return the Unicode code point for a one-character string.</p>\r\n\r\n<p><strong>Example12:</strong></p>\r\n\r\n<p>&gt;&gt;&gt; ord(&#39;a&#39;)<br />\r\n97<br />\r\n&gt;&gt;&gt; ord(&#39;A&#39;)<br />\r\n65<br />\r\n&gt;&gt;&gt; ord(&#39;Ş&#39;)<br />\r\n350</p>\r\n\r\n<h3><strong>chr()</strong></h3>\r\n\r\n<p>It return a Unicode string of an integer value. It&nbsp;takes exactly one argument.</p>\r\n\r\n<p>&gt;&gt;&gt; chr(65)<br />\r\n&#39;A&#39;<br />\r\n&gt;&gt;&gt; chr(125)<br />\r\n&#39;}&#39;<br />\r\n&gt;&gt;&gt; chr(1256)<br />\r\n&#39;Ө&#39;<br />\r\n&gt;&gt;&gt; chr(256987)<br />\r\n&#39;\\U0003ebdb&#39;<br />\r\n&gt;&gt;&gt; chr(106)<br />\r\n&#39;j&#39;</p>', '<p>In the world there are four main digit systems. they are decimal digit(base 10), binary digit(bit), octal digit(base 8) and hexadecimal digit(base 16). In mathematics generally we use numbers in base 10(decimal digits). But for computer and electronic science&nbsp;binary digit is the most important one.</p>\r\n\r\n<p><strong>decimal digit</strong></p>\r\n\r\n<p>Decimal numbers has 10 different numbers. They are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. Such as, 65, 89, 189...</p>\r\n\r\n<p>In order to convert a&nbsp;number to decimal number, you can use int() function</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><code>Example1:</code></p>\r\n\r\n<p><code>&gt;&gt;&gt; int(&#39;7bc&#39;, 16)<br />\r\n1980</code></p>\r\n</div>\r\n\r\n<p><strong>octal digit</strong></p>\r\n\r\n<p>Octal numbers has eight&nbsp;different numbers. They are 0, 1, 2, 3, 4, 5, 6, 7. Such as: 74, 65, 13, 42</p>\r\n\r\n<p>decimal&nbsp; &nbsp; octal<br />\r\n&nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0<br />\r\n&nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1<br />\r\n&nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2<br />\r\n&nbsp; &nbsp; 3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3<br />\r\n&nbsp; &nbsp; 4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4<br />\r\n&nbsp; &nbsp; 5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5<br />\r\n&nbsp; &nbsp; 6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 6<br />\r\n&nbsp; &nbsp; 7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 7<br />\r\n&nbsp; &nbsp; 8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;10<br />\r\n&nbsp; &nbsp; 9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;11<br />\r\n&nbsp; &nbsp;10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 12<br />\r\n&nbsp; &nbsp;11&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 13<br />\r\n&nbsp; &nbsp;12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 14<br />\r\n&nbsp; &nbsp;13&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 15<br />\r\n&nbsp; &nbsp;14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16<br />\r\n&nbsp; &nbsp;15&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 17<br />\r\n&nbsp; &nbsp;16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 20</p>\r\n\r\n<p>In order to convert a decimal number to octal, you can use <strong>oct()</strong> function</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><code><strong>Example2:</strong></code></p>\r\n\r\n<p><code>&gt;&gt;&gt; oct(80)<br />\r\n&#39;0o<strong>120</strong>&#39;</code></p>\r\n\r\n<p><code>above example&nbsp;o&nbsp;in&nbsp;&#39;0o120&#39;&nbsp;means this is an octal &nbsp;number.</code></p>\r\n</div>\r\n\r\n<p><strong>hexadecimal digit</strong></p>\r\n\r\n<p>hexadecimal numbers has&nbsp;eightteen&nbsp;numbers. They are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,&nbsp;A(10), B(11), C(12), D(13), E(14), F(15)&nbsp;Such as: 56, A54, 89, AB, ...</p>\r\n\r\n<p>&nbsp;dec&nbsp; &nbsp; oct&nbsp; &nbsp; &nbsp;hex</p>\r\n\r\n<p>&nbsp; &nbsp;0 &nbsp; &nbsp; &nbsp; &nbsp;0 &nbsp; &nbsp; &nbsp; &nbsp;0 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;1 &nbsp; &nbsp; &nbsp; &nbsp;1 &nbsp; &nbsp; &nbsp; &nbsp;1 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;2 &nbsp; &nbsp; &nbsp; &nbsp;2 &nbsp; &nbsp; &nbsp; &nbsp;2 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;3 &nbsp; &nbsp; &nbsp; &nbsp;3 &nbsp; &nbsp; &nbsp; &nbsp;3 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;4 &nbsp; &nbsp; &nbsp; &nbsp;4 &nbsp; &nbsp; &nbsp; &nbsp;4 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;5 &nbsp; &nbsp; &nbsp; &nbsp;5 &nbsp; &nbsp; &nbsp; &nbsp;5 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;6 &nbsp; &nbsp; &nbsp; &nbsp;6 &nbsp; &nbsp; &nbsp; &nbsp;6 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;7 &nbsp; &nbsp; &nbsp; &nbsp;7 &nbsp; &nbsp; &nbsp; &nbsp;7 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;8 &nbsp; &nbsp; &nbsp; &nbsp;10 &nbsp; &nbsp; &nbsp;8 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;9 &nbsp; &nbsp; &nbsp; &nbsp;11&nbsp; &nbsp; &nbsp; 9 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;10 &nbsp; &nbsp; &nbsp;12&nbsp; &nbsp; &nbsp; a &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;11 &nbsp; &nbsp; &nbsp;13&nbsp; &nbsp; &nbsp; b &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;12 &nbsp; &nbsp; &nbsp;14&nbsp; &nbsp; &nbsp; c &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;13 &nbsp; &nbsp; &nbsp;15&nbsp; &nbsp; &nbsp; d &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;14 &nbsp; &nbsp; &nbsp;16 &nbsp; &nbsp; &nbsp;e &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;15 &nbsp; &nbsp; &nbsp;17 &nbsp; &nbsp; &nbsp;f &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;16 &nbsp; &nbsp; &nbsp;20 &nbsp; &nbsp; &nbsp;10&nbsp;</p>\r\n\r\n<p>In order to convert a decimal number to hexadecimal, you can use hex() function</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><code><strong>Example3:</strong></code></p>\r\n\r\n<p><code>&gt;&gt;&gt; hex(10)<br />\r\n&#39;0xa&#39;<br />\r\n&gt;&gt;&gt; hex(11)<br />\r\n&#39;0xb&#39;<br />\r\n&gt;&gt;&gt; hex(12)<br />\r\n&#39;0xc&#39;<br />\r\n&gt;&gt;&gt; hex(16)<br />\r\n&#39;0x10&#39;</code></p>\r\n\r\n<p><code>above example&nbsp;x&nbsp;in&nbsp;&#39;0x10&#39;&nbsp;means this is a&nbsp;hexadecimal&nbsp;number.</code></p>\r\n</div>\r\n\r\n<p>&nbsp;<strong>bit: bi</strong>nary digi<strong>t</strong></p>\r\n\r\n<p>In electronic and computer science, about 0 volt means 0&nbsp;number and about 5 volt means 1 number. So because of two number ( 0 and 1), this number system is called binary digit(bit).&nbsp;Actually an electronic device like computer&nbsp;or sensor&nbsp;understand from these numbers&nbsp;what it should do . All other number digits(decimal, hexadecimal, octal) and characters(a, b, c, d, ...) and characters(a, b, c, !,...) are created by binary digit(bit).</p>\r\n\r\n<p>0&nbsp;<strong>&rArr;&nbsp;</strong>1 bit<br />\r\n01&nbsp;<strong>&rArr;</strong>&nbsp;2 bit<br />\r\n111&nbsp;<strong>&rArr;&nbsp;</strong>3 bit</p>\r\n\r\n<p>&nbsp; dec&nbsp; &nbsp; &nbsp; oct&nbsp; &nbsp; &nbsp; &nbsp;hex&nbsp; &nbsp; bit</p>\r\n\r\n<p>&nbsp; &nbsp; 0 &nbsp; &nbsp; &nbsp; &nbsp; 0 &nbsp; &nbsp; &nbsp; &nbsp; 0 &nbsp; &nbsp; &nbsp; &nbsp; 0 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp; 1 &nbsp; &nbsp; &nbsp; &nbsp; 1 &nbsp; &nbsp; &nbsp; &nbsp; 1 &nbsp; &nbsp; &nbsp; &nbsp; 1 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp; 2 &nbsp; &nbsp; &nbsp; &nbsp; 2 &nbsp; &nbsp; &nbsp; &nbsp; 2 &nbsp; &nbsp; &nbsp; &nbsp;10 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp; 3 &nbsp; &nbsp; &nbsp; &nbsp; 3 &nbsp; &nbsp; &nbsp; &nbsp; 3 &nbsp; &nbsp; &nbsp; &nbsp;11 &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp; 4 &nbsp; &nbsp; &nbsp; &nbsp; 4 &nbsp; &nbsp; &nbsp; &nbsp; 4 &nbsp; &nbsp; &nbsp; &nbsp;100 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; 5 &nbsp; &nbsp; &nbsp; &nbsp; 5 &nbsp; &nbsp; &nbsp; &nbsp; 5 &nbsp; &nbsp; &nbsp; &nbsp;101 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; 6 &nbsp; &nbsp; &nbsp; &nbsp; 6 &nbsp; &nbsp; &nbsp; &nbsp; 6 &nbsp; &nbsp; &nbsp; &nbsp;110 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; 7 &nbsp; &nbsp; &nbsp; &nbsp; 7 &nbsp; &nbsp; &nbsp; &nbsp; 7 &nbsp; &nbsp; &nbsp; &nbsp;111 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; 8 &nbsp; &nbsp; &nbsp; &nbsp;10 &nbsp; &nbsp; &nbsp; &nbsp; 8 &nbsp; &nbsp; &nbsp; 1000 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; 9 &nbsp; &nbsp; &nbsp; &nbsp;11 &nbsp; &nbsp; &nbsp; &nbsp; 9 &nbsp; &nbsp; &nbsp; 1001 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp;10 &nbsp; &nbsp; &nbsp; &nbsp;12 &nbsp; &nbsp; &nbsp; &nbsp; a &nbsp; &nbsp; &nbsp; 1010 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp;11 &nbsp; &nbsp; &nbsp; &nbsp;13 &nbsp; &nbsp; &nbsp; &nbsp; b &nbsp; &nbsp; &nbsp; 1011 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp;12 &nbsp; &nbsp; &nbsp; &nbsp;14 &nbsp; &nbsp; &nbsp; &nbsp; c &nbsp; &nbsp; &nbsp; 1100 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp;13 &nbsp; &nbsp; &nbsp; &nbsp;15 &nbsp; &nbsp; &nbsp; &nbsp; d &nbsp; &nbsp; &nbsp; 1101 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp;14 &nbsp; &nbsp; &nbsp; &nbsp;16 &nbsp; &nbsp; &nbsp; &nbsp; e &nbsp; &nbsp; &nbsp; 1110 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp;15 &nbsp; &nbsp; &nbsp; &nbsp;17 &nbsp; &nbsp; &nbsp; &nbsp; f &nbsp; &nbsp; &nbsp; 1111 &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp;16 &nbsp; &nbsp; &nbsp; &nbsp;20 &nbsp; &nbsp; &nbsp; &nbsp;10 &nbsp; &nbsp; 10000</p>\r\n\r\n<p><strong>Converting a digit number another one with format method</strong></p>\r\n\r\n<p><strong>b</strong></p>\r\n\r\n<p>It is same as bin() function</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><code>&gt;&gt;&gt; &#39;{:b}&#39;.format(12)<br />\r\n&#39;1100&#39;</code></p>\r\n</div>\r\n\r\n<p><strong>x</strong></p>\r\n\r\n<p>It is same as hex() function</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>&gt;&gt;&gt; &#39;{:x}&#39;.format(1980)<br />\r\n&#39;7bc&#39;</code></div>\r\n\r\n<p><strong>o</strong></p>\r\n\r\n<p>It is same as oct() function</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>&gt;&gt;&gt; &#39;{:o}&#39;.format(1980)<br />\r\n&#39;3674&#39;</code><br />\r\n&nbsp;</div>\r\n\r\n<p><strong>Note: </strong>Hexadecimal numbers are more useful than other ones because it has less numbers.</p>\r\n\r\n<p>Such as: for decimal 15 numbers</p>\r\n\r\n<p>binary&nbsp;1111<br />\r\noctal&nbsp; &nbsp; 17<br />\r\nhex&nbsp; &nbsp; &nbsp; f</p>', '<p><strong>lambda</strong></p>\r\n\r\n<p>lambdas are used to create anonymous functions. They have no statement and name like def function.&nbsp;</p>\r\n\r\n<div>\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1</p>\r\n\r\n<p><tt>def plus(parameter1, parameter2):<br />\r\n&nbsp; &nbsp; return parameter1 + parameter2</tt></p>\r\n\r\n<p><tt>a = lambda parameter1, parameter2: parameter1 + parameter2</tt></p>\r\n\r\n<hr />\r\n<p>plus function equals the lambda function has no return statement and name. You can call them respectively plus(5, 10) and a(5, 10)&nbsp;</p>\r\n</div>\r\n\r\n<p>&nbsp;You can create without parameters like this</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2:</p>\r\n\r\n<p><tt>lambda : print(&quot;Hello World&quot;)</tt></p>\r\n</div>\r\n</div>\r\n\r\n<p>Some built-in functions have key parameter which can be used with lambda function. Such as: map(func, *iterables) --&gt; map object function.</p>\r\n\r\n<p>Now lets try to use lambda with map function. Our aim is plus every number in a list with 5.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3:</p>\r\n\r\n<p><tt>our_list = [5, 7, 9, 11, 13]<br />\r\nresult = map(lambda x : x +5, our_list)<br />\r\nprint(*result)</tt></p>\r\n\r\n<p><tt>10 12 14 16 18</tt></p>\r\n\r\n<hr />\r\n<p>map(func, *iterables)&nbsp;has func and iterables parameters. func =&nbsp;lambda x : x +5 and iterables = our_list</p>\r\n</div>\r\n\r\n<p><strong>Recursive Function</strong></p>\r\n\r\n<p>Actually recursive&nbsp;function is same as normal def function. But this type function is repeatedly called by itself. Now lets try to show like this:</p>\r\n\r\n<p>abcdefgh<br />\r\nbcdefgh<br />\r\ncdefgh<br />\r\ndefgh<br />\r\nefgh<br />\r\nfgh<br />\r\ngh<br />\r\nh</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4:</p>\r\n\r\n<p><tt>def truncate(string):<br />\r\n&nbsp; &nbsp; if len(string) &lt; 1:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; return string<br />\r\n&nbsp; &nbsp; else:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(string)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; return truncate(string[1:])<br />\r\nprint(truncate(&quot;abcdefgh&quot;))</tt></p>\r\n\r\n<hr />\r\n<p>with &nbsp;<tt>return truncate(string[1:])</tt>&nbsp;expression&nbsp;the&nbsp;truncate function is&nbsp; repeatedly called by itself until&nbsp;&nbsp;<tt>if len(string) &lt; 1 that is deep point to stop.&nbsp;</tt></p>\r\n\r\n<p><span style="font-family:monospace">in first calling the argument is &quot;abcdefgh&quot;,&nbsp;</span><tt>print(</tt><span style="font-family:monospace">&quot;abcdefgh&quot;</span><tt>), return truncate(&quot;bcdefgh&quot;) is actually second calling and so an until&nbsp;if len(&#39;&#39;) &lt; 1</tt></p>\r\n</div>\r\n\r\n<p><strong>Note:</strong> recursion deep point is very important to not take an error.&nbsp; Because there is a limit for recursion deep. You can learn this with this command:&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt;import sys<br />\r\n&gt;&gt;&gt;sys.getrecursionlimit()<br />\r\n1000</tt></p>\r\n</div>\r\n\r\n<p><strong>Note:</strong> The recursive functions have return the truncated data again when recursion deep point&nbsp;is reached.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5:</p>\r\n\r\n<p><tt>def truncate(string):<br />\r\n&nbsp; &nbsp; if len(string) &lt; 1:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; return string<br />\r\n&nbsp; &nbsp; else:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(string)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; truncate(string[1:])<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(string)<br />\r\ntruncate(&quot;abcdefgh&quot;)&nbsp;</tt></p>\r\n\r\n<hr />\r\n<p>Now we have updated Example4 and we have removed return statement and added:<tt>&nbsp; &nbsp; &nbsp; &nbsp;<br />\r\nprint(string)<br />\r\ntruncate(string[1:])<br />\r\nprint(string)</tt></p>\r\n\r\n<p><tt>&quot;h&quot; is deep point for this recursive function. when this deep point&nbsp;is reached, th&nbsp;recursive function returned truncated&nbsp;elements from the last&nbsp;element&nbsp;to first element.</tt></p>\r\n\r\n<hr />\r\n<p><tt>abcdefgh<br />\r\nbcdefgh<br />\r\ncdefgh<br />\r\ndefgh<br />\r\nefgh<br />\r\nfgh<br />\r\ngh<br />\r\nh<br />\r\nh<br />\r\ngh<br />\r\nfgh<br />\r\nefgh<br />\r\ndefgh<br />\r\ncdefgh<br />\r\nbcdefgh<br />\r\nabcdefgh</tt></p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example6:</p>\r\n\r\n<p>def truncate(string):<br />\r\n&nbsp; &nbsp; if len(string) &lt; 1:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; return string<br />\r\n&nbsp; &nbsp; else:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(string)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; truncate(string[2:])<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(string)<br />\r\ntruncate(&quot;abcdefgh&quot;)</p>\r\n\r\n<hr />\r\n<p>In this example we updated Example5 we changed&nbsp; truncate(string[1:]) to&nbsp; truncate(string[2:])</p>\r\n\r\n<hr />\r\n<p>abcdefgh<br />\r\ncdefgh<br />\r\nefgh<br />\r\ngh<br />\r\ngh<br />\r\nefgh<br />\r\ncdefgh<br />\r\nabcdefgh</p>\r\n</div>', '<p>The Modules are very important topic for Python. Until now on the previous lessons we have already seen some modul like os, sys, locale...</p>\r\n\r\n<p><strong>What is a module?</strong></p>\r\n\r\n<p>The Module is a tool which has some attributes and methods.&nbsp;They are very useful to do beneficial things or see some necessary datas. Additionally they are reusable again and again from anywhere. In Python there is two type modules.</p>\r\n\r\n<p><strong>1.</strong> Our modules</p>\r\n\r\n<p><strong>2.&nbsp;</strong>Built-in modules</p>\r\n\r\n<p>They have two types, too</p>\r\n\r\n<p><strong>2.1</strong> Python developer&#39;s&nbsp;modules: os, sys, locale, random, math, ...</p>\r\n\r\n<p>You can reach these modules list&nbsp;&nbsp;from&nbsp;<a href="https://docs.python.org/3/library/">https://docs.python.org/3/library/</a></p>\r\n\r\n<p><strong>2.2</strong> The modules of other programmers: django, kivy, Cx_Freeze, ...</p>\r\n\r\n<p>You can reach these modules list&nbsp;&nbsp;from&nbsp;<a href="http://https://pypi.python.org/pypi">https://pypi.python.org/pypi</a></p>\r\n\r\n<p><strong>The import statement</strong></p>\r\n\r\n<p>In order to use modules, we should import it&nbsp;to our file, or Python Shell. You can&#39;t use directly like built-in function so you need the import statement.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import os</tt></p>\r\n</div>\r\n\r\n<p>Now you can list the attributes and methods of os(operating system) module like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2:&nbsp;</p>\r\n\r\n<p><tt>&gt;&gt;&gt; dir(os)</tt></p>\r\n</div>\r\n\r\n<p>To show the name of the operating system, you can use name attribute of os module like this: os.name</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.name<br />\r\n&#39;nt&#39;</tt></p>\r\n\r\n<hr />\r\n<p>nt means Winsows, if you use Linux or Mac, your result will be &#39;posix&#39;</p>\r\n</div>\r\n\r\n<p>Importing a module only one times is enough to use again and again.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; os.name<br />\r\n&#39;nt&#39;<br />\r\n&gt;&gt;&gt; os.name<br />\r\n&#39;nt&#39;</tt></p>\r\n</div>\r\n\r\n<p>You can use mkdir() method of os module to cretae a&nbsp;&nbsp;directory like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5:</p>\r\n\r\n<p><tt>os.makedirs(&#39;my_directory&#39;)</tt></p>\r\n\r\n<hr />\r\n<p><tt>my_directory is created in current directory of Python</tt></p>\r\n</div>\r\n\r\n<p>If you want to learn the current directory,&nbsp;&nbsp;you can use&nbsp;getcwd() methods of os module like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example6:</p>\r\n\r\n<p><tt>os.getcwd()</tt></p>\r\n\r\n<p>&#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;</p>\r\n\r\n<hr />\r\n<p>Above Example5 my_directory was created in&nbsp;&#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39; directory.</p>\r\n</div>\r\n\r\n<p><strong>Defining Our modules</strong></p>\r\n\r\n<p>Actually every Python file is a module. Such as example.py, ...On the other hand, the all modules have __file__ atribute. which show source code of a module. Lets see source code of os module.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example11</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.__file__<br />\r\n&#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\lib\\\\os.py&#39;</tt></p>\r\n\r\n<hr />\r\n<p>If you go to the above directory and then open os.py file, you will see that os module is actually a python file which has python codes.&nbsp;</p>\r\n</div>\r\n\r\n<p>Now we can cretae our module like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>example.py</p>\r\n\r\n<p><tt>def say():<br />\r\n&nbsp; &nbsp; print(&quot;Hello World&quot;)<br />\r\n<br />\r\njob = &quot;computer engineer&quot;</tt></p>\r\n</div>\r\n\r\n<p>Now we can import our example module and then call our say method&nbsp; and job attribute in Python Shell in Example12.<br />\r\nNote: Directory of Python Shel must be&nbsp;same as directory of example.py which is in&nbsp;&#39;C:\\\\Users\\\\sahint&uuml;rk\\\\Desktop&#39;. You can check directory of Python Shell like this:</p>\r\n\r\n<p><tt>&gt;&gt;&gt;import os<br />\r\n&gt;&gt;&gt;os.getcwd()</tt><br />\r\n&#39;C:\\\\Users\\\\sahint&uuml;rk\\\\Desktop&#39;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example12</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import example<br />\r\n&gt;&gt;&gt; example.say()<br />\r\nHello World<br />\r\n&gt;&gt;&gt; example.job<br />\r\n&#39;computer engineer&#39;</tt></p>\r\n\r\n<hr />\r\n<p><em>example.py</em> is our full file name<br />\r\n<em>example</em> is our module name<br />\r\n<em>say</em> is method&nbsp;of example module<br />\r\n<em>job</em> is atrribute of example module</p>\r\n</div>\r\n\r\n<p>You can check if example is a module or not like using&nbsp; __file__ attribute without doing anything:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; example.__file__</tt></p>\r\n\r\n<p>&#39;C:\\\\Users\\\\sahint&uuml;rk\\\\Desktop\\\\example.py&#39;</p>\r\n</div>\r\n\r\n<p><strong>Paths of the modules</strong></p>\r\n\r\n<p>The ready modules of Python&#39;s can be imported from any directory but our modules need being in the same directory rule. How can Python do that? Answer is path attribute&nbsp;in sys module. This attribute show directories to Python for looiking at inside.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example13:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import sys<br />\r\n&gt;&gt;&gt; sys.path</tt><br />\r\n[&#39;&#39;, &#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\Lib\\\\idlelib&#39;, &#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\python36.zip&#39;, &#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\DLLs&#39;, &#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\lib&#39;, &#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;, &#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\lib\\\\site-packages&#39;]</p>\r\n</div>\r\n\r\n<p>If you want to import our modules from anywhere, we have two options:</p>\r\n\r\n<p><strong>1.</strong> saving our module file(example.py) to above one of the directory(sys.path). Common directory is&nbsp;&#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\lib\\\\site-packages</p>\r\n\r\n<p><strong>2.</strong> adding&nbsp;our directory path(C:\\Users\\username\\Desktop) to sys.path</p>\r\n\r\n<p>we see that output of sys.path is a list. So we can use append method of lists&nbsp;for like desktop(example.py) directory like this :&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example14: example.py is in desktop&nbsp;</p>\r\n\r\n<p>&gt;&gt;&gt; sys.path.append(r&quot;C:\\Users\\username\\Desktop&quot;)<br />\r\n&gt;&gt;&gt;sys.path<br />\r\n[&#39;&#39;, &#39;C:\\\\Users\\\\sahint&uuml;rk\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\Lib\\\\idlelib&#39;, &#39;C:\\\\Users\\\\sahint&uuml;rk\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\python36.zip&#39;, &#39;C:\\\\Users\\\\sahint&uuml;rk\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\DLLs&#39;, &#39;C:\\\\Users\\\\sahint&uuml;rk\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\lib&#39;, &#39;C:\\\\Users\\\\sahint&uuml;rk\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;, &#39;C:\\\\Users\\\\sahint&uuml;rk\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\lib\\\\site-packages&#39;, <strong>&#39;C:\\\\Users\\\\sahint&uuml;rk\\\\Desktop&#39;</strong>]</p>\r\n\r\n<hr />\r\n<p>Now we call our module from anywhere.</p>\r\n\r\n<p>&gt;&gt;&gt; import example<br />\r\n&gt;&gt;&gt; example.say()<br />\r\nHello World</p>\r\n</div>\r\n\r\n<p><strong>The modules of the other programmers(Third party applications)</strong></p>\r\n\r\n<p>This types modules aren&#39;t created Python&#39;s developer. They are created by other computer programmers. But you can use these modules like Python&#39;s ready modules. The only thing is that installing these modules into Python.</p>\r\n\r\n<p>If you want to install these type modules , you should use these command&nbsp;&quot;pip3 install mod&uuml;le_name&quot; in terminal command line not in Python Shell.</p>\r\n\r\n<p>Assume that you want to install Django module, you should these command: pip3 install django. And then otomaticaly it is installed into Python.&nbsp;</p>', '<p>All modules have&nbsp;&#39;__doc__&#39;, &#39;__package__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__spec__&#39; attributes. Lets see them.</p>\r\n\r\n<p><strong>__doc__</strong></p>\r\n\r\n<p>It shows a documentary about its module.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 1</p>\r\n\r\n<p>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; os.__doc__<br />\r\n&quot;OS routines for NT or Posix depending on what system we&#39;re on.\\n\\nThis exports:\\n &nbsp;- all functions from posix or nt, e.g. unlink, stat, etc.\\n &nbsp;- os.path is either posixpath or ntpath\\n &nbsp;- os.name is either &#39;posix&#39; or &#39;nt&#39;\\n &nbsp;- os.curdir is a string representing the current directory (always &#39;.&#39;)\\n &nbsp;- os.pardir is a string representing the parent directory (always &#39;..&#39;)\\n &nbsp;- os.sep is the (or a most common) pathname separator (&#39;/&#39; or &#39;\\\\\\\\&#39;)\\n &nbsp;- os.extsep is the extension separator (always &#39;.&#39;)\\n &nbsp;- os.altsep is the alternate pathname separator (None or &#39;/&#39;)\\n &nbsp;- os.pathsep is the component separator used in $PATH etc\\n &nbsp;- os.linesep is the line separator in text files (&#39;\\\\r&#39; or &#39;\\\\n&#39; or &#39;\\\\r\\\\n&#39;)\\n &nbsp;- os.defpath is the default search path for executables\\n &nbsp;- os.devnull is the file path of the null device (&#39;/dev/null&#39;, etc.)\\n\\nPrograms that import and use &#39;os&#39; stand a better chance of being\\nportable between different platforms. &nbsp;Of course, they must then\\nonly use functions that are defined by all platforms (e.g., unlink\\nand opendir), and leave all pathname manipulation to os.path\\n(e.g., split and join).\\n&quot;</p>\r\n\r\n<p>If you look at the os.py file, you will see above strings in the beginning of the os.py</p>\r\n</div>\r\n\r\n<hr />\r\n<p><strong>&nbsp;__name__</strong></p>\r\n\r\n<p>This attribute can have two value. One of them is name of the module like &#39;os&#39; or&nbsp;&quot;__main__&quot;</p>\r\n\r\n<p>You know we have example.py. If you independently run examply.py alone, __name__ will be &quot;__main__ &quot;value. But if you try to run from Python Shell, you will see &quot;example&quot; value. You can check it pirnt(__name__) inside the example.py.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 2</p>\r\n\r\n<p>&gt;&gt;&gt; import example<br />\r\nexample</p>\r\n\r\n<hr />\r\n<p>If you try from Python IDLE or terminal command line like:&nbsp;python deneme.py you will see &quot;__main__ &quot;value.</p>\r\n</div>\r\n\r\n<p><strong>__loader__</strong></p>\r\n\r\n<p>this attribute has some methods which are not necessary to use for us. You can see list of them like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 3</p>\r\n\r\n<p>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; dir(os.__loader__)<br />\r\n[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_cache_bytecode&#39;, &#39;create_module&#39;, &#39;exec_module&#39;, &#39;get_code&#39;, &#39;get_data&#39;, &#39;get_filename&#39;, &#39;get_source&#39;, &#39;is_package&#39;, &#39;load_module&#39;, &#39;name&#39;, &#39;path&#39;, &#39;path_mtime&#39;, &#39;path_stats&#39;, &#39;set_data&#39;, &#39;source_to_code&#39;]</p>\r\n</div>\r\n\r\n<p>You can see source code of example module&nbsp;or os module like this</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 4</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import example<br />\r\n&gt;&gt;&gt; example.__loader__.get_source(&quot;example&quot;)</tt><br />\r\n&#39;__all__ = []\\ndef say():\\n &nbsp; &nbsp;print(&quot;Hello World &quot;)\\n\\ndef __say():\\n &nbsp; &nbsp;print(&quot;Hello Mars&quot;)\\n\\ndef _say():\\n &nbsp; &nbsp;print(&quot;Hello Venus&quot;)\\n\\njob = &quot;computer engineer&quot;\\n\\nprint(__name__)\\n&#39;</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; os.__loader__.get_source(&quot;os&quot;)</tt></p>\r\n</div>\r\n\r\n<p><strong>__spec__</strong></p>\r\n\r\n<p>This attribute give some information about a&nbsp;module such as: name, path.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 5</p>\r\n\r\n<p>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; os.__spec__<br />\r\nModuleSpec(name=&#39;os&#39;, loader=&lt;_frozen_importlib_external.SourceFileLoader object at 0x012CACF0&gt;, origin=&#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\lib\\\\os.py&#39;)</p>\r\n</div>\r\n\r\n<p><strong>__package_</strong></p>\r\n\r\n<p>This atrribute show us wheter a module is a package or not. We have not yet see packages. Therefore we will see it next lessons. Module&nbsp;and Package is not same thing but similar. Third party app django is package but os is a module.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 6</p>\r\n\r\n<p>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; os.__package__<br />\r\n&#39;&#39;</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt; import django<br />\r\n&gt;&gt;&gt; django.__package__<br />\r\n&#39;django&#39;</p>\r\n\r\n<hr />\r\n<p>If django is not installed, you will take an importerror.</p>\r\n</div>', '<p><strong>The import statement</strong></p>\r\n\r\n<p>In order to use modules, we should import it&nbsp;to our file, or Python Shell. You can&#39;t use directly like built-in function so you need the import statement.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import os</tt></p>\r\n</div>\r\n\r\n<p>Now you can list the attributes and methods of os(operating system) module like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2:&nbsp;</p>\r\n\r\n<p><tt>&gt;&gt;&gt; dir(os)</tt></p>\r\n</div>\r\n\r\n<p>To show the name of the operating system, you can use name attribute of os module like this: os.name</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.name<br />\r\n&#39;nt&#39;</tt></p>\r\n\r\n<hr />\r\n<p>nt means Winsows, if you use Linux or Mac, your result will be &#39;posix&#39;</p>\r\n</div>\r\n\r\n<p>Importing a module only one times is enough to use again and again.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; os.name<br />\r\n&#39;nt&#39;<br />\r\n&gt;&gt;&gt; os.name<br />\r\n&#39;nt&#39;</tt></p>\r\n</div>\r\n\r\n<p>You can use mkdir() method of os module to cretae a&nbsp;&nbsp;directory like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5:</p>\r\n\r\n<p><tt>os.makedirs(&#39;my_directory&#39;)</tt></p>\r\n\r\n<hr />\r\n<p><tt>my_directory is created in current directory of Python</tt></p>\r\n</div>\r\n\r\n<p>If you want to learn the current directory,&nbsp;&nbsp;you can use&nbsp;getcwd() methods of os module like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example6:</p>\r\n\r\n<p><tt>os.getcwd()</tt></p>\r\n\r\n<p>&#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;</p>\r\n\r\n<hr />\r\n<p>Above Example5 my_directory was created in&nbsp;&#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39; directory.</p>\r\n</div>\r\n\r\n<p><strong>Importing types of a module</strong></p>\r\n\r\n<p>Python has so many different type importing ways. All this ways will be&nbsp;on &quot;os&quot; module to understand easily.&nbsp;</p>\r\n\r\n<p><strong>1. import os</strong></p>\r\n\r\n<p>we have already learn this.</p>\r\n\r\n<p><strong>2. import os as opsys</strong></p>\r\n\r\n<p>You&nbsp;can prefer opsys&nbsp;to os because of some reasons. You can&#39;t use os again.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example7:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import os as opsys<br />\r\n&gt;&gt;&gt; opsys.name<br />\r\n&#39;nt&#39;<br />\r\n&gt;&gt;&gt; os.name<br />\r\n&#39;nt&#39;<br />\r\n&gt;&gt;&gt; import webbrowser as web</tt></p>\r\n</div>\r\n\r\n<p><strong>3. from os import name,&nbsp;getcwd</strong></p>\r\n\r\n<p>If you want to reach directly name attribute, you can prefer this way.&nbsp; You can&#39;t use directly os. If you try you will take an error.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example8:</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; from os import name<br />\r\n&gt;&gt;&gt; name<br />\r\n&#39;nt&#39;<br />\r\n&gt;&gt;&gt; getcwd()<br />\r\n&#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;<br />\r\n&gt;&gt;&gt; os.name<br />\r\nTraceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#3&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; os.name<br />\r\nNameError: name &#39;os&#39; is not defined</tt></p>\r\n</div>\r\n\r\n<p><strong>4. from os import getcwd as cwd</strong></p>\r\n\r\n<p>If you prefer cwd() to getcwd(), you can use this way. But You can&#39;t use getcwd again.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 9:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; from os import getcwd as cwd<br />\r\n&gt;&gt;&gt; cwd()<br />\r\n&#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;<br />\r\n&gt;&gt;&gt; getcwd()<br />\r\nTraceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#4&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; getcwd()<br />\r\nNameError: name &#39;getcwd&#39; is not defined</tt></p>\r\n</div>\r\n\r\n<p><strong>5. from os import *</strong></p>\r\n\r\n<p>If you want to import all attributes and methods of os module, you can use this way. But it is not advicable because of the a lot of unnecessary attributes and methods.&nbsp;&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example10:</p>\r\n\r\n<p>&gt;&gt;&gt; from os import *<br />\r\n&gt;&gt;&gt; name<br />\r\n&#39;nt&#39;<br />\r\n&gt;&gt;&gt; getcwd()<br />\r\n&#39;C:\\\\Users\\\\Username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;</p>\r\n</div>\r\n\r\n<p><strong>Relationship between dir() function and the modules</strong></p>\r\n\r\n<p>Now we see the features with helping our example module. Now we have changed example.py like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><strong>#example.py</strong></p>\r\n\r\n<p>def say1():<br />\r\n&nbsp; &nbsp; print(&quot;Hello World &quot;)</p>\r\n\r\n<p>def __say():<br />\r\n&nbsp; &nbsp; print(&quot;Hello Mars&quot;)</p>\r\n\r\n<p>def _say():<br />\r\n&nbsp; &nbsp; print(&quot;Hello Venus&quot;)</p>\r\n\r\n<p>job = &quot;computer engineer&quot;</p>\r\n</div>\r\n\r\n<p>Lets look at our attributes and methods in example module with helping dir() function.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; import example<br />\r\n&gt;&gt;&gt; dir(example)</tt><br />\r\n[&#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, <strong>&#39;__say&#39;,</strong> &#39;__spec__&#39;, <strong>&#39;_say&#39;, &#39;job&#39;, &#39;say&#39;</strong>]</p>\r\n\r\n<hr />\r\n<p>say, __say, _say and job are constructed by us but other atributes or methods are otomatically constructed by Python. We will learn all of them next lessons.&nbsp;</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from example import *<br />\r\n&gt;&gt;&gt; dir()</tt><br />\r\n[&#39;__annotations__&#39;, &#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, <strong>&#39;job&#39;,</strong> <strong>&#39;say&#39;</strong>]</p>\r\n\r\n<hr />\r\n<p>when we import example module as&nbsp;<tt>from example import *, we couldn&#39;t see with starting (_) character attribute and methods</tt></p>\r\n</div>\r\n\r\n<p><strong>__all__ list</strong></p>\r\n\r\n<p>If you want to control methods which are showed or not, you can use <strong>__all__</strong> variable in the beginning&nbsp;example.py</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>__all__ = []<br />\r\ndef say():<br />\r\n&nbsp; &nbsp; print(&quot;Hello World &quot;)</tt></p>\r\n\r\n<p><tt>def __say():<br />\r\n&nbsp; &nbsp; print(&quot;Hello Mars&quot;)</tt></p>\r\n\r\n<p><tt>def _say():<br />\r\n&nbsp; &nbsp; print(&quot;Hello Venus&quot;)</tt></p>\r\n\r\n<p><tt>job = &quot;computer engineer&quot;</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from example import *<br />\r\n&gt;&gt;&gt; dir()<br />\r\n[&#39;__annotations__&#39;, &#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;]</tt></p>\r\n\r\n<hr />\r\n<p>We couldn&#39;t see say method because of&nbsp;<tt>__all__ = [] list which is only used for&nbsp;<strong>from example import * .&nbsp;</strong>So __all__ is not used for other import types like import example</tt></p>\r\n</div>', '<p>A programmer should write code which is easy to understand. So the programmers need&nbsp;break the program into multiple smaller pieces so to solve a problem, fix a bug, or add a new feature.&nbsp; In order to this,&nbsp;they have to&nbsp;learn object-oriented programming which provide us with these small pieces.&nbsp;</p>\r\n\r\n<p><strong>Classes</strong></p>\r\n\r\n<p>The term &quot;class&quot; is fundemantal&nbsp;of object-oriented programming. So we should learn this well. Actually the classes are data type like strings, lists, tuples. &quot;Hello World&quot;, [1, 2, 3] are objects.</p>\r\n\r\n<p>The difference of the classes is being able to have a lot of different data types like strings, lists, tuples, attributes, methods...&nbsp;&nbsp; at the same time. You can manipulate all of this data types.</p>\r\n\r\n<p>The aim of a&nbsp;class&nbsp;is creating&nbsp;the&nbsp;object. So What is the object? Such as the flowers a class and the rose is an object&nbsp;of class flowers or Workers can be a class, engineer, workman can be object of them.</p>\r\n\r\n<p><strong>Defining classes</strong></p>\r\n\r\n<p>To define a class, It is used &quot;class&quot; statement.&nbsp;</p>\r\n\r\n<p>For empty class:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 1</p>\r\n\r\n<p><tt>class Flower:<br />\r\n&nbsp; &nbsp; pass</tt></p>\r\n\r\n<hr />\r\n<p><tt>class Flower():<br />\r\n&nbsp; &nbsp; pass</tt></p>\r\n</div>\r\n\r\n<p><strong>Class attributes</strong></p>\r\n\r\n<p>&nbsp;you can some attributes&nbsp;into class like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 2</p>\r\n\r\n<p><tt>class Car:<br />\r\n&nbsp; &nbsp; name = &quot;&quot;<br />\r\n&nbsp; &nbsp; models = []</tt></p>\r\n\r\n<hr />\r\n<p>name and models&nbsp;are called class attribute</p>\r\n</div>\r\n\r\n<p>when a Python file&nbsp;run , the class attributes&nbsp;run in the file, unlike functions.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 3</p>\r\n\r\n<p><strong>example3.py</strong><br />\r\nclass Car:<br />\r\n&nbsp; &nbsp; name = &quot;&quot;<br />\r\n&nbsp; &nbsp; models = []<br />\r\n&nbsp; &nbsp; print(&quot;Hello World&quot;)<br />\r\n&nbsp; &nbsp; print(models)</p>\r\n\r\n<hr />\r\n<p>Hello World<br />\r\n[]</p>\r\n\r\n<hr />\r\n<p>The codes in Car class work without calling, unlike functions. You can check this with import statement, too.</p>\r\n\r\n<p>&gt;&gt;&gt;import example3<br />\r\nHello World<br />\r\n[]</p>\r\n</div>\r\n\r\n<p><strong>&nbsp;Accessing&nbsp;class attribute&nbsp;</strong></p>\r\n\r\n<p>You can directly call class attributes with helping like this: class_name.attribute_name</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 4</p>\r\n\r\n<p>&gt;&gt;&gt; Car.name<br />\r\n&#39;&#39;<br />\r\n&gt;&gt;&gt; Car.models<br />\r\n[]</p>\r\n</div>\r\n\r\n<p><strong>Instantiation of the classes</strong></p>\r\n\r\n<p>If we want to a class that is useful, we should create instance&nbsp;of the class like this.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 5</p>\r\n\r\n<p><tt>&gt;&gt;&gt; mercedes = Car()<br />\r\n&gt;&gt;&gt; toyota = Car()</tt></p>\r\n\r\n<hr />\r\n<p>mercedes and toyota are instance of Car class. They have all models of it.&nbsp;<br />\r\n<tt>Car() means instantiation</tt></p>\r\n</div>\r\n\r\n<p>You can reach all attributes of Car class using these instance(mercedes and toyota)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 7</p>\r\n\r\n<p>&gt;&gt;&gt; mercedes.models<br />\r\n[]<br />\r\n&gt;&gt;&gt; mercedes.name<br />\r\n&#39;&#39;<br />\r\n&gt;&gt;&gt; mercedes.model<br />\r\n&#39;&#39;</p>\r\n</div>\r\n\r\n<p>You can see attributes and methods of a clas using dir function like this: dir(Car) or dir(mercedes)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example 8</p>\r\n\r\n<p>&gt;&gt;&gt; dir(Car)</p>\r\n\r\n<hr />\r\n<p>[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, <strong>&#39;models&#39;, &#39;model&#39;, &#39;name&#39;</strong>]</p>\r\n</div>\r\n\r\n<p>&nbsp;The classes are generally used after importing</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example9</p>\r\n\r\n<p><strong>example9.py</strong><br />\r\n<tt>class Car:<br />\r\n&nbsp; &nbsp; name = &quot;&quot;<br />\r\n&nbsp; &nbsp; models = []</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import example9<br />\r\n&gt;&gt;&gt; mercedes = example9.Car()<br />\r\n&gt;&gt;&gt; mercedes.name<br />\r\n&#39;&#39;<br />\r\n&gt;&gt;&gt; mercedes.models<br />\r\n[]<br />\r\n&gt;&gt;&gt; dir(mercedes)<br />\r\n[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, <strong>&#39;models&#39;, &#39;name&#39;</strong>]</tt></p>\r\n\r\n<hr />\r\n<p>for this example:</p>\r\n\r\n<p>example9.py is the&nbsp;Python file<br />\r\nexample9 is the module<br />\r\nCar is the class<br />\r\nmercedes is the instance of the Car class<br />\r\nname and models&nbsp;are class attributes</p>\r\n\r\n<hr />\r\n<p>You can&#39;t update&nbsp;the class attributes via instances if the class attributes are immutable like strings-&nbsp;tuples and numbers. Lets see blelow, please.</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt; mercedes.name = &quot;Mercedes&quot;<br />\r\n&gt;&gt;&gt; mercedes.name<br />\r\n&#39;Mercedes&#39;<br />\r\n&gt;&gt;&gt; example9.Car.name<br />\r\n&#39;&#39;</p>\r\n\r\n<hr />\r\n<p>You can&nbsp;update&nbsp;the class attributes&nbsp;via instances if the class attributes are mutable like list, dictionaries and sets. lets see blow, please.</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt; mercedes.models.append(&quot;A3&quot;)<br />\r\n&gt;&gt;&gt; mercedes.models<br />\r\n[&#39;A3&#39;]<br />\r\n&gt;&gt;&gt; example9.Car.models<br />\r\n[&#39;A3&#39;]</p>\r\n</div>\r\n\r\n<p><strong>&nbsp;Instance attribute</strong></p>\r\n\r\n<p>So far we have learnt the class attribute and now we will see instance attribute. In order to this, we need<strong> __init__ </strong>method of class</p>\r\n\r\n<p><strong>__init__ method</strong></p>\r\n\r\n<p>This method gives us&nbsp;to set up some default or initial values for the&nbsp;classes. It is used with self parameter.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example10</p>\r\n\r\n<p><strong>example10.py</strong><br />\r\n<tt>class Car:<br />\r\n&nbsp; &nbsp; cars = []</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = &quot;&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.models = []</tt></p>\r\n\r\n<hr />\r\n<p>Now above we obtain the instance&nbsp;attributes which are self.name and self.models via __init__ method. here self keeps instances&#39;&nbsp;name such as: toyota or mercedes.<br />\r\ndon&#39;t forget cars is class attribute</p>\r\n\r\n<hr />\r\n<p>when a example10.py is run or example module is imported&nbsp; , the instance&nbsp;attribute do not&nbsp;run in the file, unlike class attribute. Lets check it below&nbsp;</p>\r\n\r\n<hr />\r\n<p><tt><strong>example10.py</strong><br />\r\nclass Car:<br />\r\n&nbsp; &nbsp; cars = []<br />\r\n&nbsp; &nbsp; print(&quot;Here is the class attribute region &quot;)<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = &quot;&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.models = []<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;Here is the instance attribute region &quot;)</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import example10</tt><br />\r\nHere is the class attribute region&nbsp;</p>\r\n\r\n<hr />\r\n<p>In order to run instance attribute, you should create instance or instantiation. Look at below codes for example10.py</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import example10</tt><br />\r\nHere is the class attribute region&nbsp;<br />\r\n<tt>&gt;&gt;&gt; example10.Car()</tt><br />\r\nHere is the instance attribute region<br />\r\n&gt;&gt;&gt; toyota = example10.Car()<br />\r\nHere is the instance attribute region&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Accessing the instance attributes</strong></p>\r\n\r\n<p>In order to access the instance attribute, you need instantiation which can be done with two ways.&nbsp;Such as: for Car class:</p>\r\n\r\n<p>1. <tt>Cars()</tt>&nbsp;&rArr;&nbsp;instantiation&nbsp;&rArr;&nbsp;<tt>Cars().name</tt> and <tt>Cars().models</tt></p>\r\n\r\n<p>2. <tt>mercedes =&nbsp;Cars()&nbsp;</tt>&rArr;&nbsp;instance&nbsp;&rArr;&nbsp;<tt>mercedes.name </tt>and <tt>mercedes.models&nbsp;</tt></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example11</p>\r\n\r\n<p><strong>example11.py</strong><br />\r\n<tt>class Car:<br />\r\n&nbsp; &nbsp; cars = []<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = &quot;&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.models = []</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from example11 import Car<br />\r\n&gt;&gt;&gt; Car().name<br />\r\n&#39;&#39;<br />\r\n&gt;&gt;&gt; Car().models<br />\r\n[]<br />\r\n&gt;&gt;&gt; mercedes = Car()<br />\r\n&gt;&gt;&gt; mercedes.name<br />\r\n&#39;&#39;<br />\r\n&gt;&gt;&gt; mercedes.models<br />\r\n[]</tt></p>\r\n\r\n<hr />\r\n<p>() is distinctive point between instance attribute and class attribute. You can&#39;t access instance attribute without (). If you try, you will take the&nbsp;error. Look at below , please.</p>\r\n\r\n<p><tt>&gt;&gt;&gt; Car.cars<br />\r\n[]<br />\r\n&gt;&gt;&gt; Car().cars<br />\r\n[]<br />\r\n&gt;&gt;&gt; Car.name</tt><br />\r\nTraceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#17&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; Car.name<br />\r\nAttributeError: type object &#39;Car&#39; has no attribute &#39;name</p>\r\n\r\n<hr />\r\n<p>You have already&nbsp;know that you could access class attributes via instance of a class. Look at below.</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt; toyota = Car()<br />\r\n&gt;&gt;&gt; toyota.cars<br />\r\n[]&nbsp;</p>\r\n\r\n<hr />\r\n<p>cars is the class attribute of the Car class.&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>self</strong></p>\r\n\r\n<p>self is<strong>&nbsp;</strong>a parameter of the __init__ function. It hold instance name such as: toyota and mercedes. When you call a instance attribute, Python put instance to self position in __init__ function.</p>\r\n\r\n<p><tt>mercedes.name &rArr;&nbsp;self.name</tt></p>\r\n\r\n<p><strong>Note:</strong> You can prefer another word to self. But using self is very strong custom in Python&#39;s programmers. So You should use self.</p>\r\n\r\n<p><strong>Updating the instance attributes</strong></p>\r\n\r\n<p>Example12</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><strong>example12.py</strong><br />\r\n<tt>class Car:<br />\r\n&nbsp; &nbsp; cars = []<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = &quot;&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.models = []</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from example12&nbsp;import Car<br />\r\n&gt;&gt;&gt; mercedes = Car()<br />\r\n&gt;&gt;&gt; mercedes.name = &quot;Mercedes&quot;<br />\r\n&gt;&gt;&gt; mercedes.name<br />\r\n&#39;Mercedes&#39;<br />\r\n&gt;&gt;&gt; toyota = Car()<br />\r\n&gt;&gt;&gt; toyota.name<br />\r\n&#39;&#39;<br />\r\n&gt;&gt;&gt; toyota.name = &quot;Toyota&quot;<br />\r\n&gt;&gt;&gt; toyota.name<br />\r\n&#39;Toyota&#39;<br />\r\n&gt;&gt;&gt; mercedes.name<br />\r\n&#39;Mercedes&#39;<br />\r\n&gt;&gt;&gt; mercedes.cars.append(&quot;Mercedes&quot;)<br />\r\n&gt;&gt;&gt; mercedes.cars<br />\r\n[&#39;Mercedes&#39;]<br />\r\n&gt;&gt;&gt; toyota.cars<br />\r\n[&#39;Mercedes&#39;]<br />\r\n&gt;&gt;&gt; toyota.cars.append(&quot;Toyota&quot;)<br />\r\n&gt;&gt;&gt; toyota.cars<br />\r\n[&#39;Mercedes&#39;, &#39;Toyota&#39;]<br />\r\n&gt;&gt;&gt; mercedes.cars<br />\r\n[&#39;Mercedes&#39;, &#39;Toyota&#39;]</tt></p>\r\n\r\n<hr />\r\n<p>Now above we have seen that when updating instance attribute doesn&#39;t affect other instance attribute. In other words, mercedes instance has its special name attribute and toyota instance has its special name attribute. However&nbsp;both of them have same class attribute which is cars. In other words, updating class attribute affect all other class attributes of the instances.&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Instance methods</strong></p>\r\n\r\n<p>The methods are like function but ıt can&#39;t be used alone. İt need an owner like instance, string, list... It is created with def statement and self parameter. İt is used for calling with dot notation like list.append(&quot;mercedes&quot;). Now we will add one&nbsp;method into our Car class.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example13:</p>\r\n\r\n<p><strong>example13.py</strong><br />\r\n<tt>class Car:<br />\r\n&nbsp; &nbsp; cars = []<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = &quot;&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.features = []<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; def add_cars(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.cars.append(self.name)</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from example13 import Car<br />\r\n&gt;&gt;&gt; mercedes = Car()<br />\r\n&gt;&gt;&gt; toyota = Car()<br />\r\n&gt;&gt;&gt; mercedes.name = &quot;Mercedes&quot;<br />\r\n&gt;&gt;&gt; mercedes.add_cars()<br />\r\n&gt;&gt;&gt; mercedes.name<br />\r\n&#39;Mercedes&#39;<br />\r\n&gt;&gt;&gt; mercedes.cars<br />\r\n[&#39;Mercedes&#39;]<br />\r\n&gt;&gt;&gt; toyota.cars<br />\r\n[&#39;Mercedes&#39;]<br />\r\n&gt;&gt;&gt; toyota.name =&quot;Toyota&quot;<br />\r\n&gt;&gt;&gt; toyota.add_cars()<br />\r\n&gt;&gt;&gt; toyota.cars<br />\r\n[&#39;Mercedes&#39;, &#39;Toyota&#39;]<br />\r\n&gt;&gt;&gt; mercedes.cars<br />\r\n[&#39;Mercedes&#39;, &#39;Toyota&#39;]</tt></p>\r\n\r\n<hr />\r\n<p>Now Above example13&nbsp;we have added the method named&nbsp;<tt>add_cars </tt>which appends name of instance to<tt> </tt>the<tt> cars </tt>class attribute.<br />\r\nthis method is called like this:&nbsp;<tt>mercedes.add_cars() and toyota.add_cars()<br />\r\nself.cars.append(self.name)</tt> &rArr;<tt>&nbsp;mercedes.cars.append(mercedes.name)&nbsp;&rArr; [].append(&quot;Mercedes&quot;)&nbsp;&rArr;&nbsp;[&#39;Mercedes&#39;] for cars in the class.</tt></p>\r\n</div>', '<p>So for we have basically mentioned about classes, instances, class attributes, instance attributes and instance methods. These terms are very important to understand next lessons. Now we will see class methods.</p>\r\n\r\n<p><strong>class methods</strong></p>\r\n\r\n<p>The instance method&nbsp;is different term&nbsp;from class method. We couldn&#39;t access instance method via class name. If you try- you will take an error such as:</p>\r\n\r\n<div style="background:#eeeeee; border-image:none; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1</p>\r\n\r\n<p><strong>example1.py</strong><br />\r\n<tt>class Car:<br />\r\n&nbsp;&nbsp;&nbsp; cars = []<br />\r\n&nbsp;&nbsp;&nbsp; def __init__(self):<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.name = &quot;&quot;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.models&nbsp;= []<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; def add_cars(self):<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.cars.append(self.name)</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt;from example13 import Car<br />\r\n&gt;&gt;&gt;Car.add_cars()</tt><br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#2&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp;&nbsp;&nbsp; Car.add_cars()<br />\r\nTypeError: add_cars() missing 1 required positional argument: &#39;self&#39;</span></p>\r\n</div>\r\n\r\n<p>In order to have class method, we need classmethod.&nbsp;</p>\r\n\r\n<p><strong>@classmethod decorator</strong></p>\r\n\r\n<p>It converts a function to be a class method with cls parameter. And&nbsp;then you can access via Car class. Look at below, please:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2: Above Car class&nbsp;have been updated. Then __init__ instance method have&nbsp;name parameter. add_cars intsance method is called in it.&nbsp;</p>\r\n\r\n<p><tt><strong>example2.py</strong><br />\r\nclass Car:<br />\r\n&nbsp; &nbsp; cars = []<br />\r\n&nbsp; &nbsp; def __init__(self, name):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = name<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.models&nbsp;= []<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.add_cars()<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp; def add_cars(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.cars.append(self.name)</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @classmethod<br />\r\n&nbsp; &nbsp; def count_cars(cls):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(len(cls.cars))</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from example2&nbsp;import Car<br />\r\n&gt;&gt;&gt; Car.cars<br />\r\n[]<br />\r\n&gt;&gt;&gt; Car.count_cars()<br />\r\n0<br />\r\n&gt;&gt;&gt; mercedes = Car(&quot;Mercedes&quot;)<br />\r\n&gt;&gt;&gt; Car.cars<br />\r\n[&#39;Mercedes&#39;]<br />\r\n&gt;&gt;&gt; Car.count_cars()<br />\r\n1</tt></p>\r\n\r\n<hr />\r\n<p><tt>mercedes =&nbsp;Car(&quot;Mercedes&quot;)&rArr; this code calls __init__(self,&nbsp;name) instance function. Please look at below what it do.<br />\r\n__init__(mercedes, &quot;Mercedes&quot;):<br />\r\n&nbsp; &nbsp;&nbsp;mercedes.name = &quot;Mercedes&quot;<br />\r\n&nbsp; &nbsp;&nbsp;mercedes.features = []<br />\r\n&nbsp; &nbsp; mercedes.add_cars()&nbsp;&rArr;&nbsp;this code calls add_cars(self)&nbsp;function. Please look at below what it do.<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; mercedes.cars.append(mercedes.name) = [].append(&quot;Mercedes&quot;) = cars = [&#39;Mercedes&#39;]</tt></p>\r\n\r\n<p><tt>Car.count_cars()&nbsp;&rArr; this code calls count_cars(cls) class&nbsp;function. Please look at below what it do.<br />\r\ncount_cars(Car):<br />\r\n&nbsp; &nbsp; print(len(Car.cars))&nbsp;&rArr; print(len[&quot;Mercedes&quot;]) = cars = 1</tt></p>\r\n\r\n<hr />\r\n<p>You can access class method via instances, too. See below please.</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt; mercedes.count_cars()<br />\r\n1</p>\r\n</div>\r\n\r\n<p><strong>Alternative constructor</strong></p>\r\n\r\n<p>This term means a class that can be&nbsp;initliazed with class method or class methods without instantiation, if you want.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3:</p>\r\n\r\n<p><strong>example3.py</strong><br />\r\nclass Car:<br />\r\n&nbsp; &nbsp; cars = []<br />\r\n&nbsp; &nbsp; def __init__(self, name):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = name<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.models = []<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.add_cars()&nbsp; &nbsp;<br />\r\n&nbsp; &nbsp;<br />\r\n&nbsp; &nbsp; def add_cars(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.cars.append(self.name)</p>\r\n\r\n<p>&nbsp; &nbsp; @classmethod<br />\r\n&nbsp; &nbsp; def count_cars(cls):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(len(cls.cars))</p>\r\n\r\n<p>&nbsp; &nbsp; @classmethod<br />\r\n&nbsp; &nbsp; def launch(cls, car_name):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;cls(car_name)</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt;from example13 import Car<br />\r\n&gt;&gt;&gt;Car.launch(&quot;Mercedes&quot;)<br />\r\n&gt;&gt;&gt; Car.cars<br />\r\n[&#39;Mercedes&#39;]<br />\r\n&gt;&gt;&gt; Car.count_cars()<br />\r\n1</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt; Car.launch(&quot;Mercedes&quot;)&rArr;&nbsp;T<tt>his code calls launch(cls, car_name) class method. Please look at below what it do.</tt><br />\r\nlaunch(Car, &quot;Mercedes&quot;):<br />\r\n&nbsp; &nbsp; Car(&quot;Mercedes&quot;)&rArr;&nbsp;T<tt>his code calls __init__(self, car_name) instance&nbsp;method. Please look at below what it do.</tt><br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;__init__(Car(), &quot;Mercedes&quot;):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Car().name = &quot;Mercedes&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Car().models = []<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Car().add_cars()<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Car().cars.append(Cars().name) = [].append(&quot;Mercedes&quot;) = cars = [&quot;Mercedes&quot;]</p>\r\n</div>\r\n\r\n<p><strong>@staticmethod&nbsp;decorator</strong></p>\r\n\r\n<p>It converts a function to be a static method that&nbsp;does not receive an implicit(cls or self) first argument and is neither class method nor instance method. it is independent method in a class. But you can access it over both class and instance.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4:</p>\r\n\r\n<p><strong>example4.py</strong></p>\r\n\r\n<p><tt>class Planet:</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @staticmethod<br />\r\n&nbsp; &nbsp; def earth():<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;Hello Earth&quot;)</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @staticmethod<br />\r\n&nbsp; &nbsp; def mars():<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;Hello Mars&quot;)</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @staticmethod<br />\r\n&nbsp; &nbsp; def venus():<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;Hello Venus&quot;)</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from example4 import Planet<br />\r\n&gt;&gt;&gt; Planet.earth()<br />\r\nHello Earth<br />\r\n&gt;&gt;&gt; uranus = Planet()<br />\r\n&gt;&gt;&gt; uranus.venus()<br />\r\nHello Venus<br />\r\n&gt;&gt;&gt; uranus.mars()<br />\r\nHello Mars</tt></p>\r\n</div>', '<p>In Python the classes have three members which are methods, attributes, variables, ...</p>\r\n\r\n<p><strong>1. </strong>Public members<br />\r\n<strong>2.</strong> Private members<br />\r\n<strong>3. </strong>Semi-private members</p>\r\n\r\n<p><strong>Public members</strong></p>\r\n\r\n<p>So far we have seen the public members(atributes, methods) which can accessed with a instance or a&nbsp;class. We can see their names&nbsp;with dir() function.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1:</p>\r\n\r\n<p><tt><strong>member.py</strong><br />\r\nclass Member():<br />\r\n&nbsp; &nbsp; class_attribute = &quot;&quot;</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; def instance_method(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;I&#39;m an instance method&quot;)</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @classmethod<br />\r\n&nbsp; &nbsp; def class_method(cls):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;I&#39;m a class method&quot;)</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @staticmethod<br />\r\n&nbsp; &nbsp; def class_method(cls):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;I&#39;m a static method&quot;)</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from members import Member<br />\r\n&gt;&gt;&gt; dir(Member)<br />\r\n[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, <strong>&#39;class_attribute&#39;, &#39;class_method&#39;, &#39;instance_method&#39;</strong>]</tt></p>\r\n\r\n<hr />\r\n<p>class_attribute, class_method, instance_method are the public members like other ones in dir(Member). And we have already know how we acces them&nbsp;like below</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from members import Member<br />\r\n&gt;&gt;&gt; Member.class_attribute<br />\r\n&#39;public members&#39;<br />\r\n&gt;&gt;&gt; Member.class_method()<br />\r\nI&#39;m a class method<br />\r\n&gt;&gt;&gt; Member().instance_method()<br />\r\nI&#39;m an instance method<br />\r\n&gt;&gt;&gt; Member.static_method()<br />\r\nI&#39;m an static&nbsp;method</tt></p>\r\n</div>\r\n\r\n<p><strong>Private members</strong></p>\r\n\r\n<p>They are the&nbsp;secret attributes or methods in a class. They can&#39; be accesed normally&nbsp;via class or instance from outside. But of course they are not invisible. You can access them from inside class and with a special way. In order to construct a secret member, (__) characters is used only&nbsp;in the beginning of a attribute or class.</p>\r\n\r\n<p>__secret = &quot;secret&quot;<br />\r\n__secret_ = &quot;secret&quot;<br />\r\n__secret_attribute&nbsp;= &quot;secret&quot;<br />\r\n__secret_attribute_&nbsp;&nbsp;= &quot;secret&quot;</p>\r\n\r\n<p>Now we have updated with __secret_attribute&nbsp;above Member clss in members.py like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example2:</tt></p>\r\n\r\n<p><tt><strong>members.py</strong></tt></p>\r\n\r\n<p><tt>class Member():</tt></p>\r\n\r\n<p><tt>class Member():<br />\r\n&nbsp; &nbsp; __secret_attribute = &quot;secret member&quot;</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; def instance_method(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;I&#39;m an instance method&quot;)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(self.__secret_attribute)</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @classmethod<br />\r\n&nbsp; &nbsp; def class_method(cls):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;I&#39;m a class method&quot;)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(cls.__secret_attribute)</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @staticmethod<br />\r\n&nbsp; &nbsp; def static_method():<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;I&#39;m a static method&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; from members import Member<br />\r\n&gt;&gt;&gt; dir(Member)<br />\r\n[&#39;<strong>_Member__secret_attribute&#39;</strong>, &#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;class_method&#39;, &#39;instance_method&#39;, &#39;static_method&#39;]</tt></p>\r\n\r\n<hr />\r\n<p>If you want to access&nbsp;__secret_attribute, you will take an AttributeError. See below please.</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; Member.__secret_attribute<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#2&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; Member.__secret_attribute<br />\r\nAttributeError: type object &#39;Member&#39; has no attribute &#39;__secret_attribute&#39;</span></tt></p>\r\n\r\n<hr />\r\n<p>You can access them from inside class(<tt>print(cls.__secret_attribute) in&nbsp;class_method</tt>). see below please.</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; Member.class_method()<br />\r\nI&#39;m a class method<br />\r\nsecret member<br />\r\n&gt;&gt;&gt; Member().instance_method()<br />\r\nI&#39;m an instance method<br />\r\nsecret member</tt></p>\r\n\r\n<hr />\r\n<p>If you want to&nbsp;acces a private member via classor instance, you can use _class_name__secret_attribute as attribute. (It is now recommended) If you look at carefully above dir(Mermber), you will see like this <strong>:&nbsp;<tt>&#39;_Member__secret_attribute&#39;. </tt></strong><tt>See below please.</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; Member._Member__secret_attribute<br />\r\n&#39;secret member&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>Semi-private members</strong></p>\r\n\r\n<p>They can be accesed normally&nbsp;via class or instance from outside. But That the programmers want to construct any semi-pivate member is for warning the other programmers who know that they shouldn&#39;t use semi-private member&nbsp;.&nbsp;In order to construct a semi-private&nbsp;member, (_) character&nbsp;is used only&nbsp;in the beginning of a attribute or class.</p>\r\n\r\n<p>_semi_pivative&nbsp;= &quot;semi private&quot;</p>\r\n\r\n<p><strong>@property decorator</strong></p>\r\n\r\n<p>This decoratoris is used for three reason. It changed access way of a method like a attribute. So you can call this method with it without pranthesis ().</p>\r\n\r\n<p>1. Getting an attribute value.<br />\r\n2. Setting an attribute.<br />\r\n3. Erasing&nbsp;an attribute</p>\r\n\r\n<p><strong>Getting an attribute value</strong></p>\r\n\r\n<p>In order to get&nbsp;semi-private&nbsp;attribute for safety for a program or another reason&nbsp;without using semi-private attribute, you can use this property decarator. See below example.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3:</p>\r\n\r\n<p><tt><strong>properties.py</strong><br />\r\nclass C:<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self._private = &quot;semi&quot;</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @property<br />\r\n&nbsp; &nbsp; def access(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; return self._private</tt></p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt;from properties import C<br />\r\n&gt;&gt;&gt; a = C()<br />\r\n&gt;&gt;&gt; a.access<br />\r\n&#39;semi-secret&#39;</p>\r\n\r\n<hr />\r\n<p>Above access method is calling like an attribute via&nbsp;<tt>@property </tt>decorator.<tt> </tt>And we get<tt>&nbsp;_private </tt>with it, too.</p>\r\n</div>\r\n\r\n<p><strong>Setting an attribute (setter)</strong></p>\r\n\r\n<p>To set the attributes, the setter parameter&nbsp;is used after&nbsp;property decorator. Now we have updated above C class in properties.py&nbsp;Look at&nbsp;below example.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example4</tt></p>\r\n\r\n<p><tt><strong>properties.py</strong><br />\r\nclass C:<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self._private = &quot;semi-secret&quot;</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @property<br />\r\n&nbsp; &nbsp; def access(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; return self._private</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @access.setter<br />\r\n&nbsp; &nbsp; def access(self, new_value):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self._private = new_value</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from properties import C<br />\r\n&gt;&gt;&gt; a = C()<br />\r\n&gt;&gt;&gt; a.access<br />\r\n&#39;semi-secret&#39;<br />\r\n&gt;&gt;&gt; a.access = &quot;semi-private&quot;<br />\r\n&gt;&gt;&gt; a.access<br />\r\n&#39;semi-private&#39;</tt></p>\r\n\r\n<hr />\r\n<p>using&nbsp;<tt>@access.setter </tt>we obtained the chance to update<tt> _private attributes.&nbsp;</tt></p>\r\n</div>\r\n\r\n<p><strong>Erasing the attribute(deleter)</strong></p>\r\n\r\n<p>To delete&nbsp;the attributes, the deleter&nbsp;parameter&nbsp;is used after&nbsp;property decorator. Now we have updated above C class in properties.py&nbsp;Look at&nbsp;below example.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5:</p>\r\n\r\n<p><strong>properties.py</strong><br />\r\nclass C:<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self._private = &quot;semi-secret&quot;</p>\r\n\r\n<p>&nbsp; &nbsp; @property<br />\r\n&nbsp; &nbsp; def access(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; return self._private</p>\r\n\r\n<p>&nbsp; &nbsp; @access.setter<br />\r\n&nbsp; &nbsp; def access(self, new_value):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self._private = new_value</p>\r\n\r\n<p>&nbsp; &nbsp; @access.deleter<br />\r\n&nbsp; &nbsp; def access(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; del self._private</p>\r\n</div>', '<p>Python can create a new class by extending an existing class.&nbsp;</p>\r\n\r\n<p>We can&nbsp;call the existing class the &quot;base class&quot; or &quot;parent class&quot; or &quot;super class&quot; and the new class as the &quot;child class&quot; or &quot;subclass&quot;.</p>\r\n\r\n<p>Any Subclass has the all features of its super class. This affair is called the inheritance like real life. Please, look at below example.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1</p>\r\n\r\n<p><strong>workers.py</strong></p>\r\n\r\n<p><tt>class Worker:<br />\r\n&nbsp; &nbsp; def __init__(self, name):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = name<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.salary = 3500&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;New worker is added&quot;)</tt></p>\r\n\r\n<p><tt>class Workman(Worker):<br />\r\n&nbsp; &nbsp; pass</tt></p>\r\n\r\n<p><tt>class Engineer(Worker):<br />\r\n&nbsp; &nbsp; pass</tt></p>\r\n\r\n<hr />\r\n<p>Above example Worker is superclass, Workman and Engineer are subclasses. Also workers is a module and workers.py is a Pyhton file. You know to import worker module, you should use &quot;import workers&quot; codes.&nbsp;After that you can use Workman, Engineer and Worker classes. See below codes,&nbsp;please.&nbsp;&nbsp;</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import workers<br />\r\n&gt;&gt;&gt; jim = workers.Workman(&quot;Jim&quot;)<br />\r\nNew worker is added<br />\r\n&gt;&gt;&gt; jim.name<br />\r\n&#39;Jim&#39;<br />\r\n&gt;&gt;&gt; paul = workers.Engineer(&quot;Paul&quot;)<br />\r\nNew worker is added<br />\r\n&gt;&gt;&gt; paul.name<br />\r\n&#39;Paul&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>Inheritance types</strong></p>\r\n\r\n<p>After the inheritance, you can need update/define methods and&nbsp;attributes of superclass(parent) or you can need add new methods and attributes.&nbsp;</p>\r\n\r\n<p><strong>Adding new class attribute to subclass</strong></p>\r\n\r\n<p>We can add an class attribute to&nbsp;above subclass Workman like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>class Workman(Worker):<br />\r\n&nbsp; &nbsp; self.duty = &quot;carpeter&quot;</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import workers<br />\r\n&gt;&gt;&gt; jim = workers.Workman(&quot;Jim&quot;)</tt><br />\r\n&gt;&gt;&gt; jim.duty<br />\r\n&#39;carpeter&#39;<br />\r\n&gt;&gt;&gt; workers.Workman.duty<br />\r\n&#39;carpeter&#39;</p>\r\n</div>\r\n\r\n<p><strong>Adding new methods&nbsp;&nbsp;to subclass</strong></p>\r\n\r\n<p>We can add an class, instance and static methods&nbsp;&nbsp;to&nbsp;above subclass Workman like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>class Workman(Worker):<br />\r\n&nbsp; &nbsp; duty = &quot;carpeter&quot;</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; def instance_method(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;new instance method&quot;)</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @classmethod<br />\r\n&nbsp; &nbsp; def class_method(cls):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;new class method&quot;)</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; @staticmethod<br />\r\n&nbsp; &nbsp; def static_method():<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;new static method&quot;)</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import workers<br />\r\n&gt;&gt;&gt; workers.Workman.class_method()<br />\r\nnew class method<br />\r\n&gt;&gt;&gt; tom = workers.Workman(&quot;Tom&quot;)<br />\r\nNew worker is added<br />\r\n&gt;&gt;&gt; tom.instance_method()<br />\r\nnew instance method<br />\r\n&gt;&gt;&gt; tom.static_method()<br />\r\nnew static&nbsp;method</tt></p>\r\n</div>\r\n\r\n<p><strong>Updating instance&nbsp;attribute to subclass</strong></p>\r\n\r\n<p>Above superclass Worker has salary instance attribute. But Since a workman and an engineer can&#39;t have same salary, we should update it . So we need <strong>super()</strong> function for holding&nbsp;all attributes of superclass.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>class Worker:<br />\r\n&nbsp; &nbsp; def __init__(self, name):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = name<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.salary = 3500 &nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;New worker is added&quot;)</tt></p>\r\n\r\n<p><tt>class Workman(Worker):<br />\r\n&nbsp; &nbsp; duty = &quot;carpeter&quot;</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; def __init__(self, name):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; super().__init__(name)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.salary = 4000</tt></p>\r\n\r\n<p><tt>class Engineer(Worker):<br />\r\n&nbsp; &nbsp; def __init__(self, name):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; super().__init__(name)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.salary = 5000</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import workers<br />\r\n&gt;&gt;&gt; jim = workers.Workman(&quot;Jim&quot;)<br />\r\nNew worker is added<br />\r\n&gt;&gt;&gt; jim.salary<br />\r\n4000<br />\r\n&gt;&gt;&gt; paul = workers.Engineer(&quot;Paul&quot;)<br />\r\nNew worker is added<br />\r\n&gt;&gt;&gt; paul.salary<br />\r\n5000</tt></p>\r\n\r\n<hr />\r\n<p>above <tt>Engineer and Workman subclasses</tt> keeps all features of <tt>Worker</tt> superclass via&nbsp;super function. If you dın&#39;t want to repeat rhe parameters of the superclass, you can prefer *args and **kwargs to them. See below please.</p>\r\n\r\n<hr />\r\n<p><tt>class Workman(Worker):<br />\r\n&nbsp; &nbsp; duty = &quot;carpeter&quot;</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; def __init__(self, *args, **kwargs):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; super().__init__(*args, **kwargs)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.salary = 4000</tt></p>\r\n\r\n<p><tt>class Engineer(Worker):<br />\r\n&nbsp; &nbsp; def __init__(self, *args, **kwargs):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; super().__init__(*args, **kwargs)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.salary = 5000</tt></p>\r\n</div>\r\n\r\n<p>You can use super() function for another other methods, too.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>class Worker:<br />\r\n&nbsp; &nbsp; def __init__(self, name):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = name<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.salary = 3500 &nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;New worker is added&quot;)</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; def method_name(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&#39;super class method&#39;)</tt></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><tt>class Engineer(Worker):<br />\r\n&nbsp; &nbsp; def __init__(self, *args, **kwargs):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; super().__init__(*args, **kwargs)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.salary = 5000</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; def method_name(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; super().method_name()<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&#39;subclass method(Engineer)&#39;)</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import workers<br />\r\n&gt;&gt;&gt; angelina = workers.Worker(&quot;Angelina&quot;)<br />\r\nNew worker is added<br />\r\n&gt;&gt;&gt; angelina.method_name()<br />\r\nsuper class method<br />\r\n&gt;&gt;&gt; paul = workers.Engineer(&quot;Paul&quot;)<br />\r\nNew worker is added<br />\r\n&gt;&gt;&gt; paul.method_name()<br />\r\nsuper class method<br />\r\nsubclass method(Engineer)</tt></p>\r\n</div>\r\n\r\n<p><strong>Multiple inheritance</strong></p>\r\n\r\n<p>A subclass can have the attributes and methods of two or more&nbsp;superclasses. Below example show that Subclass is created via three super classes which names are Class1, Class2 and Class3.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example2</tt></p>\r\n\r\n<p><tt><strong>multiple.py</strong><br />\r\nclass Class1:<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name&nbsp;= &quot;Class-1&quot;</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; def method1(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;method-1&quot;)</tt></p>\r\n\r\n<p><tt>class Class2:<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name&nbsp;= &quot;Class-2&quot;</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; def method2(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;method-2&quot;)</tt></p>\r\n\r\n<p><tt>class Class3:<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name&nbsp;= &quot;Class-3&quot;</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; def method3(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;method-3&quot;)</tt></p>\r\n\r\n<p><tt>class Subclass(Class1, Class2, Class3):<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; super().__init__()<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(self.name)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.method1()<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.method2()<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.method3()</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from multiple import Subclass<br />\r\n&gt;&gt;&gt; class4 = Subclass()<br />\r\n<strong>Class-1</strong><br />\r\nmethod-1<br />\r\nmethod-2<br />\r\nmethod-3</tt></p>\r\n\r\n<hr />\r\n<p>The priority in common methods is first class which is Class1 above Example2 because of order in Subclass(class1, class2, class3). If you changed like this:&nbsp;Subclass(class1, class2, class3) your result will be different. See below.</p>\r\n\r\n<p><tt><strong>Class-2</strong><br />\r\nmethod-1<br />\r\nmethod-2<br />\r\nmethod-3</tt></p>\r\n</div>\r\n\r\n<p><strong>Composition without inhertiance</strong></p>\r\n\r\n<p>Sometimes you need adding some methods or attributes from other classes without inheritance.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3</p>\r\n\r\n<p><tt><strong>composition.py</strong><br />\r\nclass A:<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = &quot;Class-A&quot;</tt></p>\r\n\r\n<p><tt>class B :<br />\r\n&nbsp; &nbsp; &nbsp;def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.name = &quot;Class-B&quot;</tt></p>\r\n\r\n<p><tt>class C:<br />\r\n&nbsp; &nbsp; def __init__(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.a = A()<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; self.b = B()</tt></p>\r\n\r\n<hr />\r\n<p>Above example class C has &quot;a&quot;&nbsp; and &quot;b&quot; instance attributes which are&nbsp;instance of class A and instance of class B.</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import composition<br />\r\n&gt;&gt;&gt; example = composition.C()<br />\r\n&gt;&gt;&gt; example.a.name<br />\r\n&#39;Class-A&#39;<br />\r\n&gt;&gt;&gt; example.b.name<br />\r\n&#39;Class-B&#39;</tt></p>\r\n</div>', '<p>In python the classes have three process which are construction,&nbsp;initialization and destruction.</p>\r\n\r\n<p><strong>construction</strong></p>\r\n\r\n<p>&nbsp;</p>', '<p>It is composition of modules in a directory. In&nbsp; other words, a&nbsp;package has inside more than one modules. Such as django, kivy, tkinter, sqlite3, urrlib, ...You can see all list of them in Lib directory of Python.</p>\r\n\r\n<p>Actually, all packages are a module. But they are more comprehensive.&nbsp; os module&nbsp;has only one os.py file. But any package has directory&nbsp;which has another modules.&nbsp;</p>\r\n\r\n<p>In addition, The Packages have two types:</p>\r\n\r\n<p><strong>1.</strong> Standart packages: ready packages like tkinter, sqlite3, urrlib, ...</p>\r\n\r\n<p>You can reach these packages&nbsp;list&nbsp;&nbsp;from&nbsp;<a href="https://docs.python.org/3/library/">https://docs.python.org/3/library/</a></p>\r\n\r\n<p><strong>2.</strong> Third&nbsp;party packages: django, kivy,...</p>\r\n\r\n<p>You can reach more than 60.000 packages list&nbsp;&nbsp;from&nbsp;<a href="http://https//pypi.python.org/pypi">https://pypi.python.org/pypi</a></p>\r\n\r\n<p>You can install &quot;pip&quot; command from terminal command line from not Python Shell like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>pip3 install package_name&nbsp;</tt></p>\r\n\r\n<hr />\r\n<p><tt>Imagine that you want to install django module. See below.</tt></p>\r\n\r\n<hr />\r\n<p><tt>pip&nbsp;install django</tt></p>\r\n\r\n<p>or&nbsp;</p>\r\n\r\n<p><tt>pip3 install django</tt></p>\r\n\r\n<hr />\r\n<p>If you you use Linux, you shoul like this:</p>\r\n\r\n<p><tt>sudo pip3 install sphinx</tt></p>\r\n\r\n<p>or</p>\r\n\r\n<p><tt>sudo pip install sphinx</tt><br />\r\n<br />\r\n&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>&nbsp;__path__ attribute</strong></p>\r\n\r\n<p>The packages have this special attribute which shows path of directory(package). A module doesn&#39;t have it.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import tkinter<br />\r\n&gt;&gt;&gt; tkinter.__path__<br />\r\n[&#39;C:\\\\Users\\\\sahint&uuml;rk\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\lib\\\\tkinter&#39;]</tt></p>\r\n\r\n<hr />\r\n<p>If you try with os module, you will take an error. See below</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; os.__path__<br />\r\nTraceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#49&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; os.__path__<br />\r\nAttributeError: module &#39;os&#39; has no attribute &#39;__path__&#39;&nbsp;&nbsp;</tt></p>\r\n</div>\r\n\r\n<p><strong>&nbsp;Importing Packages</strong></p>\r\n\r\n<p>We will see importing in Modules lesson. But Because importing packages is very important and comprehensive, we will see it again.&nbsp;</p>\r\n\r\n<p>import&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>', '<p>We will see importing in Modules lesson. But because importing packages is very important and comprehensive, we will see it deeply again.&nbsp;</p>\r\n\r\n<p><strong>import package_name</strong></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import urllib<br />\r\n&gt;&gt;&gt; import tkinter</tt></p>\r\n</div>\r\n\r\n<p><strong>import package_name.module_name</strong></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import urllib.parse<br />\r\n&gt;&gt;&gt; urllib.parse<br />\r\n&lt;module &#39;urllib.parse&#39; from &#39;C:\\\\Users\\\\sahint&uuml;rk\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\lib\\\\urllib\\\\parse.py&#39;&gt;</tt></p>\r\n\r\n<hr />\r\n<p>parse is a module in urllib packet</p>\r\n</div>\r\n\r\n<p><strong>from&nbsp;</strong>&nbsp;<strong>package_name import module_name</strong></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3</p>\r\n\r\n<p><tt>&gt;&gt;&gt; from urllib import request<br />\r\n&gt;&gt;&gt; request.urlopen(&quot;http://www.google.com&quot;)</tt></p>\r\n</div>\r\n\r\n<p><strong>from&nbsp;package_name.module_name import class_name or method_name or attribute_name</strong></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4</p>\r\n\r\n<p><tt>&gt;&gt;&gt; from urllib.request import urlopen<br />\r\n&gt;&gt;&gt; urlopen(&quot;www.google.com&quot;)</tt></p>\r\n</div>\r\n\r\n<p><strong>from&nbsp;package_name.module_name import *</strong></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5</p>\r\n\r\n<p><tt>&gt;&gt;&gt; from urllib.request import *</tt></p>\r\n</div>', '<p>In order to our package, we need a directory where modules are. The structure of it should be like this:</p>\r\n\r\n<p>+ packet<br />\r\n|__ module1.py<br />\r\n|__ module2.py<br />\r\n|__ module3.py</p>\r\n\r\n<p>Now we build them. See below please.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1</p>\r\n\r\n<p><strong>packet/module1.py</strong><br />\r\n<tt>print(&quot;module1&quot;)</tt></p>\r\n\r\n<p><strong>packet/module2.py</strong><br />\r\n<tt>print(&quot;module2&quot;)</tt></p>\r\n\r\n<p><strong>packet/module3.py</strong><br />\r\n<tt>print(&quot;module3&quot;)</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import packet</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; import packet.module1<br />\r\nmodule1</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from packet import module1<br />\r\nmodule1<br />\r\n&gt;&gt;&gt; from packet import module2<br />\r\nmodule2<br />\r\n&gt;&gt;&gt; from packet import module3<br />\r\nmodule3</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; from packet import *</tt></p>\r\n</div>', '<p>Regular expression is complicated and powerful tool for searching and extracting what you want. In order to use regular expression, we&nbsp;need a module whose name is &quot;<strong>re</strong>&quot;. It has some attributes and methods like os, sys, tkinter, ...</p>\r\n\r\n<p><strong>re module</strong></p>\r\n\r\n<p>after importing this module, you can see methods and attributes of it via dir() function.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; import re<br />\r\n&gt;&gt;&gt; dir(re)</tt></p>\r\n\r\n<hr />\r\n<p>[&#39;A&#39;, &#39;ASCII&#39;, &#39;DEBUG&#39;, &#39;DOTALL&#39;, &#39;I&#39;, &#39;IGNORECASE&#39;, &#39;L&#39;, &#39;LOCALE&#39;, &#39;M&#39;, &#39;MULTILINE&#39;, &#39;RegexFlag&#39;, &#39;S&#39;, &#39;Scanner&#39;, &#39;T&#39;, &#39;TEMPLATE&#39;, &#39;U&#39;, &#39;UNICODE&#39;, &#39;VERBOSE&#39;, &#39;X&#39;, &#39;_MAXCACHE&#39;, &#39;__all__&#39;, &#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;__version__&#39;, &#39;_alphanum_bytes&#39;, &#39;_alphanum_str&#39;, &#39;_cache&#39;, &#39;_compile&#39;, &#39;_compile_repl&#39;, &#39;_expand&#39;, &#39;_locale&#39;, &#39;_pattern_type&#39;, &#39;_pickle&#39;, &#39;_subx&#39;, &#39;compile&#39;, &#39;copyreg&#39;, &#39;enum&#39;, &#39;error&#39;, &#39;escape&#39;, &#39;findall&#39;, &#39;finditer&#39;, &#39;fullmatch&#39;, &#39;functools&#39;, &#39;match&#39;, &#39;purge&#39;, &#39;search&#39;, &#39;split&#39;, &#39;sre_compile&#39;, &#39;sre_parse&#39;, &#39;sub&#39;, &#39;subn&#39;, &#39;template&#39;]</p>\r\n</div>\r\n\r\n<p>Now we will see the most important ones in the re module.</p>\r\n\r\n<p><strong>match() method</strong></p>\r\n\r\n<p>Try to apply the pattern at the start of the string, returning a match object, or None if no match was found.</p>\r\n\r\n<p><tt>match(pattern, string, flags=0)&nbsp;&rArr; match object or None</tt></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;John is a doctor&quot;<br />\r\n&gt;&gt;&gt; re.match(&quot;John&quot;, a)<br />\r\n&lt;_sre.SRE_Match object; span=(0, 4), match=&#39;John&#39;&gt;</tt></p>\r\n\r\n<hr />\r\n<p>Above a is a string is&nbsp;&quot;John is a doctor&quot;<br />\r\npattern is &quot;John&quot;<br />\r\nmatch object is&nbsp;&lt;_sre.SRE_Match object; span=(0, 4), match=&#39;John&#39;&gt;<br />\r\nspan=(0, 4) show index of &quot;John&quot; in a string. You can check like this:</p>\r\n\r\n<hr />\r\n<p><tt>matching = re.match(&quot;John&quot;, a)</tt><br />\r\n<tt>&gt;&gt;&gt; matching.span()<br />\r\n(0, 4)</tt></p>\r\n\r\n<hr />\r\n<p>If you obtain matching string, you can use group() method of matching object.</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; matching.group()<br />\r\n&#39;John&#39;</tt></p>\r\n\r\n<hr />\r\n<p>If no match is&nbsp;found, match method return None value. See below example.</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; print(re.match(&quot;Tim&quot;, a))<br />\r\nNone</tt></p>\r\n\r\n<hr />\r\n<p>match method search only starting of a string. See below please.</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt; print(re.match(&quot;doctor&quot;, a))<br />\r\nNone</p>\r\n\r\n<hr />\r\n<p>You can list methods and attributes of match object via dir() function.&nbsp;</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt; dir(matching)<br />\r\n[&#39;__class__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;end&#39;, &#39;endpos&#39;, &#39;expand&#39;, <strong>&#39;group&#39;</strong>, &#39;groupdict&#39;, &#39;groups&#39;, &#39;lastgroup&#39;, &#39;lastindex&#39;, &#39;pos&#39;, &#39;re&#39;, &#39;regs&#39;, <strong>&#39;span&#39;</strong>, &#39;start&#39;, &#39;string&#39;]<br />\r\n&gt;&gt;&gt; matching.end</p>\r\n</div>\r\n\r\n<p><strong>search method</strong></p>\r\n\r\n<p>Scan through string looking for a match to the pattern, returning a match object, or None if no match was found.</p>\r\n\r\n<p><tt>search(pattern, string, flags=0)</tt>&nbsp;&rArr;&nbsp;<tt>match object or None</tt></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;John is a doctor&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;doctor&quot;, a)<br />\r\n&gt;&gt;&gt; print(matching)<br />\r\n&lt;_sre.SRE_Match object; span=(10, 16), match=&#39;doctor&#39;&gt;<br />\r\n&gt;&gt;&gt; matching.span()<br />\r\n(10, 16)<br />\r\n&gt;&gt;&gt; matching.group()<br />\r\n&#39;doctor&#39;</tt></p>\r\n\r\n<hr />\r\n<p>Unlike match() method, search method look all contents of a string.</p>\r\n</div>\r\n\r\n<p><br />\r\n<strong>findall() method</strong></p>\r\n\r\n<p>Return a list of all non-overlapping matches in the string. If one or more capturing groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result.</p>\r\n\r\n<p><tt>findall(pattern, string, flags=0)&nbsp;&rArr; list</tt></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;Python is very powerful programming language. Python is easy to type&quot;<br />\r\n&gt;&gt;&gt; matching = re.findall(&quot;Python&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n[&#39;Python&#39;, &#39;Python&#39;]<br />\r\n&gt;&gt;&gt; re.findall(&quot;n&quot;, a)<br />\r\n[&#39;n&#39;, &#39;n&#39;, &#39;n&#39;, &#39;n&#39;]</tt></p>\r\n</div>\r\n\r\n<p><br />\r\n<strong>special characters</strong></p>\r\n\r\n<p>Regular expressions can contain both special and ordinary characters. Most ordinary characters, like &quot;A&quot;, &quot;a&quot;, or &quot;0&quot;.</p>\r\n\r\n<p>Special characters are [ ] . \\* + ? { } ^ $ | ( )</p>\r\n\r\n<p><strong>[] character</strong></p>\r\n\r\n<p>It indicates a set of characters. It filter for every character in&nbsp;them.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;car, home, jar, &nbsp;bar, flowers&quot;<br />\r\n&gt;&gt;&gt; matching = re.findall(&quot;[bcj]ar&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n[&#39;car&#39;, &#39;jar&#39;, &#39;bar&#39;]</tt></p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import re<br />\r\n&gt;&gt;&gt;&nbsp;a = &quot;a2b b2q 321 m4h c4p 1fg 56y mkn hjk n7p&quot;<br />\r\n&gt;&gt;&gt; matching = re.findall(&quot;[a-z][0-9][a-z]&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n[&#39;a2b&#39;, &#39;b2q&#39;, &#39;m4h&#39;, &#39;c4p&#39;, &#39;n7p&#39;]</tt></p>\r\n\r\n<hr />\r\n<p>Above our pattern is &quot;<tt>[a-z][0-9][a-z]&quot; &rArr; three character, first one is a letter, second one is a number(string) and third one is a letter<br />\r\n&quot;[a-z]&quot; means a&nbsp;letter&nbsp;which can be one of all letters(a, b, c, d, ...)<br />\r\n&quot;[0-9]&quot; means a digit(string) which can be one of digits (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</tt></p>\r\n\r\n<hr />\r\n<p>[A-Z] means&nbsp;<tt>a&nbsp;letter&nbsp;which can be one of all letters(A, B, C, D, ...)</tt></p>\r\n</div>\r\n\r\n<p><strong>. dot character</strong></p>\r\n\r\n<p>Matches any character except a newline. It can be &quot;a&quot;, &quot;b&quot;,&nbsp;&quot;A&quot;, &quot;B&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;*&quot;, &quot;-&quot;, &quot;_&quot;,&quot; &quot;, ... But \\n character not. It only holds one character.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example6</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;abc&quot;, &quot;a1b&quot;, &quot;321&quot;, &quot;m45&quot;, &quot;56y&quot;, &quot;mkn&quot;, &quot;hjk&quot;, &quot;n7p&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.match(&quot;.[a-z]&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<hr />\r\n<p>abc<br />\r\nmkn<br />\r\nhjk</p>\r\n\r\n<hr />\r\n<p><tt>patterns is &quot;.[a-z]&quot; &rArr; two character.<br />\r\n&quot;.&quot; means a&nbsp;character which can be a letter or number for above example.<br />\r\n&quot;[a-z]&quot; means a letter&nbsp;which can be one of all letters(a, b, c, d, ...).</tt></p>\r\n\r\n<p><tt>So because of using match method, It is applied</tt>&nbsp;the pattern at the start of the string&nbsp;in the list.</p>\r\n</div>\r\n\r\n<p><strong>* character</strong></p>\r\n\r\n<p>Matches 0 or more &nbsp;repetitions of the preceding RE. It run only one character before itself.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example7</p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;a&quot;, &quot;ab&quot;, &quot;ybc&quot;, &quot;abbc&quot;, &quot;aahb&quot;, &quot;klm&quot;, &quot;abbbbbbbyuo&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if re.match(&quot;ab*&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(word)</p>\r\n\r\n<hr />\r\n<p>a<br />\r\nab<br />\r\nabbc<br />\r\naahb<br />\r\nabbbbbbbyuo</p>\r\n\r\n<hr />\r\n<p>pattern is &quot;ab*&quot;&nbsp;&rArr; one or more characters<br />\r\n&quot;a&quot; means first character must be &quot;a&quot; character<br />\r\nb* means zero or more character which can be &quot;&quot;, b, &quot;bb&quot;, &quot;bbb&quot;, &quot;bbbb&quot;, ...</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example8:</p>\r\n\r\n<p>&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if re.match(&quot;.*ly&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(word)</p>\r\n\r\n<hr />\r\n<p>wisely<br />\r\nessentially<br />\r\nbasically<br />\r\nnaturally<br />\r\nobviously</p>\r\n\r\n<hr />\r\n<p>our pattern is&nbsp;&quot;.*ly&quot; &rArr; a word which matches the end(&quot;ly&quot;) of the string&nbsp;for above example.</p>\r\n\r\n<p>&quot;.*&quot; means more than zero any character&nbsp;</p>\r\n</div>\r\n\r\n<p><br />\r\n<strong>+ character</strong></p>\r\n\r\n<p>Matches 1 or more (greedy) repetitions of the preceding RE.&nbsp;It run only one character before itself.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example9</p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;a&quot;, &quot;ab&quot;, &quot;ybc&quot;, &quot;abbc&quot;, &quot;aahb&quot;, &quot;klm&quot;, &quot;abbbbbbbyuo&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if re.match(&quot;ab+&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(word)</p>\r\n\r\n<p>ab<br />\r\nabbc<br />\r\nabbbbbbbyuo</p>\r\n\r\n<hr />\r\n<p>Compare this above example with Example7 please.</p>\r\n\r\n<hr />\r\n<p>pattern is &quot;ab+&quot;&nbsp;&rArr; two&nbsp;or more characters<br />\r\n&quot;a&quot; means first character must be &quot;a&quot; character<br />\r\nb+&nbsp;means one&nbsp;or more character which can be &nbsp;b, &quot;bb&quot;, &quot;bbb&quot;, &quot;bbbb&quot;, ...</p>\r\n</div>\r\n\r\n<p><br />\r\n<strong>? character</strong></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example10</tt></p>\r\n\r\n<p><tt>Matches 0 or 1 &nbsp;of the preceding RE.</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;ac&quot;, &quot;abc&quot;, &quot;abbc&quot;, &quot;abbbc&quot;, &quot;abbbbbc&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.match(&quot;ab?c&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<hr />\r\n<p><tt>ac<br />\r\nabc</tt></p>\r\n\r\n<hr />\r\n<p>pattern is &quot;ab?c&quot;&nbsp;&rArr; two&nbsp;or three&nbsp;characters<br />\r\n&quot;a&quot; means first character must be &quot;a&quot; character<br />\r\nb?&nbsp;means zero&nbsp;or one&nbsp;character&nbsp;<br />\r\n&quot;c&quot; means last&nbsp;character must be &quot;c&quot; character</p>\r\n</div>\r\n\r\n<p><br />\r\n<strong>{} character</strong></p>\r\n\r\n<p>{m,n} matches from m to n repetitions of the preceding RE.</p>\r\n\r\n<p>{m} matches m repetitions of the preceding RE.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example11</p>\r\n\r\n<p><tt>&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.match(&quot;ab{2}c&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<p><tt>abbc</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.match(&quot;ab{1,3}c&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<p><tt>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\nabc<br />\r\nabbc<br />\r\nabbbc</tt></p>\r\n</div>\r\n\r\n<p><br />\r\n<strong>^ character</strong></p>\r\n\r\n<p>Matches the start of the string.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example12</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;ab&quot;, &quot;abc&quot;, &quot;bac&quot;, &quot;cab&quot;, &quot;abcdef&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.search(&quot;^ab&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<p><tt>ab<br />\r\nabc<br />\r\nabcdef</tt></p>\r\n\r\n<hr />\r\n<p><tt>Example13</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.search(&quot;ab&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<p><tt>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\nab<br />\r\nabc<br />\r\ncab<br />\r\nabcdef</tt></p>\r\n\r\n<hr />\r\n<p>search() method normally look anywhere in the&nbsp;string like Example13. But if we want to look at&nbsp;at the start of the string like match meyhod, we can use ^ character.</p>\r\n</div>\r\n\r\n<p><br />\r\nIt has one more feature when it is used inside bracket [].</p>\r\n\r\n<p>It means don&#39;t match character(s) inside bracket.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example14</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;apple&quot;, &quot;home&quot;, &quot;arm&quot;, &quot;flowers&quot;, &quot;altitude&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.match(&quot;[^a]&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<hr />\r\n<p><tt>home<br />\r\nflowers</tt></p>\r\n\r\n<hr />\r\n<p><tt>&quot;[^a]&quot; means we don&#39;t want to match with &quot;a&quot;.&nbsp;</tt></p>\r\n</div>\r\n\r\n<p><br />\r\n<strong>$ character</strong></p>\r\n\r\n<p>Matches the end of the string or just before the newline at the end of the string.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example15</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;abc&quot;, &quot;adc&quot;, &quot;asbc&quot;, &quot;afbc&quot;, &quot;asdf&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.search(&quot;bc$&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<hr />\r\n<p><tt>abc<br />\r\nasbc<br />\r\nafbc</tt></p>\r\n\r\n<hr />\r\n<p><tt>&quot;bc$&quot; means we want to find &quot;bc&quot; characters at ending&nbsp;of the string.</tt></p>\r\n</div>\r\n\r\n<p><br />\r\n<strong>\\ character</strong></p>\r\n\r\n<p>Either escapes special characters or signals a special sequence.</p>\r\n\r\n<p>If we want to match special characters( [ ] . \\* + ? { } ^ $ | ( )) of regular expression, we need \\ character to ignore them.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example16</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;$10&quot;, &quot;&euro;25&quot;, &quot;$20&quot;, &quot;&pound;45&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.search(&quot;\\$&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<hr />\r\n<p><tt>$10<br />\r\n$20</tt></p>\r\n</div>\r\n\r\n<p><br />\r\n<strong>| character</strong></p>\r\n\r\n<p>A|B, creates an RE that will match either A or B.</p>\r\n\r\n<p>A and B are&nbsp;the&nbsp;patterns.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example17</p>\r\n\r\n<p><tt>&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.search(&quot;^a|c$&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<hr />\r\n<p>abc<br />\r\nadf<br />\r\nhgc<br />\r\nakl<br />\r\nhjhhc</p>\r\n</div>\r\n\r\n<p><br />\r\n<strong>() character</strong></p>\r\n\r\n<p>Matches the RE inside the parentheses. The contents can be retrieved or matched later in the string.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example18</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;example.txt is different from example.py&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;(.+)(txt)&quot;,a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;_sre.SRE_Match object; span=(0, 11), match=&#39;example.txt&#39;&gt;<br />\r\n&gt;&gt;&gt; matching.group(1)<br />\r\n&#39;example.&#39;<br />\r\n&gt;&gt;&gt; matching.group(2)<br />\r\n&#39;txt&#39;</tt></p>\r\n\r\n<hr />\r\n<p>Our aim is finding txt files so we use<tt>&nbsp;(.+)(txt) </tt>pattern.<br />\r\n<tt>(.+)(txt) </tt>has two partions. one of them is<tt>&nbsp;(.+) </tt>and<tt> (txt). </tt>After matching we have obtained&nbsp;example.txt.&nbsp;</p>\r\n\r\n<p><tt>(.+)&nbsp;&rArr; &quot;example.&quot;&nbsp;&rArr; group(1)<br />\r\n(txt)&nbsp;&rArr; &quot;txt&quot;&nbsp;&rArr; group(2)</tt><br />\r\n&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Methods and attributes of match object</strong></p>\r\n\r\n<p>It is the result of re.match() and re.search(). Match objects always have a boolean value of True.</p>\r\n\r\n<p>To list of match object, You can use dir function.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; import re<br />\r\n&gt;&gt;&gt; matching = re.match(&quot;Pyth&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;_sre.SRE_<strong>Match object</strong>; span=(0, 4), match=&#39;Pyth&#39;&gt;<br />\r\n&gt;&gt;&gt; dir(matching)</tt><br />\r\n&nbsp;</p>\r\n\r\n<hr />\r\n<p><tt>[&#39;__class__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, <strong>&#39;end&#39;, &#39;endpos&#39;, &#39;expand&#39;, &#39;group&#39;, &#39;groupdict&#39;, &#39;groups&#39;, &#39;lastgroup&#39;, &#39;lastindex&#39;, &#39;pos&#39;, &#39;re&#39;, &#39;regs&#39;, &#39;span&#39;, &#39;start&#39;, &#39;string&#39;</strong>]</tt></p>\r\n</div>\r\n\r\n<p><strong>group() method</strong></p>\r\n\r\n<p>method of _sre.SRE_Match instance.</p>\r\n\r\n<p>Return subgroup(s) of the match by indices or names. For 0 returns the entire match.</p>\r\n\r\n<p>group(indice)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example18:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import re<br />\r\n&gt;&gt;&gt; a = &quot;Python is programming language&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;(Python) (is) (programming) (language)&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;_sre.SRE_Match object; span=(0, 30), match=&#39;Python is programming language&#39;&gt;<br />\r\n&gt;&gt;&gt; matching.group()<br />\r\n&#39;Python is programming language&#39;<br />\r\n&gt;&gt;&gt; matching.group(0)<br />\r\n&#39;Python is programming language&#39;<br />\r\n&gt;&gt;&gt; matching.group(1)<br />\r\n&#39;Python&#39;<br />\r\n&gt;&gt;&gt; matching.group(2)<br />\r\n&#39;is&#39;<br />\r\n&gt;&gt;&gt; matching.group(3)<br />\r\n&#39;programming&#39;<br />\r\n&gt;&gt;&gt; matching.group(4)<br />\r\n&#39;language&#39;<br />\r\n&gt;&gt;&gt; matching.group(1, 2)<br />\r\n(&#39;Python&#39;, &#39;is&#39;)<br />\r\n&gt;&gt;&gt; matching.group(1, 3, 4)<br />\r\n(&#39;Python&#39;, &#39;programming&#39;, &#39;language&#39;)</tt></p>\r\n</div>\r\n\r\n<p><strong>groups() method</strong></p>\r\n\r\n<p>Return a tuple containing all the subgroups of the match, from 1.</p>\r\n\r\n<p>groups(default=None)&nbsp; &rArr; default is used for groups that did not participate in the match.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example19</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import re<br />\r\n&gt;&gt;&gt; a = &quot;Python is programming language&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;(Python) (is) (programming) (language)&quot;, a)<br />\r\n&gt;&gt;&gt; matching.groups()<br />\r\n(&#39;Python&#39;, &#39;is&#39;, &#39;programming&#39;, &#39;language&#39;)</tt></p>\r\n</div>\r\n\r\n<p><strong>end() method</strong></p>\r\n\r\n<p>Return index of the end of the substring matched by group.</p>\r\n\r\n<p>end(group=0)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example20</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;Python is programming language&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;(Python) (is) (programming) (language)&quot;, a)<br />\r\n&gt;&gt;&gt; matching.end()<br />\r\n30<br />\r\n&gt;&gt;&gt; matching.end(1)<br />\r\n6</tt></p>\r\n</div>\r\n\r\n<p><strong>start() method&nbsp;</strong></p>\r\n\r\n<p>Return index of the start of the substring matched by group.</p>\r\n\r\n<p>start(group=0)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Exammple21:&nbsp;Assume that matching is the same as matching in the Example20</p>\r\n\r\n<p>&gt;&gt;&gt; matching.start()<br />\r\n0<br />\r\n&gt;&gt;&gt; matching.start(2)<br />\r\n7</p>\r\n</div>\r\n\r\n<p><strong>endpos attribute</strong></p>\r\n\r\n<p>Return index of the end of the substring matched by group</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example22: Assume that matching is the same as matching in the Example20</p>\r\n\r\n<p><tt>&gt;&gt;&gt; matching.endpos<br />\r\n30</tt></p>\r\n</div>\r\n\r\n<p><strong>span method</strong></p>\r\n\r\n<p>For MatchObject m, return the 2-tuple (m.start(group), m.end(group)).</p>\r\n\r\n<p>span(self, group=0, /)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example23:&nbsp;Assume that matching is the same as matching in the Example20</p>\r\n\r\n<p><tt>&gt;&gt;&gt; matching.span()<br />\r\n(0, 30)<br />\r\n&gt;&gt;&gt; matching.span(1)<br />\r\n(0, 6)<br />\r\n&gt;&gt;&gt; matching.span(2)<br />\r\n(7, 9)</tt></p>\r\n</div>\r\n\r\n<p><strong>lastindex attribute</strong></p>\r\n\r\n<p>return total group number</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; matching.lastindex<br />\r\n4</tt></p>\r\n</div>\r\n\r\n<p><strong>pos attribut</strong></p>\r\n\r\n<p>return starting index</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; matching.pos<br />\r\n0</tt></p>\r\n</div>\r\n\r\n<p><strong>re attribute</strong></p>\r\n\r\n<p>return the pattern of regular expression</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; matching.re<br />\r\nre.compile(&#39;(Python) (is) (programming) (language)&#39;)</tt></p>\r\n</div>\r\n\r\n<p><strong>regs attribute</strong></p>\r\n\r\n<p>return index of all groups</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; matching.regs<br />\r\n((0, 30), (0, 6), (7, 9), (10, 21), (22, 30))</tt></p>\r\n</div>\r\n\r\n<p><strong>string attribute</strong></p>\r\n\r\n<p>return the pattern as strings</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; matching.string<br />\r\n&#39;Python is programming language&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>expand method</strong></p>\r\n\r\n<p>Return the string obtained by doing backslash substitution on the string template, as done by the sub() method which is of re module.</p>\r\n\r\n<p><strong>groupdict() method</strong></p>\r\n\r\n<p>Return a dictionary containing all the named subgroups of the match, keyed by the subgroup name.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>', '<p><strong>Methods and attributes of match object</strong></p>\r\n\r\n<p>It is the result of re.match() and re.search(). Match objects always have a boolean value of True.</p>\r\n\r\n<p>To list of match object, You can use dir function.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; import re<br />\r\n&gt;&gt;&gt; matching = re.match(&quot;Pyth&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;_sre.SRE_<strong>Match object</strong>; span=(0, 4), match=&#39;Pyth&#39;&gt;<br />\r\n&gt;&gt;&gt; dir(matching)</tt></p>\r\n\r\n<hr />\r\n<p><tt>[&#39;__class__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;,&nbsp;<strong>&#39;end&#39;, &#39;endpos&#39;, &#39;expand&#39;, &#39;group&#39;, &#39;groupdict&#39;, &#39;groups&#39;, &#39;lastgroup&#39;, &#39;lastindex&#39;, &#39;pos&#39;, &#39;re&#39;, &#39;regs&#39;, &#39;span&#39;, &#39;start&#39;, &#39;string&#39;</strong>]</tt></p>\r\n</div>\r\n\r\n<p><strong>group() method</strong></p>\r\n\r\n<p>method of _sre.SRE_Match instance.</p>\r\n\r\n<p>Return subgroup(s) of the match by indices or names. For 0 returns the entire match.</p>\r\n\r\n<p>group(indice)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example18:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import re<br />\r\n&gt;&gt;&gt; a = &quot;Python is programming language&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;(Python) (is) (programming) (language)&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;_sre.SRE_Match object; span=(0, 30), match=&#39;Python is programming language&#39;&gt;<br />\r\n&gt;&gt;&gt; matching.group()<br />\r\n&#39;Python is programming language&#39;<br />\r\n&gt;&gt;&gt; matching.group(0)<br />\r\n&#39;Python is programming language&#39;<br />\r\n&gt;&gt;&gt; matching.group(1)<br />\r\n&#39;Python&#39;<br />\r\n&gt;&gt;&gt; matching.group(2)<br />\r\n&#39;is&#39;<br />\r\n&gt;&gt;&gt; matching.group(3)<br />\r\n&#39;programming&#39;<br />\r\n&gt;&gt;&gt; matching.group(4)<br />\r\n&#39;language&#39;<br />\r\n&gt;&gt;&gt; matching.group(1, 2)<br />\r\n(&#39;Python&#39;, &#39;is&#39;)<br />\r\n&gt;&gt;&gt; matching.group(1, 3, 4)<br />\r\n(&#39;Python&#39;, &#39;programming&#39;, &#39;language&#39;)</tt></p>\r\n</div>\r\n\r\n<p><strong>groups() method</strong></p>\r\n\r\n<p>Return a tuple containing all the subgroups of the match, from 1.</p>\r\n\r\n<p>groups(default=None)&nbsp; &rArr; default is used for groups that did not participate in the match.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example19</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import re<br />\r\n&gt;&gt;&gt; a = &quot;Python is programming language&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;(Python) (is) (programming) (language)&quot;, a)<br />\r\n&gt;&gt;&gt; matching.groups()<br />\r\n(&#39;Python&#39;, &#39;is&#39;, &#39;programming&#39;, &#39;language&#39;)</tt></p>\r\n</div>\r\n\r\n<p><strong>end() method</strong></p>\r\n\r\n<p>Return index of the end of the substring matched by group.</p>\r\n\r\n<p>end(group=0)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example20</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;Python is programming language&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;(Python) (is) (programming) (language)&quot;, a)<br />\r\n&gt;&gt;&gt; matching.end()<br />\r\n30<br />\r\n&gt;&gt;&gt; matching.end(1)<br />\r\n6</tt></p>\r\n</div>\r\n\r\n<p><strong>start() method&nbsp;</strong></p>\r\n\r\n<p>Return index of the start of the substring matched by group.</p>\r\n\r\n<p>start(group=0)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Exammple21:&nbsp;Assume that matching is the same as matching in the Example20</p>\r\n\r\n<p>&gt;&gt;&gt; matching.start()<br />\r\n0<br />\r\n&gt;&gt;&gt; matching.start(2)<br />\r\n7</p>\r\n</div>\r\n\r\n<p><strong>endpos attribute</strong></p>\r\n\r\n<p>Return index of the end of the substring matched by group</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example22: Assume that matching is the same as matching in the Example20</p>\r\n\r\n<p><tt>&gt;&gt;&gt; matching.endpos<br />\r\n30</tt></p>\r\n</div>\r\n\r\n<p><strong>span method</strong></p>\r\n\r\n<p>For MatchObject m, return the 2-tuple (m.start(group), m.end(group)).</p>\r\n\r\n<p>span(self, group=0, /)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example23:&nbsp;Assume that matching is the same as matching in the Example20</p>\r\n\r\n<p><tt>&gt;&gt;&gt; matching.span()<br />\r\n(0, 30)<br />\r\n&gt;&gt;&gt; matching.span(1)<br />\r\n(0, 6)<br />\r\n&gt;&gt;&gt; matching.span(2)<br />\r\n(7, 9)</tt></p>\r\n</div>\r\n\r\n<p><strong>lastindex attribute</strong></p>\r\n\r\n<p>return total group number</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; matching.lastindex<br />\r\n4</tt></p>\r\n</div>\r\n\r\n<p><strong>pos attribut</strong></p>\r\n\r\n<p>return starting index</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; matching.pos<br />\r\n0</tt></p>\r\n</div>\r\n\r\n<p><strong>re attribute</strong></p>\r\n\r\n<p>return the pattern of regular expression</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; matching.re<br />\r\nre.compile(&#39;(Python) (is) (programming) (language)&#39;)</tt></p>\r\n</div>\r\n\r\n<p><strong>regs attribute</strong></p>\r\n\r\n<p>return index of all groups</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; matching.regs<br />\r\n((0, 30), (0, 6), (7, 9), (10, 21), (22, 30))</tt></p>\r\n</div>\r\n\r\n<p><strong>string attribute</strong></p>\r\n\r\n<p>return the pattern as strings</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; matching.string<br />\r\n&#39;Python is programming language&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>expand method</strong></p>\r\n\r\n<p>Return the string obtained by doing backslash substitution on the string template, as done by the sub() method which is of re module.</p>\r\n\r\n<p><strong>groupdict() method</strong></p>\r\n\r\n<p>Return a dictionary containing all the named subgroups of the match, keyed by the subgroup name.&nbsp;</p>', '<p>They have special symbols that have special meanings.</p>\r\n\r\n<p><strong>\\s</strong></p>\r\n\r\n<p>Matches any whitespace character:&nbsp;equivalent to [ \\t\\n\\r\\f\\v]</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;John Rock&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;John Rock&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;_sre.SRE_Match object; span=(0, 9), <strong>match=&#39;John Rock&#39;</strong>&gt;</tt></p>\r\n\r\n<hr />\r\n<p>or you can prefer&nbsp;\\s character in the pattern to &quot;John Rock&quot; like this: &quot;John\\sLock&quot;. Look at below example</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; a = &quot;John Rock&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;John\\sRock&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;_sre.SRE_Match object; span=(0, 9), <strong>match=&#39;John Rock&#39;</strong>&gt;</tt></p>\r\n\r\n<hr />\r\n<p>If you had&nbsp;newline character (\\n) character between John Rock like this: &quot;John\\nRock&quot;, what would you do? Lets look below please</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt; a = &quot;John\\nRock&quot;<br />\r\n&gt;&gt;&gt; print(a)<br />\r\nJohn<br />\r\nRock<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;John Rock&quot;, a)<br />\r\n&gt;&gt;&gt; print(matching)<br />\r\nNone</p>\r\n\r\n<hr />\r\n<p>we couldn&#39;t match using &quot;John Rock&quot; pattern. But we can prefer \\s special character. Let&#39;s look below example.</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt; matching = re.search(&quot;John\\sRock&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;_sre.SRE_Match object; span=(0, 9), match=&#39;John\\nRock&#39;&gt;</p>\r\n</div>\r\n\r\n<p><strong>\\S &nbsp; &nbsp; </strong>&nbsp;</p>\r\n\r\n<p>Matches any non-whitespace character; equivalent to [^\\s].</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;a b cdf&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;\\S\\S\\S&quot;, a)<br />\r\n&gt;&gt;&gt; matching.group()<br />\r\n&#39;cdf&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>\\d</strong></p>\r\n\r\n<p>Matches any decimal digit; equivalent to the set [0-9]</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3</p>\r\n\r\n<p>&gt;&gt;&gt; a = &quot;This clas is 10-B&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;\\d\\d-[A-Z]&quot;, a)<br />\r\n&gt;&gt;&gt; matching.group()<br />\r\n&#39;10-B&#39;</p>\r\n\r\n<hr />\r\n<p>You can use () for group. Now we will update above&nbsp;pattern is like this :&nbsp;&nbsp;&nbsp;&quot;(\\d)(\\d)-([A-Z])&quot;</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; matching = re.search(&quot;(\\d)(\\d)-([A-Z])&quot;, a)<br />\r\n&gt;&gt;&gt; matching.group(1)<br />\r\n&#39;1&#39;<br />\r\n&gt;&gt;&gt; matching.group(2)<br />\r\n&#39;0&#39;<br />\r\n&gt;&gt;&gt; matching.group(3)<br />\r\n&#39;B&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>\\D &nbsp; &nbsp; </strong>&nbsp;</p>\r\n\r\n<p>Matches any non-digit character; equivalent to [^\\d].</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;1aa2abc&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;\\D\\D\\D&quot;, a)<br />\r\n&gt;&gt;&gt; matching.group()<br />\r\n&#39;abc&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>\\w</strong></p>\r\n\r\n<p>Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;1_a**???&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;\\w\\w\\w&quot;, a)<br />\r\n&gt;&gt;&gt; matching.group()<br />\r\n&#39;1_a</tt>&#39;</p>\r\n</div>\r\n\r\n<p><strong>\\W</strong></p>\r\n\r\n<p>Matches the complement of \\w.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example6</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;1_a**?&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;\\W\\W\\W&quot;, a)<br />\r\n&gt;&gt;&gt; matching.group()<br />\r\n&#39;**?</tt></p>\r\n</div>\r\n\r\n<p><strong>\\b</strong> &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>Matches the empty string, but only at the start or end of a word.</p>\r\n\r\n<p><strong>\\B &nbsp; </strong>&nbsp; &nbsp;</p>\r\n\r\n<p>Matches the empty string, but not at the start or end of a word.&nbsp;</p>\r\n\r\n<p><strong>&nbsp;\\\\</strong></p>\r\n\r\n<p>Matches a literal backslash.</p>\r\n\r\n<p><strong>\\number &nbsp;</strong></p>\r\n\r\n<p>Matches the contents of the group of the same number.</p>', '<p>Regular expressions can contain both special and ordinary characters. Most ordinary characters, like &quot;A&quot;, &quot;a&quot;, or &quot;0&quot;.</p>\r\n\r\n<p>Special characters are [ ] . \\* + ? { } ^ $ | ( )</p>\r\n\r\n<p><strong>[] character</strong></p>\r\n\r\n<p>It indicates a set of characters. It filter for every character in&nbsp;them.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;car, home, jar, &nbsp;bar, flowers&quot;<br />\r\n&gt;&gt;&gt; matching = re.findall(&quot;[bcj]ar&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n[&#39;car&#39;, &#39;jar&#39;, &#39;bar&#39;]</tt></p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import re<br />\r\n&gt;&gt;&gt;&nbsp;a = &quot;a2b b2q 321 m4h c4p 1fg 56y mkn hjk n7p&quot;<br />\r\n&gt;&gt;&gt; matching = re.findall(&quot;[a-z][0-9][a-z]&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n[&#39;a2b&#39;, &#39;b2q&#39;, &#39;m4h&#39;, &#39;c4p&#39;, &#39;n7p&#39;]</tt></p>\r\n\r\n<hr />\r\n<p>Above our pattern is &quot;<tt>[a-z][0-9][a-z]&quot; &rArr; three character, first one is a letter, second one is a number(string) and third one is a letter<br />\r\n&quot;[a-z]&quot; means a&nbsp;letter&nbsp;which can be one of all letters(a, b, c, d, ...)<br />\r\n&quot;[0-9]&quot; means a digit(string) which can be one of digits (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</tt></p>\r\n\r\n<hr />\r\n<p>[A-Z] means&nbsp;<tt>a&nbsp;letter&nbsp;which can be one of all letters(A, B, C, D, ...)</tt></p>\r\n</div>\r\n\r\n<p><strong>. dot character</strong></p>\r\n\r\n<p>Matches any character except a newline. It can be &quot;a&quot;, &quot;b&quot;,&nbsp;&quot;A&quot;, &quot;B&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;*&quot;, &quot;-&quot;, &quot;_&quot;,&quot; &quot;, ... But \\n character not. It only holds one character.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example6</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;abc&quot;, &quot;a1b&quot;, &quot;321&quot;, &quot;m45&quot;, &quot;56y&quot;, &quot;mkn&quot;, &quot;hjk&quot;, &quot;n7p&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.match(&quot;.[a-z]&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<p>abc<br />\r\nmkn<br />\r\nhjk</p>\r\n\r\n<hr />\r\n<p><tt>patterns is &quot;.[a-z]&quot; &rArr; two character.<br />\r\n&quot;.&quot; means a&nbsp;character which can be a letter or number for above example.<br />\r\n&quot;[a-z]&quot; means a letter&nbsp;which can be one of all letters(a, b, c, d, ...).</tt></p>\r\n\r\n<p><tt>So because of using match method, It is applied</tt>&nbsp;the pattern at the start of the string&nbsp;in the list.</p>\r\n</div>\r\n\r\n<p><strong>* character</strong></p>\r\n\r\n<p>Matches 0 or more &nbsp;repetitions of the preceding RE. It run only one character before itself.&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example7</p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;a&quot;, &quot;ab&quot;, &quot;ybc&quot;, &quot;abbc&quot;, &quot;aahb&quot;, &quot;klm&quot;, &quot;abbbbbbbyuo&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if re.match(&quot;ab*&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(word)</p>\r\n\r\n<p>a<br />\r\nab<br />\r\nabbc<br />\r\naahb<br />\r\nabbbbbbbyuo</p>\r\n\r\n<hr />\r\n<p>pattern is &quot;ab*&quot;&nbsp;&rArr; one or more characters<br />\r\n&quot;a&quot; means first character must be &quot;a&quot; character<br />\r\nb* means zero or more character which can be &quot;&quot;, b, &quot;bb&quot;, &quot;bbb&quot;, &quot;bbbb&quot;, ...</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example8:</p>\r\n\r\n<p>a = [&quot;wisely&quot;, &quot;essentially&quot;,&nbsp; &quot;basically&quot;, &quot;naturally&quot;, &quot;obviously&quot;, &quot;sometimes&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if re.match(&quot;.*ly&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(word)</p>\r\n\r\n<p>wisely<br />\r\nessentially<br />\r\nbasically<br />\r\nnaturally<br />\r\nobviously</p>\r\n\r\n<hr />\r\n<p>our pattern is&nbsp;&quot;.*ly&quot; &rArr; a word which matches the end(&quot;ly&quot;) of the string&nbsp;for above example.</p>\r\n\r\n<p>&quot;.*&quot; means more than zero any character&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>+ character</strong></p>\r\n\r\n<p>Matches 1 or more (greedy) repetitions of the preceding RE.&nbsp;It run only one character before itself.&nbsp;</p>\r\n\r\n<p>Example9</p>\r\n\r\n<p>&gt;&gt;&gt; a = [&quot;a&quot;, &quot;ab&quot;, &quot;ybc&quot;, &quot;abbc&quot;, &quot;aahb&quot;, &quot;klm&quot;, &quot;abbbbbbbyuo&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if re.match(&quot;ab+&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(word)</p>\r\n\r\n<p>ab<br />\r\nabbc<br />\r\nabbbbbbbyuo</p>\r\n\r\n<hr />\r\n<p>Compare this above example with Example7 please.</p>\r\n\r\n<hr />\r\n<p>pattern is &quot;ab+&quot;&nbsp;&rArr; two&nbsp;or more characters<br />\r\n&quot;a&quot; means first character must be &quot;a&quot; character<br />\r\nb+&nbsp;means one&nbsp;or more character which can be &nbsp;b, &quot;bb&quot;, &quot;bbb&quot;, &quot;bbbb&quot;, ...</p>\r\n\r\n<p><br />\r\n<strong>? character</strong></p>\r\n\r\n<p><tt>Example10</tt></p>\r\n\r\n<p><tt>Matches 0 or 1 &nbsp;of the preceding RE.</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;ac&quot;, &quot;abc&quot;, &quot;abbc&quot;, &quot;abbbc&quot;, &quot;abbbbbc&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.match(&quot;ab?c&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<hr />\r\n<p><tt>ac<br />\r\nabc</tt></p>\r\n\r\n<hr />\r\n<p>pattern is &quot;ab?c&quot;&nbsp;&rArr; two&nbsp;or three&nbsp;characters<br />\r\n&quot;a&quot; means first character must be &quot;a&quot; character<br />\r\nb?&nbsp;means zero&nbsp;or one&nbsp;character&nbsp;<br />\r\n&quot;c&quot; means last&nbsp;character must be &quot;c&quot; character</p>\r\n\r\n<p><br />\r\n<strong>{} character</strong></p>\r\n\r\n<p>{m,n} matches from m to n repetitions of the preceding RE.</p>\r\n\r\n<p>{m} matches m repetitions of the preceding RE.</p>\r\n\r\n<p>Example11</p>\r\n\r\n<p><tt>&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.match(&quot;ab{2}c&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<p><tt>abbc</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.match(&quot;ab{1,3}c&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<p><tt>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\nabc<br />\r\nabbc<br />\r\nabbbc</tt></p>\r\n\r\n<p><br />\r\n<strong>^ character</strong></p>\r\n\r\n<p>Matches the start of the string.</p>\r\n\r\n<p>Example12</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;ab&quot;, &quot;abc&quot;, &quot;bac&quot;, &quot;cab&quot;, &quot;abcdef&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.search(&quot;^ab&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<p><tt>ab<br />\r\nabc<br />\r\nabcdef</tt></p>\r\n\r\n<hr />\r\n<p><tt>Example13</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.search(&quot;ab&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<p><tt>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\nab<br />\r\nabc<br />\r\ncab<br />\r\nabcdef</tt></p>\r\n\r\n<hr />\r\n<p>search() method normally look anywhere in the&nbsp;string like Example13. But if we want to look at&nbsp;at the start of the string like match meyhod, we can use ^ character.</p>\r\n\r\n<p><br />\r\nIt has one more feature when it is used inside bracket [].</p>\r\n\r\n<p>It means don&#39;t match character(s) inside bracket.</p>\r\n\r\n<p>Example14</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;apple&quot;, &quot;home&quot;, &quot;arm&quot;, &quot;flowers&quot;, &quot;altitude&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.match(&quot;[^a]&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<hr />\r\n<p><tt>home<br />\r\nflowers</tt></p>\r\n\r\n<hr />\r\n<p><tt>&quot;[^a]&quot; means we don&#39;t want to match with &quot;a&quot;.&nbsp;</tt></p>\r\n\r\n<p><br />\r\n<strong>$ character</strong></p>\r\n\r\n<p>Matches the end of the string or just before the newline at the end of the string.</p>\r\n\r\n<p>Example15</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;abc&quot;, &quot;adc&quot;, &quot;asbc&quot;, &quot;afbc&quot;, &quot;asdf&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.search(&quot;bc$&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<hr />\r\n<p><tt>abc<br />\r\nasbc<br />\r\nafbc</tt></p>\r\n\r\n<hr />\r\n<p><tt>&quot;bc$&quot; means we want to find &quot;bc&quot; characters at ending&nbsp;of the string.</tt></p>\r\n\r\n<p><br />\r\n<strong>\\ character</strong></p>\r\n\r\n<p>Either escapes special characters or signals a special sequence.</p>\r\n\r\n<p>If we want to match special characters( [ ] . \\* + ? { } ^ $ | ( )) of regular expression, we need \\ character to ignore them.</p>\r\n\r\n<p>Example16</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = [&quot;$10&quot;, &quot;&euro;25&quot;, &quot;$20&quot;, &quot;&pound;45&quot;]<br />\r\n&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.search(&quot;\\$&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<hr />\r\n<p><tt>$10<br />\r\n$20</tt></p>\r\n\r\n<p><br />\r\n<strong>| character</strong></p>\r\n\r\n<p>A|B, creates an RE that will match either A or B.</p>\r\n\r\n<p>A and B are&nbsp;the&nbsp;patterns.</p>\r\n\r\n<p>Example17</p>\r\n\r\n<p><tt>&gt;&gt;&gt; for word in a:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if re.search(&quot;^a|c$&quot;, word):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(word)</tt></p>\r\n\r\n<hr />\r\n<p>abc<br />\r\nadf<br />\r\nhgc<br />\r\nakl<br />\r\nhjhhc</p>\r\n\r\n<p><br />\r\n<strong>() character</strong></p>\r\n\r\n<p>Matches the RE inside the parentheses. The contents can be retrieved or matched later in the string.</p>\r\n\r\n<p>Example18</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;example.txt is different from example.py&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;(.+)(txt)&quot;,a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;_sre.SRE_Match object; span=(0, 11), match=&#39;example.txt&#39;&gt;<br />\r\n&gt;&gt;&gt; matching.group(1)<br />\r\n&#39;example.&#39;<br />\r\n&gt;&gt;&gt; matching.group(2)<br />\r\n&#39;txt&#39;</tt></p>\r\n\r\n<hr />\r\n<p>Our aim is finding txt files so we use<tt>&nbsp;(.+)(txt) </tt>pattern.<br />\r\n<tt>(.+)(txt) </tt>has two partions. one of them is<tt>&nbsp;(.+) </tt>and<tt> (txt). </tt>After matching we have obtained&nbsp;example.txt.&nbsp;</p>\r\n\r\n<p><tt>(.+)&nbsp;&rArr; &quot;example.&quot;&nbsp;&rArr; group(1)<br />\r\n(txt)&nbsp;&rArr; &quot;txt&quot;&nbsp;&rArr; group(2)</tt></p>', '<p><strong>compile()</strong></p>\r\n\r\n<p>Compile a regular expression pattern, returning a pattern object. Using compile() method, the long programs run more quickly. So it is very useful to be fast.</p>\r\n\r\n<p>compile(pattern, flags=0)&nbsp;&rArr; pattern object</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1</p>\r\n\r\n<p><tt>&gt;&gt;&gt; pattern = re.compile(&quot;[a-z][\\d]&quot;)<br />\r\n&gt;&gt;&gt; pattern<br />\r\nre.compile(&#39;[a-z][\\\\d]&#39;)<br />\r\n&gt;&gt;&gt; type(pattern)<br />\r\n&lt;class &#39;_sre.SRE_Pattern&#39;&gt;<br />\r\n&gt;&gt;&gt; a = [&quot;a1b&quot;, &quot;b5abc&quot;, &quot;1bhkl&quot;, &quot;y5q&quot;, &quot;568&quot;]<br />\r\n&gt;&gt;&gt; for i in a:<br />\r\n&nbsp;&nbsp; &nbsp;matching = pattern.match(i)<br />\r\n&nbsp;&nbsp; &nbsp;if matching:<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;print(i)</tt></p>\r\n\r\n<hr />\r\n<p><tt>a1b<br />\r\nb5abc<br />\r\ny5q</tt></p>\r\n</div>\r\n\r\n<p><strong>Flags</strong></p>\r\n\r\n<p>Some of the functions in this module takes flags as optional parameters which are A, I, L, M, S, V, U.</p>\r\n\r\n<p><strong>re.I&nbsp; IGNORECASE &nbsp;</strong></p>\r\n\r\n<p>Perform case-insensitive matching.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;Python and python&quot;<br />\r\n&gt;&gt;&gt; pattern = re.compile(&quot;python&quot;, re.I)<br />\r\n&gt;&gt;&gt; pattern<br />\r\nre.compile(&#39;python&#39;, re.IGNORECASE)<br />\r\n&gt;&gt;&gt; pattern.findall(a)<br />\r\n[&#39;Python&#39;, &#39;python&#39;]</tt></p>\r\n\r\n<hr />\r\n<p>You can prefer&nbsp;<tt>re.IGNORECASE</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; pattern = re.compile(&quot;Python&quot;, re.IGNORECASE)<br />\r\n&gt;&gt;&gt; pattern.findall(a)<br />\r\n[&#39;Python&#39;, &#39;python&#39;]</tt></p>\r\n</div>\r\n\r\n<p><strong>re.S&nbsp; DOTALL</strong> &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>&quot;.&quot; matches any character at all, including the newline.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3</p>\r\n\r\n<p>&gt;&gt;&gt; a = &quot;John\\nRock&quot;<br />\r\n&gt;&gt;&gt; pattern = re.compile(&quot;John.Rock&quot;, re.S)<br />\r\n&gt;&gt;&gt; matching = pattern.search(a)<br />\r\n&gt;&gt;&gt; matching.group()<br />\r\n&#39;John\\nRock&#39;</p>\r\n\r\n<hr />\r\n<p>You can prefer re.DOTALL instead re.S</p>\r\n</div>\r\n\r\n<p><strong>re.A &nbsp;ASCII </strong>&nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D match the corresponding ASCII character categories (rather than the whole Unicode categories, which is the default). For bytes patterns, this flag is the only available behaviour and needn&#39;t be specified.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4</p>\r\n\r\n<p>&gt;&gt;&gt; a =&quot;5Ş&quot;<br />\r\n&gt;&gt;&gt; pattern = re.compile(&quot;\\d\\w&quot;)<br />\r\n&gt;&gt;&gt; pattern.match(a)<br />\r\n&lt;_sre.SRE_Match object; span=(0, 2), match=&#39;5Ş&#39;&gt;</p>\r\n\r\n<hr />\r\n<p>&gt;&gt;&gt; pattern = re.compile(&quot;\\d\\w&quot;, re.A)<br />\r\n&gt;&gt;&gt; print(pattern.match(a))<br />\r\nNone<br />\r\n&nbsp; &nbsp; &nbsp;</p>\r\n</div>\r\n\r\n<p><strong>re.L &nbsp;LOCALE </strong>&nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>Make \\w, \\W, \\b, \\B, dependent on the current locale.</p>\r\n\r\n<p><strong>re.M &nbsp;MULTILINE</strong> &nbsp;</p>\r\n\r\n<p>&quot;^&quot; matches the beginning of lines (after a newline) as well as the string.<br />\r\n&quot;$&quot; matches the end of lines (before a newline) as well as the end of the string.</p>\r\n\r\n<p><strong>re.X &nbsp;VERBOSE</strong> &nbsp; &nbsp;</p>\r\n\r\n<p>Ignore whitespace and comments for nicer looking RE&#39;s.</p>\r\n\r\n<p><strong>re.U &nbsp;UNICODE </strong>&nbsp; &nbsp;</p>\r\n\r\n<p>For compatibility only. Ignored for string patterns (it is the default), and forbidden for bytes patterns.</p>\r\n\r\n<p><strong>sub() method</strong></p>\r\n\r\n<p>It can update a string according to replacement string.</p>\r\n\r\n<p>sub(pattern, repl, string, count=0, flags=0)&nbsp;&rArr; updated string</p>\r\n\r\n<p>repl can be either a string or a callable(function) returning a string.</p>\r\n\r\n<p>Assume that you have the&nbsp;text asked&nbsp;for&nbsp;updating&nbsp;like this:</p>\r\n\r\n<p>&quot;John is a doctor&quot;&nbsp;&rArr; &quot;Tom is a doctor&quot;<br />\r\nFor this assumption,<br />\r\npattern is &quot;John&quot;<br />\r\nrep is &quot;Tom&quot;<br />\r\nstring is &quot;John is a doctor&quot;<br />\r\ncount is as default is 0 meaning &quot;update all matching&quot;&nbsp;<br />\r\nflag is can be re.I, re.S, ...</p>\r\n\r\n<p>Now Lets see the codes of them with sub() method</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;John is a Doctor. John&#39;s from the USA&quot;<br />\r\n&gt;&gt;&gt; re.sub(&quot;John&quot;, &quot;Tom&quot;, a)<br />\r\nTom is a Doctor. Tom&#39;s from the USA</tt></p>\r\n\r\n<hr />\r\n<p>you you can prefer&nbsp;compile() methodwith sub() method for increasing speed. Look at below please for above ecample</p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; a = &quot;John is a doctor&quot;<br />\r\n&gt;&gt;&gt; pattern = re.compile(&quot;John&quot;)<br />\r\n&gt;&gt;&gt; pattern.sub(&quot;Tom&quot;, a)<br />\r\n&#39;Tom is a doctor&#39;&nbsp;</tt></p>\r\n\r\n<hr />\r\n<p>We can use a function instead above example. This function must have matching object as parameter and return a string for every matching. Look at below please</p>\r\n\r\n<p><strong>example.py</strong><br />\r\nimport re<br />\r\na = &quot;John is a Doctor. John&#39;s from the USA&quot;<br />\r\npattern = re.compile(&quot;John&quot;)<br />\r\ndef sending(matching):<br />\r\n&nbsp; &nbsp; print(matching)<br />\r\n&nbsp; &nbsp; return &quot;Tom&quot;</p>\r\n\r\n<p>print(pattern.sub(sending, a))</p>\r\n\r\n<hr />\r\n<p>&lt;_sre.SRE_Match object; span=(0, 4), match=&#39;John&#39;&gt;<br />\r\n&lt;_sre.SRE_Match object; span=(18, 22), match=&#39;John&#39;&gt;<br />\r\nTom is a Doctor. Tom&#39;s from the USA</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example6:</p>\r\n\r\n<p>&gt;&gt;&gt; a = &quot;John is a Doctor. John&#39;s from the USA&quot;<br />\r\n&gt;&gt;&gt; pattern = re.compile(&quot;John&quot;)<br />\r\n&gt;&gt;&gt; pattern.sub(&quot;Tom&quot;, a, 1)<br />\r\n&quot;Tom is a Doctor. John&#39;s from the USA&quot;</p>\r\n\r\n<hr />\r\n<p>due to count (1), only one &quot;Tom&quot; is changed&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>subn() method</strong></p>\r\n\r\n<p>Return a 2-tuple containing (new_string, number).&nbsp;number is the number of substitutions that were made.&nbsp;repl can be either a string or a callable like sub() method.</p>\r\n\r\n<p>subn(pattern, repl, string, count=0, flags=0)&nbsp;&rArr; a tuple&nbsp;(new_string, number)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example7</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;John is a Doctor. John&#39;s from the USA&quot;<br />\r\n&gt;&gt;&gt; pattern = re.compile(&quot;John&quot;)<br />\r\n&gt;&gt;&gt; pattern.subn(&quot;Tom&quot;, a)<br />\r\n(&quot;Tom is a Doctor. Tom&#39;s from the USA&quot;, 2)</tt></p>\r\n</div>\r\n\r\n<p><strong>match() methods</strong>&nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>Match a regular expression pattern to the beginning of a string. It returns&nbsp;a match object, or None if no match was found.</p>\r\n\r\n<p>match(pattern, string, flags=0)&nbsp;&rArr; match object or None</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example8</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;John is a doctor&quot;<br />\r\n&gt;&gt;&gt; re.match(&quot;John&quot;, a)<br />\r\n&lt;_sre.SRE_Match object; span=(0, 4), match=&#39;John&#39;&gt;</tt></p>\r\n</div>\r\n\r\n<p><strong>fullmatch methods</strong></p>\r\n\r\n<p>Match a regular expression pattern to all of a string. It returns a match object, or None if no match was found.</p>\r\n\r\n<p>fullmatch(pattern, string, flags=0)&nbsp;&rArr; match object or None</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example9</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;John is a doctor&quot;<br />\r\n&gt;&gt;&gt; matching = re.fullmatch(&quot;John is a doctor&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;_sre.SRE_Match object; span=(0, 16), match=&#39;John is a doctor&#39;&gt;</tt></p>\r\n</div>\r\n\r\n<p><strong>search() method&nbsp;</strong> &nbsp;&nbsp;</p>\r\n\r\n<p>Search a string for the presence of a pattern.&nbsp;It returns a match object, or None if no match was found.</p>\r\n\r\n<p>search(pattern, string, flags=0)&nbsp;&rArr; match object or None</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example10</p>\r\n\r\n<p>&gt;&gt;&gt; a = &quot;John is a doctor&quot;<br />\r\n&gt;&gt;&gt; matching = re.search(&quot;doctor&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;_sre.SRE_Match object; span=(10, 16), match=&#39;doctor&#39;&gt;</p>\r\n</div>\r\n\r\n<p><strong>split() method</strong></p>\r\n\r\n<p>Split a string by the occurrences of a pattern. It returns&nbsp;a list containing the resulting substrings. &nbsp;</p>\r\n\r\n<p>split(pattern, string, maxsplit=0, flags=0)&nbsp;&rArr; list</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example11</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;John is a doctor. John&#39;s from the USA&quot;<br />\r\n&gt;&gt;&gt; re.split(&quot;John&quot;, a)<br />\r\n[&#39;&#39;, &#39; is a doctor. &#39;, &quot;&#39;s from the USA&quot;]</tt></p>\r\n\r\n<hr />\r\n<p>If capturing parentheses are used in pattern, then the text of all groups in the pattern are also returned as part of the resulting list.</p>\r\n\r\n<p><tt>&gt;&gt;&gt; re.split(&quot;(Jo)hn&quot;, a)<br />\r\n[&#39;&#39;, &#39;Jo&#39;, &#39; is a doctor. &#39;, &#39;Jo&#39;, &quot;&#39;s from the USA&quot;]</tt></p>\r\n\r\n<hr />\r\n<p>If maxsplit is nonzero, at most maxsplit splits occur, and the remainder of the string is returned as the final element of the list.</p>\r\n\r\n<p><tt>&gt;&gt;&gt; re.split(&quot;John&quot;,a, 1)<br />\r\n[&#39;&#39;, &quot; is a doctor. John&#39;s from the USA&quot;]</tt></p>\r\n</div>\r\n\r\n<p><strong>findall() method</strong></p>\r\n\r\n<p>Find all occurrences of a pattern in a string.&nbsp;If one or more capturing groups are present in the pattern, return a list of groups.</p>\r\n\r\n<p>findall(pattern, string, flags=0)&nbsp;&rArr; list</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example12</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;John is a doctor. John&#39;s from the USA&quot;<br />\r\n&gt;&gt;&gt; re.findall(&quot;John&quot;, a)<br />\r\n[&#39;John&#39;, &#39;John&#39;]</tt></p>\r\n\r\n<hr />\r\n<p>There will be a list of tuples if the patternhas more than one group.</p>\r\n\r\n<p><tt>&gt;&gt;&gt; re.findall(&quot;(J)(o)(h)(n)&quot;, a)<br />\r\n[(&#39;J&#39;, &#39;o&#39;, &#39;h&#39;, &#39;n&#39;), (&#39;J&#39;, &#39;o&#39;, &#39;h&#39;, &#39;n&#39;)]</tt></p>\r\n</div>\r\n\r\n<p><strong>finditer() method</strong></p>\r\n\r\n<p>Return an iterator yielding a match object for each match.&nbsp;For each match, the iterator returns a match object.</p>\r\n\r\n<p>finditer(pattern, string, flags=0)&nbsp;&rArr; iterator object</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example12</p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = &quot;John is a doctor. John&#39;s from the USA&quot;<br />\r\n&gt;&gt;&gt; matching = re.finditer(&quot;John&quot;, a)<br />\r\n&gt;&gt;&gt; matching<br />\r\n&lt;callable_iterator object at 0x02258D50&gt;<br />\r\n&gt;&gt;&gt; for i in matching:<br />\r\n&nbsp;&nbsp; &nbsp;print(i)</tt></p>\r\n\r\n<p><tt>&lt;_sre.SRE_Match object; span=(0, 4), match=&#39;John&#39;&gt;<br />\r\n&lt;_sre.SRE_Match object; span=(18, 22), match=&#39;John&#39;&gt;</tt></p>\r\n</div>\r\n\r\n<p><strong>purge() method&nbsp;</strong> &nbsp; &nbsp;</p>\r\n\r\n<p>Clear the regular expression cache.</p>\r\n\r\n<p>purge()</p>\r\n\r\n<p><strong>escape() method&nbsp; &nbsp;</strong></p>\r\n\r\n<p>Backslash all non-alphanumerics in a string.&nbsp;Escape all the characters in pattern except ASCII letters, numbers and &#39;_&#39;.</p>\r\n\r\n<p>escape(pattern)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example13</p>\r\n\r\n<p><tt>&gt;&gt;&gt; re.escape(&quot;abc123,+-_?&quot;)<br />\r\n&#39;abc123\\\\,\\\\+\\\\-_\\\\?&#39;</tt></p>\r\n</div>', '<p>SQLite&nbsp;is a database system which is file keep storing data. It has mapping feature from keys to values like dictionary but it&nbsp;has limited memory. So the database system is very necessary to insert, access and update datas in database file.&nbsp;</p>\r\n\r\n<p>Other database systems are&nbsp;Oracle, MySQL, Microsoft SQL Server, PostgreSQL, ...In this lesson we are going to learn&nbsp;SQLite which is very common database and&nbsp; is ready in&nbsp;in Python as sqlite3.&nbsp;Adobe, Apple, Mozilla/Firefox, Google, Symbian and&nbsp;&nbsp;Sun use&nbsp;the SQLite database internally.</p>\r\n\r\n<p>On the other hand sqlite has very useful features:</p>\r\n\r\n<p>* It is very easyt to use.<br />\r\n* It don&#39;t need database server<br />\r\n* open source and free usage<br />\r\n* Python&#39;s strong support</p>\r\n\r\n<p><strong>Structure of a database</strong></p>\r\n\r\n<p>The database system consist of&nbsp;&nbsp;three important parts:&nbsp;tables, rows, and columns.</p>\r\n\r\n<table border="1" cellpadding="1" cellspacing="1" style="width:100px">\r\n\t<caption><strong>Table</strong></caption>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Colum1</strong></td>\r\n\t\t\t<td><strong>Colum2</strong></td>\r\n\t\t\t<td><strong>Colum3</strong></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Value1</td>\r\n\t\t\t<td>Value2</td>\r\n\t\t\t<td>Value3</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table border="1" cellpadding="1" cellspacing="1" style="width:100px">\r\n\t<caption><strong>Identity</strong></caption>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><strong>Name</strong></td>\r\n\t\t\t<td><strong>Surname</strong></td>\r\n\t\t\t<td><strong>City</strong></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>John</td>\r\n\t\t\t<td>Rock</td>\r\n\t\t\t<td>Paris</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Tom</td>\r\n\t\t\t<td>Click</td>\r\n\t\t\t<td>Rome</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><strong>Creating a new database</strong></p>\r\n\r\n<p>In order to use sqlite database system in Python, we should import sqlite3 module whose method is connect().</p>\r\n\r\n<p><strong>connect method(database)&nbsp;&rArr; Connection Object</strong></p>\r\n\r\n<p>Opens a connection to the SQLite database file *database*.&nbsp;If the database&nbsp;does not exist, it will be created.&nbsp;If the database&nbsp;exists, it will be connected.</p>\r\n\r\n<p>database&nbsp;&rArr; database_name.sqlite3 or&nbsp;database_name.sqlite or&nbsp;database_name.db or&nbsp;database_name.db3</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import sqlite3<br />\r\n&gt;&gt;&gt; db = sqlite3.connect(&#39;example.sqlite3&#39;)<br />\r\n&gt;&gt;&gt; db<br />\r\n&lt;sqlite3.Connection object at 0x02515CA0&gt;</tt></p>\r\n\r\n<hr />\r\n<p>You can give path with filename, too.&nbsp;</p>\r\n\r\n<p><tt>&gt;&gt;&gt; db&nbsp;= sqlite3.connect(&#39;/home/username/example.sqlite3&#39;) #GNU/Linux<br />\r\n&gt;&gt;&gt; db&nbsp;= sqlite3.connect(&#39;c:/users/username/desktop/example.sqlite3&#39;) #Windows</tt></p>\r\n\r\n<hr />\r\n<p>You can use &quot;:memory:&quot; to open a database connection to a database that resides in RAM instead of on disk.</p>\r\n\r\n<p>&gt;&gt;&gt; db = sqlite3.connect(&#39;:memory:&#39;)</p>\r\n\r\n<hr />\r\n<p>You can use &#39;&#39;&nbsp;to open&nbsp;a database connection to a database that resides on&nbsp;Disk&nbsp;</p>\r\n\r\n<p><tt>&gt;&gt;&gt; db&nbsp;= sqlite3.connect(&#39;&#39;)</tt></p>\r\n</div>\r\n\r\n<p><strong>Note:</strong> when you create a sqlite database without path, this database will be in current directory of Python. If you are in desktop, your file will be in desktop.&nbsp;</p>\r\n\r\n<p><strong>Creating cursor connecting&nbsp;a database</strong></p>\r\n\r\n<p>After connecting the database, you can create a cursor via cursor() method.</p>\r\n\r\n<p><strong>cursor() method of a connection</strong></p>\r\n\r\n<p>Return a cursor for the connection.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2</p>\r\n\r\n<p><tt>&gt;&gt;&gt; db = sqlite3.connect(&#39;example.sqlite3&#39;)<br />\r\n&gt;&gt;&gt; db<br />\r\n&lt;sqlite3.Connection object at 0x02515BA0&gt;<br />\r\n&gt;&gt;&gt; crsr = db.cursor()<br />\r\n&gt;&gt;&gt; crsr<br />\r\n&lt;sqlite3.Cursor object at 0x025993E0&gt;</tt></p>\r\n</div>\r\n\r\n<p><strong>Creating Table in Database</strong></p>\r\n\r\n<p>Having cursor, you can create a table in database via execute() method of&nbsp;Cursor object</p>\r\n\r\n<p><strong>execute() method of cursor</strong></p>\r\n\r\n<p>Executes a SQL statement like: execute(&quot;CREATE TABLE ...&quot;), execute(&quot;CREATE TABLE IF NOT EXISTS ...&quot;), ...,</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3</p>\r\n\r\n<p>&gt;&gt;&gt; db = sqlite3.connect(&#39;example.sqlite3&#39;)<br />\r\n&gt;&gt;&gt; crsr = db.cursor()<br />\r\n&gt;&gt;&gt; crsr.execute(&quot;CREATE TABLE people (name, surname)&quot;)<br />\r\n&lt;sqlite3.Cursor object at 0x02599360&gt;</p>\r\n\r\n<hr />\r\n<p>Now we have the table like this:</p>\r\n\r\n<table border="1" cellpadding="1" cellspacing="1" style="width:100px">\r\n\t<caption>people</caption>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>name</td>\r\n\t\t\t<td>surname</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<hr />\r\n<p>crsr.execute(&quot;CREATE TABLE people (name, surname)&quot;)</p>\r\n\r\n<p>&quot;CREATE TABLE&quot; is a sql command.<br />\r\npeople is the name of table<br />\r\n(name, surname)&nbsp; are name of&nbsp;&nbsp;colums</p>\r\n\r\n<hr />\r\n<p>You can prefer triple quotes for sql command and quotes for colums. This usage is very common.</p>\r\n\r\n<p>crsr.execute(&quot;&quot;&quot;CREATE TABLE &#39;personel dosyasi&#39; (&#39;name&#39;, &#39;surname&#39;)&quot;&quot;&quot;)</p>\r\n\r\n<hr />\r\n<p>If you don&#39;t know &nbsp;a table exists or not, you can prefer &quot;CREATE TABLE IF NOT EXISTS&quot; sql command for not taking an error.</p>\r\n\r\n<p>crsr.execute(&quot;CREATE TABLE IF NOT EXISTS people (name, surname)&quot;)</p>\r\n</div>\r\n\r\n<p><strong>Note: In order to see table, you can download&nbsp;Sqlitebrowser from http://sqlitebrowser.org/ and then you can install it.&nbsp;After that you can open the file and see table.&nbsp;</strong></p>\r\n\r\n<p><strong>Adding data to the table</strong></p>\r\n\r\n<p>In order to add data to table, we need two stages. One of them is sql command in execute method of cursor object and&nbsp;other one is commit() method of connection object.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4</p>\r\n\r\n<p><tt>&gt;&gt;&gt; db = sqlite3.connect(&#39;example.sqlite3&#39;)<br />\r\n&gt;&gt;&gt; crsr = db.cursor()<br />\r\n&gt;&gt;&gt; crsr.execute(&quot;CREATE TABLE IF NOT EXISTS people (name, surname)&quot;)<br />\r\n&gt;&gt;&gt; crsr.execute(&quot;&quot;&quot;INSERT INTO people VALUES (&#39;John&#39;, &#39;Rock&#39;)&quot;&quot;&quot;)<br />\r\n&gt;&gt;&gt; db.commit()</tt></p>\r\n\r\n<hr />\r\n<p>If you open&nbsp;<tt>example.sqlite3 with&nbsp;</tt>Sqlitebrowser, you will see like this:</p>\r\n\r\n<p><img alt="inserting datas to the table" class="img-responsive" src="http://127.0.0.1:8000/static/img/sqlite_browser.png" style="height:325px; width:432px" /></p>\r\n</div>\r\n\r\n<p><strong>Closing a database</strong></p>\r\n\r\n<p>To close connection with database, close() method of connection object is used.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5</p>\r\n\r\n<p><tt>&gt;&gt;&gt; db = sqlite3.connect(&#39;example.sqlite3&#39;)<br />\r\n&gt;&gt;&gt; crsr = db.cursor()<br />\r\n&gt;&gt;&gt; crsr.execute(&quot;CREATE TABLE IF NOT EXISTS people (name, surname)&quot;)<br />\r\n&gt;&gt;&gt; crsr.execute(&quot;&quot;&quot;INSERT INTO people VALUES (&#39;John&#39;, &#39;Rock&#39;)&quot;&quot;&quot;)<br />\r\n&gt;&gt;&gt; db.commit()</tt></p>\r\n\r\n<hr />\r\n<p>You can use with statement for closing otomatically.</p>\r\n\r\n<p><strong>example.py</strong><br />\r\n<tt>import sqlite3<br />\r\nwith sqlite3.connect(&#39;example.sqlite3&#39;) as db:<br />\r\n&nbsp; &nbsp; crsr = db.cursor()<br />\r\n&nbsp; &nbsp; crsr.execute(&quot;CREATE TABLE IF NOT EXISTS people (name, surname)&quot;)<br />\r\n&nbsp; &nbsp; crsr.execute(&quot;&quot;&quot;INSERT INTO people VALUES (&#39;Tom&#39;, &#39;Oldman&#39;)&quot;&quot;&quot;)<br />\r\n&nbsp; &nbsp; db.commit()</tt></p>\r\n</div>\r\n\r\n<p><strong>Parameters in sql command</strong></p>\r\n\r\n<p>You can use &quot;?&quot; chracter for holding a value.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example6</tt></p>\r\n\r\n<p><tt><strong>example.py</strong><br />\r\nimport sqlite3<br />\r\nwith sqlite3.connect(&#39;example.sqlite3&#39;) as db:<br />\r\n&nbsp; &nbsp; crsr = db.cursor()</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; datas = [(&quot;Gary&quot;, &quot;Old&quot;),<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(&quot;Micheal&quot;, &quot;Rocky&quot;)]<br />\r\n&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; crsr.execute(&quot;CREATE TABLE IF NOT EXISTS people (name, surname)&quot;)</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; for data in datas:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; <strong>crsr.execute(&quot;&quot;&quot;INSERT INTO people VALUES (?, ?)&quot;&quot;&quot;, data)</strong></tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp; db.commit()</tt></p>\r\n</div>\r\n\r\n<p><strong>Selecting and taking&nbsp;datas from a database</strong></p>\r\n\r\n<p>To select datas from a database, it is used sql command which is &quot;SELECT * FROM database_name&quot;<br />\r\n* means all of the table.</p>\r\n\r\n<p>To take&nbsp;datas from a database, we can use&nbsp;fetchone(), fetchall() ,&nbsp;fetchmany()&nbsp; methods of cursor object or for loop.</p>\r\n\r\n<p><strong>fetchall() method</strong></p>\r\n\r\n<p>Fetches all rows from the resultset.</p>\r\n\r\n<p>After above examples we obtained the below people table in the example.sqlite3 like this:</p>\r\n\r\n<table border="1" cellpadding="1" cellspacing="1" style="width:100px">\r\n\t<caption><strong>example.sqlte3<br />\r\n\tpeople</strong></caption>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><strong>name</strong></td>\r\n\t\t\t<td><strong>surname</strong></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Micheal</td>\r\n\t\t\t<td>Rocky</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Gary</td>\r\n\t\t\t<td>Old</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Tom</td>\r\n\t\t\t<td>Oldman</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>John</td>\r\n\t\t\t<td>Rock</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Now we will select the datas from there. See below example please.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example7</p>\r\n\r\n<p><tt>import sqlite3<br />\r\nwith sqlite3.connect(&#39;example.sqlite3&#39;) as db:<br />\r\n&nbsp; &nbsp; crsr = db.cursor()<br />\r\n&nbsp; &nbsp; crsr.execute(&quot;&quot;&quot;SELECT * FROM people&quot;&quot;&quot;)<br />\r\n&nbsp; &nbsp; datas = crsr.fetchall()<br />\r\n&nbsp; &nbsp; print(datas)</tt></p>\r\n\r\n<p><tt>[(&#39;John&#39;, &#39;Rock&#39;), (&#39;Tom&#39;, &#39;Oldman&#39;), (&#39;Gary&#39;, &#39;Old&#39;), (&#39;Micheal&#39;, &#39;Rocky&#39;)]</tt></p>\r\n\r\n<hr />\r\n<p>If you want to learn names in the database, you should this sql command:&nbsp;&quot;SELECT name FROM sqlite_master&quot;.&nbsp;sqlite_master show the pattern of the database.</p>\r\n\r\n<p><tt>&gt;&gt;&gt; crsr.execute(&quot;SELECT name FROM sqlite_master&quot;)<br />\r\n&gt;&gt;&gt; crsr.fetchall()<br />\r\n[(&#39;people&#39;,)]</tt></p>\r\n</div>\r\n\r\n<p><strong>fetchone() method</strong></p>\r\n\r\n<p>Fetches one row from the resultset.</p>\r\n\r\n<p>Now we will select one&nbsp;data&nbsp;from above example.sqlte3. See below example please.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example8:</p>\r\n\r\n<p><tt>&gt;&gt;&gt; db = sqlite3.connect(&#39;example.sqlite3&#39;)<br />\r\n&gt;&gt;&gt; crsr =db.cursor()<br />\r\n&gt;&gt;&gt; crsr.execute(&quot;&quot;&quot;SELECT * FROM people&quot;&quot;&quot;)<br />\r\n&lt;sqlite3.Cursor object at 0x022A6BA0&gt;<br />\r\n&gt;&gt;&gt; crsr.fetchone()<br />\r\n(&#39;John&#39;, &#39;Rock&#39;)<br />\r\n&gt;&gt;&gt; crsr.fetchone()<br />\r\n(&#39;Tom&#39;, &#39;Oldman&#39;)<br />\r\n&gt;&gt;&gt; crsr.fetchone()<br />\r\n(&#39;Gary&#39;, &#39;Old&#39;)<br />\r\n&gt;&gt;&gt; crsr.fetchone()<br />\r\n(&#39;Micheal&#39;, &#39;Rocky&#39;)</tt></p>\r\n</div>\r\n\r\n<p><strong>fetchmany() method</strong>&nbsp;</p>\r\n\r\n<p>Fetches several rows from the resultset.</p>\r\n\r\n<p>Now we will select several&nbsp;datas from above example.sqlte3. See below example please.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example9</p>\r\n\r\n<p><tt>&gt;&gt;&gt; db = sqlite3.connect(&#39;example.sqlite3&#39;)<br />\r\n&gt;&gt;&gt; crsr =db.cursor()<br />\r\n&gt;&gt;&gt; crsr.execute(&quot;&quot;&quot;SELECT * FROM people&quot;&quot;&quot;)<br />\r\n&lt;sqlite3.Cursor object at 0x0221C2A0&gt;<br />\r\n&gt;&gt;&gt; crsr.fetchmany(2)<br />\r\n[(&#39;John&#39;, &#39;Rock&#39;), (&#39;Tom&#39;, &#39;Oldman&#39;)]<br />\r\n&gt;&gt;&gt; crsr.fetchmany(1)<br />\r\n[(&#39;Gary&#39;, &#39;Old&#39;)]<br />\r\n&gt;&gt;&gt; crsr.fetchmany(1)<br />\r\n[(&#39;Micheal&#39;, &#39;Rocky&#39;)]</tt></p>\r\n</div>\r\n\r\n<p><strong>for loop to select and take datas</strong></p>\r\n\r\n<p>Now we will select several&nbsp;datas from above example.sqlte3. See below example please.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example10</p>\r\n\r\n<p><tt>&gt;&gt;&gt; db = sqlite3.connect(&#39;example.sqlite3&#39;)<br />\r\n&gt;&gt;&gt; crsr =db.cursor()<br />\r\n&gt;&gt;&gt; crsr.execute(&quot;&quot;&quot;SELECT * FROM people&quot;&quot;&quot;)<br />\r\n&lt;sqlite3.Cursor object at 0x022A6BA0&gt;<br />\r\n&gt;&gt;&gt; for data in crsr:<br />\r\n&nbsp;&nbsp; &nbsp;print(data)</tt></p>\r\n\r\n<p><tt>(&#39;John&#39;, &#39;Rock&#39;)<br />\r\n(&#39;Tom&#39;, &#39;Oldman&#39;)<br />\r\n(&#39;Gary&#39;, &#39;Old&#39;)<br />\r\n(&#39;Micheal&#39;, &#39;Rocky&#39;)</tt></p>\r\n\r\n<hr />\r\n<p>You can use print(*crsr) to show datas.</p>\r\n\r\n<p>&gt;&gt;&gt; print(*crsr)<br />\r\n(&#39;John&#39;, &#39;Rock&#39;) (&#39;Tom&#39;, &#39;Oldman&#39;) (&#39;Gary&#39;, &#39;Old&#39;) (&#39;Micheal&#39;, &#39;Rocky&#39;)</p>\r\n</div>\r\n\r\n<p><strong>filtering datas</strong></p>\r\n\r\n<p>SELECT * FROM table_name&nbsp;WHERE colum_name&nbsp;= filtering_data</p>\r\n\r\n<p>Now we will filter&nbsp;several&nbsp;datas from above example.sqlte3. See below example please.</p>\r\n\r\n<p>Example11</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; crsr.execute(&quot;SELECT * FROM people WHERE name = &#39;Tom&#39;&quot;)<br />\r\n&lt;sqlite3.Cursor object at 0x02542AE0&gt;<br />\r\n&gt;&gt;&gt; crsr.fetchall()<br />\r\n[(&#39;Tom&#39;, &#39;Oldman&#39;)]<br />\r\n&gt;&gt;&gt; crsr.execute(&quot;SELECT * FROM people WHERE surname = &#39;Old&#39;&quot;)<br />\r\n&lt;sqlite3.Cursor object at 0x02542B20&gt;<br />\r\n&gt;&gt;&gt; crsr.fetchall()<br />\r\n[(&#39;Gary&#39;, &#39;Old&#39;)]</tt></p>\r\n</div>', '<p>Every operating system has different functions and features. Thier languages are&nbsp;unique. So In order to be indefendent from operating sysyems(Windows, Linux, Mac), we need os modules in Python. manupulating pathname&nbsp;is better chance of being portable between different platforms using this module. Now we see important features of it.</p>\r\n\r\n<p><strong>Methods and Attributes of os module</strong></p>\r\n\r\n<p><strong>os.name</strong></p>\r\n\r\n<p>It returns type of operating system:&nbsp;&#39;posix&#39; or &#39;nt&#39;.</p>\r\n\r\n<p>posix means&nbsp;MacOS ve GNU/Linux<br />\r\nnt means Windows</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><strong>Example1:</strong></p>\r\n\r\n<p><tt>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; os.name<br />\r\n&#39;nt&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>os.sep</strong></p>\r\n\r\n<p>the (or a most common) pathname separator (&#39;/&#39; or &#39;\\\\&#39;) of an operating system</p>\r\n\r\n<p>for Windows, result&nbsp;is&nbsp;<span style="font-size:18px">&#39;\\\\&#39;</span><br />\r\nfor MacOS and&nbsp;&nbsp;GNU/Linux, result is&nbsp;<span style="font-size:18px">&#39;/&#39;</span></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2</p>\r\n\r\n<p><tt>for Winodws<br />\r\n&gt;&gt;&gt; os.sep<br />\r\n&#39;\\\\&#39;<br />\r\n&gt;&gt;&gt; print(os.sep)<br />\r\n\\</tt></p>\r\n\r\n<p><tt>for Linux<br />\r\n&gt;&gt;&gt; os.sep<br />\r\n&#39;/&#39;<br />\r\n&gt;&gt;&gt; print(os.sep)</tt><br />\r\n/</p>\r\n\r\n<hr /><strong>Note: Python Shell and print() are different way to show strings. Shell show us the eyes from computer. print() show us eyes of us.&nbsp;&nbsp;</strong>\r\n\r\n<hr />\r\n<p>You can create a path using this attribute.</p>\r\n\r\n<p><tt>#for Windows<br />\r\n&gt;&gt;&gt; our_list = [&quot;C&quot;, &quot;users&quot;, &quot;username&quot;, &quot;Desktop&quot;]<br />\r\n&gt;&gt;&gt; path = os.sep.join(our_list)<br />\r\n&gt;&gt;&gt; print(path)<br />\r\nC\\users\\username\\Desktop</tt></p>\r\n\r\n<p><tt>#for Linux<br />\r\n&gt;&gt;&gt; our_list = [&quot;C&quot;, &quot;users&quot;, &quot;username&quot;, &quot;Desktop&quot;]<br />\r\n&gt;&gt;&gt; path = os.sep.join(our_list)<br />\r\n&gt;&gt;&gt; print(path)<br />\r\nC/users/username/Desktop</tt></p>\r\n</div>\r\n\r\n<p><strong>os.getcwd()</strong></p>\r\n\r\n<p>Return a&nbsp;string representing the current working directory.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3</p>\r\n\r\n<p><tt>#for Windows<br />\r\n&gt;&gt;&gt; os.getcwd()<br />\r\n&#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;<br />\r\n&gt;&gt;&gt; print(os.getcwd())<br />\r\nC:\\Users\\username\\AppData\\Local\\Programs\\Python\\Python36-32</tt></p>\r\n</div>\r\n\r\n<p><strong>os.chdir()</strong></p>\r\n\r\n<p>Change the current working directory to the specified path.</p>\r\n\r\n<p><tt>chdir(path)</tt></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>path may always be specified as a string.<br />\r\n<br />\r\nExample4</p>\r\n\r\n<p>#If we want to go desktop, you can use this&nbsp;codes for Windows.<br />\r\n&gt;&gt;&gt; os.chdir(&#39;C:\\\\users\\\\username\\\\Desktop&#39;)</p>\r\n\r\n<hr />\r\n<p>Now we can check where we are</p>\r\n\r\n<p>&gt;&gt;&gt; os.getcwd()<br />\r\n&#39;C:\\\\users\\\\username\\\\Desktop&#39;</p>\r\n\r\n<hr />\r\n<p>#for Linux<br />\r\n&gt;&gt;&gt; os.chdir(&#39;/usr/bin/&#39;)</p>\r\n</div>\r\n\r\n<p><strong>os.listdir()</strong></p>\r\n\r\n<p>Return a list containing the names of the files in the directory.</p>\r\n\r\n<p><tt>listdir(path=None)&nbsp;&rArr; list</tt></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5</p>\r\n\r\n<p># for the current directory&nbsp;<br />\r\n&gt;&gt;&gt; os.listdir()</p>\r\n\r\n<p># or<br />\r\nos.listdir(&#39;.&#39;)</p>\r\n\r\n<p>#You can use &#39;..&#39; for listing parent&nbsp;directory.<br />\r\nos.listdir(&#39;..&#39;)</p>\r\n\r\n<hr />\r\n<p># you can list specified path<br />\r\n&gt;&gt;&gt; os.listdir(&#39;C:\\\\users\\\\username\\\\Desktop&#39;)</p>\r\n</div>\r\n\r\n<p><strong>os.curdir</strong></p>\r\n\r\n<p>a string representing the current directory (always &#39;.&#39;)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example6<br />\r\n&gt;&gt;&gt; os.curdir<br />\r\n&#39;.&#39;<br />\r\n# to list current directory<br />\r\nos.listdir(os.curdir)</p>\r\n</div>\r\n\r\n<p><strong>os.pardir </strong></p>\r\n\r\n<p>It is a string representing the parent directory (always &#39;..&#39;)</p>\r\n\r\n<p>&gt;&gt;&gt; os.pardir<br />\r\n&#39;..&#39;</p>\r\n\r\n<p><strong>os.extsep</strong></p>\r\n\r\n<p>is the extension separator (always &#39;.&#39;<strong>)&nbsp;&nbsp;</strong></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example7</p>\r\n\r\n<p>&gt;&gt;&gt; os.extsep<br />\r\n&#39;.&#39;</p>\r\n</div>\r\n\r\n<p><strong>os.altsep </strong></p>\r\n\r\n<p>is the alternate pathname separator (None or &#39;/&#39;)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example8</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.altsep<br />\r\n&#39;/&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>os.pathsep</strong></p>\r\n\r\n<p>is the component separator used in $PATH etc</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example9</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.pathsep<br />\r\n&#39;;</tt></p>\r\n</div>\r\n\r\n<p><strong>os.linesep </strong></p>\r\n\r\n<p>is the line separator in text files (&#39;\\r&#39; or &#39;\\n&#39; or &#39;\\r\\n&#39;)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example10</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.linesep<br />\r\n&#39;\\r\\n&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>os.defpath </strong></p>\r\n\r\n<p>is the default search path for executables</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example11</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.defpath<br />\r\n&#39;.;C:\\\\bin&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>os.devnull </strong></p>\r\n\r\n<p>is the file path of the null device (&#39;/dev/null&#39;, etc.)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example12</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.devnull<br />\r\n&#39;nul&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>os.startfile()</strong><br />\r\n<br />\r\nStart a file with its associated application. It is only used on Windows system.</p>\r\n\r\n<p>startfile(filepath)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example13</p>\r\n\r\n<p><tt># to open a file with </tt>associated application(Notepad for this example)<tt>&nbsp;in the current directory</tt><br />\r\n&gt;&gt;&gt; os.startfile(&quot;deneme.txt&quot;)</p>\r\n\r\n<p># to open directory with Internet Explorer<br />\r\n&gt;&gt;&gt; os.startfile(&#39;C:\\\\users\\\\username\\\\Desktop&#39;)</p>\r\n\r\n<p># to opem a web site<br />\r\n&gt;&gt;&gt; os.startfile(&quot;www.google.com&quot;)</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong> Don&#39;t forget that this method can&#39;t be worked with Linux.</p>\r\n\r\n<p><strong>os.mkdir()</strong></p>\r\n\r\n<p>Create a directory.</p>\r\n\r\n<p><tt>os.makedir(path)</tt></p>\r\n\r\n<div>\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example14</p>\r\n\r\n<p><tt># for current directory<br />\r\n&gt;&gt;&gt; os.mkdir(&#39;newdirectory&#39;)</tt></p>\r\n\r\n<p><tt>#for specified directory<br />\r\n&gt;&gt;&gt; os.mkdir(&#39;C:\\\\users\\\\username\\\\Desktop\\\\newdirectory&#39;)</tt></p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong> If the directory already exists, you will take an&nbsp;FileExistsError.</p>\r\n\r\n<p><strong>os.makedirs()</strong></p>\r\n\r\n<p>Create &nbsp;directories. The difference from os.makedir() is making the path&nbsp;as a directory.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example15</tt></p>\r\n\r\n<p><tt># below galery and pictures directories are created.<br />\r\n&gt;&gt;&gt; os.mkdirs(&#39;C:\\\\galery\\\\pictures&#39;)</tt></p>\r\n</div>\r\n\r\n<p><strong>os.rename()</strong></p>\r\n\r\n<p>Rename a file or directory.</p>\r\n\r\n<p>os.rename(old_directory, new_directory)</p>\r\n\r\n<div>\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example15</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.rename(&quot;old_name&quot;, &quot;new_name&quot;)</tt></p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>os.replace()</strong></p>\r\n\r\n<p>Rename a file or directory, overwriting the destination.</p>\r\n\r\n<p>os.replace(old_directory, new_directory)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example16</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.replace(&quot;old_name&quot;, &quot;new_name&quot;)</tt></p>\r\n</div>\r\n\r\n<p><strong>os.remove()</strong></p>\r\n\r\n<p>Remove a file (same as unlink()).</p>\r\n\r\n<p>remove(path)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example17</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.remove(&quot;example.txt&quot;)</tt></p>\r\n</div>\r\n\r\n<p><strong>os.rmdir()</strong></p>\r\n\r\n<p>Remove a directory.</p>\r\n\r\n<p>rmdir(path)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example18</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.rmdir(&#39;directory_name&#39;)</tt><br />\r\n&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>os.removedirs()</strong></p>\r\n\r\n<p>remove a leaf directory and all empty intermediate ones.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example19</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.removedirs(&#39;main_directory/directory1/directory2/directory3&#39;)</tt><br />\r\n&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>os.stat()</strong></p>\r\n\r\n<p>Perform a stat system call on the given path.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example20</p>\r\n\r\n<p><tt>&gt;&gt;&gt; file = os.stat(&quot;example.txt&quot;)<br />\r\n&gt;&gt;&gt; file<br />\r\nos.stat_result(st_mode=33206, st_ino=79657418409115827, st_dev=683675152, st_nlink=1, st_uid=0, st_gid=0, st_size=21, st_atime=1541586340, st_mtime=1541586340, st_ctime=1541586140)<br />\r\n&gt;&gt;&gt; file.st_file_attributes<br />\r\n32<br />\r\n&gt;&gt;&gt; file.st_size<br />\r\n21</tt></p>\r\n\r\n<hr />\r\n<p>st_atime: time of last access<br />\r\nst_atime_ns : time of last access in nanoseconds<br />\r\nst_ctime :&nbsp; time of last change<br />\r\nst_ctime_ns : time of last change in nanoseconds<br />\r\nst_dev :&nbsp;device<br />\r\nst_file_attributes :&nbsp;Windows file attribute bits<br />\r\nst_gid :&nbsp;group ID of owner<br />\r\nst_ino :&nbsp;inode<br />\r\nst_mode :&nbsp;protection bits<br />\r\nst_mtime :&nbsp;time of last modification<br />\r\nst_mtime_ns :&nbsp;time of last modification in nanoseconds<br />\r\nst_nlink:&nbsp;number of hard links<br />\r\nst_size :&nbsp;total size, in bytes<br />\r\nst_uid :&nbsp;user ID of owner</p>\r\n</div>\r\n\r\n<p><strong>Note: </strong>You can convert nanosecond time to understood date via datetime module</p>\r\n\r\n<p><strong>os.system()</strong></p>\r\n\r\n<p>Execute the command in a subshell. You can run the programs too.</p>\r\n\r\n<p>system(command)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example21</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.system(&#39;notepad.exe&#39;)<br />\r\n&gt;&gt;&gt; os.system(&quot;example.txt&quot;)<br />\r\n&gt;&gt;&gt; os.system(&quot;example.pdf&quot;)</tt></p>\r\n</div>\r\n\r\n<p><strong>os.urandom()</strong></p>\r\n\r\n<p>Return a bytes object containing random bytes suitable for cryptographic use.</p>\r\n\r\n<p>urandom(size)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example22</p>\r\n\r\n<p>&gt;&gt;&gt; os.urandom(5)<br />\r\nb&#39;w~\\x1axz&#39;<br />\r\n&gt;&gt;&gt; os.urandom(2)<br />\r\nb&#39;t\\xeb&#39;</p>\r\n</div>\r\n\r\n<p><strong>os.walk()</strong></p>\r\n\r\n<p>Directory tree generator.&nbsp;dirpath, dirnames, filenames.</p>\r\n\r\n<p>walk(path)&nbsp;&rArr;&nbsp;generator object &rArr; 3-tuple for each directory</p>\r\n\r\n<p>dirpath is a string, the path to the directory.<br />\r\ndirnames is a list of the names of the subdirectories in dirpath<br />\r\nfilenames is a list of the names of the non-directory files in dirpath.</p>\r\n\r\n<p>Now we will create from main dirctories to fourth ones. And then manually we will add a example.txt in main&nbsp;directory.<br />\r\n+main<br />\r\n&nbsp; |example.txt<br />\r\n&nbsp;+first<br />\r\n&nbsp; +second<br />\r\n&nbsp; &nbsp; +third<br />\r\n&nbsp; &nbsp; &nbsp; +fourth<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example23</p>\r\n\r\n<p><tt># Now we constructed above directiries and walking inside it.<br />\r\n&gt;&gt;&gt; os.chdir(&quot;C:/Users/username/Desktop&quot;)&nbsp;<br />\r\n&gt;&gt;&gt; os.makedirs(&quot;./main/first/third/fourth&quot;)<br />\r\n&gt;&gt;&gt; os.makedirs(&quot;./main/first/third/fourth&quot;)<br />\r\n&gt;&gt;&gt; path = os.walk(&quot;main&quot;)<br />\r\n&gt;&gt;&gt; for directory in path:<br />\r\n&nbsp;&nbsp; &nbsp;print(directory)</tt></p>\r\n\r\n<hr />\r\n<p><tt>(&#39;main&#39;, [&#39;first&#39;], [&#39;example.txt&#39;])<br />\r\n(&#39;main\\\\first&#39;, [&#39;third&#39;], [])<br />\r\n(&#39;main\\\\first\\\\third&#39;, [&#39;fourth&#39;], [])<br />\r\n(&#39;main\\\\first\\\\third\\\\fourth&#39;, [], [])</tt></p>\r\n\r\n<hr />\r\n<p><tt>Such as for (&#39;main&#39;, [&#39;first&#39;], [&#39;example.txt&#39;])&nbsp;</tt><br />\r\ndirpath is <tt>&#39;main&#39;</tt>&nbsp;<br />\r\ndirnames is&nbsp;<tt>[&#39;first&#39;]</tt><br />\r\nfilenames is&nbsp;[&#39;example.txt.txt&#39;]</p>\r\n\r\n<hr />\r\n<p>#for only dirpaths<br />\r\n&gt;&gt;&gt; for dirpaths, dirnames, filenames in os.walk(&quot;main&quot;):<br />\r\n&nbsp;&nbsp; &nbsp;dirpaths</p>\r\n\r\n<p>&#39;main&#39;<br />\r\n&#39;main\\\\first&#39;<br />\r\n&#39;main\\\\first\\\\third&#39;<br />\r\n&#39;main\\\\first\\\\third\\\\fourth&#39;</p>\r\n\r\n<hr />\r\n<p>#for only dirnames<br />\r\n&gt;&gt;&gt; for dirpath, dirnames, filenames in os.walk(&quot;main&quot;):<br />\r\n&nbsp;&nbsp; &nbsp;dirnames</p>\r\n\r\n<p>[&#39;first&#39;]<br />\r\n[&#39;third&#39;]<br />\r\n[&#39;fourth&#39;]<br />\r\n[]</p>\r\n</div>\r\n\r\n<p><strong>os.environ</strong></p>\r\n\r\n<p>return environment variables of operating system as environ object(dictionary).</p>\r\n\r\n<p>You can list all of&nbsp; them like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Exampe24</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import os<br />\r\n&gt;&gt;&gt; os.environ</tt></p>\r\n\r\n<p>environ({&#39;ALLUSERSPROFILE&#39;: &#39;C:\\\\ProgramData&#39;, &#39;APPDATA&#39;:....})</p>\r\n</div>\r\n\r\n<p><strong>os.path</strong></p>\r\n\r\n<p>It has a lot of methods and attributes. You can list all of them using __all__ attribute like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; os.path.__all__<br />\r\n[&#39;normcase&#39;, &#39;isabs&#39;, &#39;join&#39;, &#39;splitdrive&#39;, &#39;split&#39;, &#39;splitext&#39;, &#39;basename&#39;, &#39;dirname&#39;, &#39;commonprefix&#39;, &#39;getsize&#39;, &#39;getmtime&#39;, &#39;getatime&#39;, &#39;getctime&#39;, &#39;islink&#39;, &#39;exists&#39;, &#39;lexists&#39;, &#39;isdir&#39;, &#39;isfile&#39;, &#39;ismount&#39;, &#39;expanduser&#39;, &#39;expandvars&#39;, &#39;normpath&#39;, &#39;abspath&#39;, &#39;splitunc&#39;, &#39;curdir&#39;, &#39;pardir&#39;, &#39;sep&#39;, &#39;pathsep&#39;, &#39;defpath&#39;, &#39;altsep&#39;, &#39;extsep&#39;, &#39;devnull&#39;, &#39;realpath&#39;, &#39;supports_unicode_filenames&#39;, &#39;relpath&#39;, &#39;samefile&#39;, &#39;sameopenfile&#39;, &#39;samestat&#39;, &#39;commonpath&#39;]</tt></p>\r\n</div>\r\n\r\n<p>Now we will see what they work</p>\r\n\r\n<p><strong>os.path.abspath()</strong></p>\r\n\r\n<p>Return the absolute version of a path.</p>\r\n\r\n<p>abspath(path)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example25</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.path.abspath(&quot;example.py&quot;)<br />\r\n&#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\example.py</tt></p>\r\n</div>\r\n\r\n<p><strong>os.path.dirname(path)</strong></p>\r\n\r\n<p>Returns the directory component of a pathname</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example26</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.path.dirname(&#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\example.py&#39;)<br />\r\n&#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>os.path.exists(path)</strong></p>\r\n\r\n<p>Test whether a path exists. &nbsp;Returns False for broken symbolic links.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example27</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.path.exists(&#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\example.py&#39;)<br />\r\nTrue</tt></p>\r\n</div>\r\n\r\n<p><strong>os.expanduser(path)</strong></p>\r\n\r\n<p>Expand ~ and ~user constructs. If user or $HOME is unknown, do nothing.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example28</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.path.expanduser(&#39;~&#39;)<br />\r\n&#39;C:\\\\Users\\\\sahint&uuml;rk&#39;<br />\r\n&gt;&gt;&gt; os.path.expanduser(&#39;~&#39;)<br />\r\n&#39;C:\\\\Users\\\\sahint&uuml;rk&#39;<br />\r\n&gt;&gt;&gt; os.path.expanduser(&#39;~username2&#39;)<br />\r\n&#39;C:\\\\Users\\\\username2&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>os.isdir(path)</strong></p>\r\n\r\n<p>Return true if the pathname refers to an existing directory.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example29</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.path.isdir(&quot;.&quot;)<br />\r\nTrue<br />\r\n&gt;&gt;&gt; os.path.isdir(&quot;example.py&quot;)<br />\r\nFalse</tt></p>\r\n</div>\r\n\r\n<p><strong>os.path.isfile()</strong></p>\r\n\r\n<p>isfile(path)</p>\r\n\r\n<p>Test whether a path is a regular file</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example30</p>\r\n\r\n<p>&gt;&gt;&gt; os.path.isfile(&quot;example.py&quot;)<br />\r\nTrue</p>\r\n</div>\r\n\r\n<p><strong>os.path.join()</strong><br />\r\njoin(path, *paths)</p>\r\n\r\n<p>Join two (or more) paths.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example31</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.path.join(&#39;main&#39;,&#39;directory1&#39;, &#39;directory2&#39;, &#39;directory3&#39;)<br />\r\n&#39;main\\\\directory1\\\\directory2\\\\directory3&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>os.path.split(path)</strong></p>\r\n\r\n<p>Split a pathname.</p>\r\n\r\n<p>Return tuple (head, tail) where tail is everything after the final slash. Either part may be empty.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example32</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.path.split(&quot;C:/Users/sahint&uuml;rk/Downloads&quot;)<br />\r\n(&#39;C:/Users/sahint&uuml;rk&#39;, &#39;Downloads&#39;)</tt></p>\r\n</div>\r\n\r\n<p><strong>os.path.splitext()</strong></p>\r\n\r\n<p>Split the extension from a pathname.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example33</p>\r\n\r\n<p><tt>&gt;&gt;&gt; os.path.splitext(&quot;example.txt&quot;)<br />\r\n(&#39;example&#39;, &#39;.txt&#39;)<br />\r\n&gt;&gt;&gt; os.path.splitext(&quot;example.py&quot;)<br />\r\n(&#39;example&#39;, &#39;.py&#39;)</tt><br />\r\n&nbsp;</p>\r\n</div>', '<p>This module provides access to some objects(command) and functions(exit, run) that interact strongly with the interpreter. You can list attributes and methods via dir(sys) command after importing sys module. Lets see them.&nbsp;</p>\r\n\r\n<p><strong>sys.exit()</strong></p>\r\n\r\n<p>Exit the interpreter. If you want to exit any&nbsp;program, you can use this method.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1</p>\r\n\r\n<p><tt>import sys<br />\r\nletter = input(&quot;Please enter a letter: &quot;)<br />\r\nif letter == &quot;q&quot;:<br />\r\n&nbsp; &nbsp; sys.exit()</tt></p>\r\n\r\n<p><tt>print(letter)</tt></p>\r\n</div>\r\n\r\n<p><strong>sys.argv</strong></p>\r\n\r\n<p>It is command line arguments. When&nbsp;a program is run with arguments&nbsp;from terminal command line(cmd.exe), you can list them with program name in Python.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2</p>\r\n\r\n<p><tt>example.py in desktop<br />\r\nimport sys<br />\r\nprint(sys.argv)</tt></p>\r\n\r\n<hr />\r\n<p>Now we will use below command from terminal command line(cmd.exe) like this:</p>\r\n\r\n<p><tt>C:\\Users\\username\\Desktop&gt;python example.py argument1 argument2<br />\r\n[&#39;example.py&#39;, &#39;argument1&#39;, &#39;argument2&#39;]</tt></p>\r\n</div>\r\n\r\n<p><strong>sys.executable</strong></p>\r\n\r\n<p>absolute path of the executable binary of the Python interpreter</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example3</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; sys.executable<br />\r\n&#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\pythonw.exe&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>sys.path</strong></p>\r\n\r\n<p>module search path</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4</p>\r\n\r\n<p><tt>&gt;&gt;&gt; sys.path<br />\r\n[&#39;&#39;, &#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\Lib\\\\idlelib&#39;, &#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\python36.zip&#39;, &#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\DLLs&#39;, &#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\lib&#39;, &#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;, &#39;C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32\\\\lib\\\\site-packages&#39;]</tt></p>\r\n\r\n<hr />\r\n<p>If any module is in the above directories, you can import the modules from anywhere.</p>\r\n</div>\r\n\r\n<p><strong>sys.platform</strong></p>\r\n\r\n<p>platform identifier</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5</p>\r\n\r\n<p><tt>&gt;&gt;&gt; sys.platform<br />\r\n&#39;win32&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>sys.prefix</strong></p>\r\n\r\n<p>prefix used to find the Python library</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example6</p>\r\n\r\n<p>&gt;&gt;&gt; sys.prefix<br />\r\n&#39;C:\\\\Users\\\\sahint&uuml;rk\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36-32&#39;</p>\r\n</div>\r\n\r\n<p><strong>sys.ps1</strong></p>\r\n\r\n<p>keep &#39;&gt;&gt;&gt; &#39; for Python Shell. If you want, you can change it.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example7</p>\r\n\r\n<p>&gt;&gt;&gt; sys.ps1<br />\r\n&#39;&gt;&gt;&gt; &#39;</p>\r\n</div>\r\n\r\n<p><strong>sys.ps2</strong></p>\r\n\r\n<p>keep &#39;...&nbsp;&#39; for Python Shell. If you want, you can change it</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example8</p>\r\n\r\n<p>&gt;&gt;&gt; sys.ps2<br />\r\n&#39;... &#39;</p>\r\n</div>\r\n\r\n<p><strong>sys.version</strong></p>\r\n\r\n<p>the version of Python&nbsp;as a string</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example9</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; sys.version<br />\r\n&#39;3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 07:18:10) [MSC v.1900 32 bit (Intel)]&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>sys.version_info</strong></p>\r\n\r\n<p>version information as a named tuple</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>Example10</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; sys.version_info<br />\r\nsys.version_info(major=3, minor=6, micro=0, releaselevel=&#39;final&#39;, serial=0)</tt></p>\r\n</div>\r\n\r\n<p><strong>sys. winver</strong></p>\r\n\r\n<p>version number of the Python&nbsp;[Windows only]&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example11</p>\r\n\r\n<p><tt>&gt;&gt;&gt; sys.winver<br />\r\n&#39;3.6-32&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>sys.stdout</strong></p>\r\n\r\n<p>standard output file object; used by print(). You can change printable location using&nbsp;this attribute.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example12</p>\r\n\r\n<p><tt>&gt;&gt;&gt; sys.stdout<br />\r\n&lt;_io.TextIOWrapper name=&#39;&lt;stdout&gt;&#39; mode=&#39;w&#39; encoding=&#39;cp1254&#39;&gt;</tt></p>\r\n\r\n<hr />\r\n<p>Now lets change printable location as a outputs.txt&nbsp;&nbsp;See below please.</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import sys<br />\r\n&gt;&gt;&gt; outputs = open(&quot;outputs.txt&quot;, &quot;w&quot;)<br />\r\n&gt;&gt;&gt; sys.stdout = outputs<br />\r\n&gt;&gt;&gt; print(&quot;Hello World&quot;)<br />\r\n#You will see &quot;Hello World&quot; in outputs.txt unlike Python Shell<br />\r\n<strong>outputs.txt</strong><br />\r\nHello World</tt></p>\r\n</div>\r\n\r\n<p><strong>sys.stderr</strong></p>\r\n\r\n<p>standard error object; used for error message.&nbsp;You can change printable location for error&nbsp;using&nbsp;this attribute.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example13</p>\r\n\r\n<p><tt>&gt;&gt;&gt; sys.stderr<br />\r\n&lt;_io.TextIOWrapper name=&#39;&lt;stderr&gt;&#39; mode=&#39;w&#39; encoding=&#39;utf-8&#39;&gt;</tt></p>\r\n\r\n<hr />\r\n<p>Now lets change printable error location as a errors.txt&nbsp;&nbsp;See below please.</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import sys<br />\r\n&gt;&gt;&gt; errors = open(&quot;errors.txt&quot;, &quot;w&quot;)<br />\r\n&gt;&gt;&gt; sys.stderr&nbsp;= errors<br />\r\n&gt;&gt;&gt; print(0/0)<br />\r\n#You will see error in errors.txt unlike Python Shell<br />\r\n<strong>errors.txt</strong><br />\r\nTraceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#7&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; 0/0<br />\r\nZeroDivisionError: division by zero</tt></p>\r\n</div>\r\n\r\n<p><strong>stdin&nbsp;</strong></p>\r\n\r\n<p>standard input file object; used by input().&nbsp;&nbsp;You can input&nbsp;location for inputs&nbsp;using&nbsp;this attribute.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Exampe14</p>\r\n\r\n<p><tt>&gt;&gt;&gt; sys.stderr<br />\r\n&lt;_io.TextIOWrapper name=&#39;&lt;stdin&gt;&#39; mode=&#39;r&#39; encoding=&#39;utf-8&#39;&gt;</tt></p>\r\n</div>', '<p>random module can generate&nbsp;four&nbsp;type variables.</p>\r\n\r\n<p>1. integers<br />\r\n&nbsp; &nbsp; &nbsp;&nbsp;uniform within range</p>\r\n\r\n<p>2. sequences<br />\r\n&nbsp; &nbsp; &nbsp; pick random element<br />\r\n&nbsp; &nbsp; &nbsp; pick random sample<br />\r\n&nbsp; &nbsp; &nbsp; pick weighted random sample<br />\r\n&nbsp; &nbsp; &nbsp; generate random permutation</p>\r\n\r\n<p>3. distributions on the real line:<br />\r\n&nbsp; &nbsp; &nbsp; uniform<br />\r\n&nbsp; &nbsp; &nbsp; triangular<br />\r\n&nbsp; &nbsp; &nbsp; normal (Gaussian)<br />\r\n&nbsp; &nbsp; &nbsp; lognormal<br />\r\n&nbsp; &nbsp; &nbsp; negative exponential<br />\r\n&nbsp; &nbsp; &nbsp; gamma<br />\r\n&nbsp; &nbsp; &nbsp; beta<br />\r\n&nbsp; &nbsp; &nbsp; pareto<br />\r\n&nbsp; &nbsp; &nbsp; Weibull</p>\r\n\r\n<p>4.distributions on the circle (angles 0 to 2pi)<br />\r\n&nbsp; &nbsp; &nbsp; circular uniform<br />\r\n&nbsp; &nbsp; &nbsp; von Mises</p>\r\n\r\n<p><strong>Methods and attributes of random module</strong></p>\r\n\r\n<p><strong>__all__ atribute</strong></p>\r\n\r\n<p>list the classes and methods of random module.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example1</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.__all__</tt></p>\r\n\r\n<p><tt>[&#39;Random&#39;, &#39;seed&#39;, &#39;random&#39;, &#39;uniform&#39;, &#39;randint&#39;, &#39;choice&#39;, &#39;sample&#39;, &#39;randrange&#39;, &#39;shuffle&#39;, &#39;normalvariate&#39;, &#39;lognormvariate&#39;, &#39;expovariate&#39;, &#39;vonmisesvariate&#39;, &#39;gammavariate&#39;, &#39;triangular&#39;, &#39;gauss&#39;, &#39;betavariate&#39;, &#39;paretovariate&#39;, &#39;weibullvariate&#39;, &#39;getstate&#39;, &#39;setstate&#39;, &#39;getrandbits&#39;, &#39;choices&#39;, &#39;SystemRandom&#39;]</tt></p>\r\n</div>\r\n\r\n<p><strong>random() </strong></p>\r\n\r\n<p>generate in the interval [0, 1)</p>\r\n\r\n<p>random() -&gt; float</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example2</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.random()<br />\r\n0.5642698769307485<br />\r\n&gt;&gt;&gt; random.random()<br />\r\n0.6227535019829047</tt></p>\r\n</div>\r\n\r\n<p><strong>uniform(a, b)&nbsp;</strong></p>\r\n\r\n<p>Get a random number in the range [a, b) or [a, b] depending on rounding.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example3</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.uniform(0.2, 3.5)<br />\r\n3.408454873548295<br />\r\n&gt;&gt;&gt; random.uniform(0.15, 0.25)<br />\r\n0.21123364001193623</tt></p>\r\n</div>\r\n\r\n<p><strong>randint(a, b)&nbsp;</strong></p>\r\n\r\n<p>Return random integer in range [a, b], including both end points.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example4</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.randint(0, 10)<br />\r\n8<br />\r\n&gt;&gt;&gt; random.randint(-5, 5)<br />\r\n-4</tt></p>\r\n</div>\r\n\r\n<p><strong>choice(seq)&nbsp;</strong></p>\r\n\r\n<p>Choose a random element from a non-empty sequence.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example5</p>\r\n\r\n<p><tt>&gt;&gt;&gt; names = [&quot;John&quot;, &quot;Angelina&quot;, &quot;Tom&quot;, &quot;Tim&quot;, &quot;Gilbert&quot;]<br />\r\n&#39;Gilbert&#39;<br />\r\n&gt;&gt;&gt; random.choice(names)<br />\r\n&#39;Angelina&#39;<br />\r\n&gt;&gt;&gt; random.choice(names)<br />\r\n&#39;John&#39;<br />\r\n&gt;&gt;&gt; random.choice(names)<br />\r\n&#39;Tim&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>shuffle(x)&nbsp;</strong></p>\r\n\r\n<p>Shuffle list x in place, and return None.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example6</p>\r\n\r\n<p><tt>&gt;&gt;&gt; names = [&quot;John&quot;, &quot;Angelina&quot;, &quot;Tom&quot;, &quot;Tim&quot;, &quot;Gilbert&quot;]<br />\r\n&gt;&gt;&gt; random.shuffle(names)<br />\r\n&gt;&gt;&gt; names<br />\r\n[&#39;Tim&#39;, &#39;Tom&#39;, &#39;John&#39;, &#39;Angelina&#39;, &#39;Gilbert&#39;]</tt></p>\r\n</div>\r\n\r\n<p><strong>randrange(start, stop=None, step=1)&nbsp;</strong></p>\r\n\r\n<p>Choose a random item from range(start, stop , step). not including both end points.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example7</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.randrange(20)<br />\r\n11<br />\r\n&gt;&gt;&gt; random.randrange(15, 20)<br />\r\n15<br />\r\n&gt;&gt;&gt; random.randrange(0,20,2)<br />\r\n6<br />\r\n&gt;&gt;&gt; random.randrange(0,20,2)<br />\r\n2<br />\r\n&gt;&gt;&gt; random.randrange(0,20,2)<br />\r\n8</tt></p>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>sample(population, k)&nbsp;</strong></p>\r\n\r\n<p>Chooses k unique random elements from a population sequence or set.</p>\r\n\r\n<p>Returns a new list containing elements from the population while leaving the original population unchanged.&nbsp;&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example8&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p><tt>&gt;&gt;&gt; letters = &quot;abcdefghjklmnoprstuvwyz&quot;<br />\r\n&gt;&gt;&gt; random.sample(letters, 5)<br />\r\n[&#39;c&#39;, &#39;f&#39;, &#39;v&#39;, &#39;g&#39;, &#39;d&#39;]<br />\r\n&gt;&gt;&gt; random.sample(letters, 5)<br />\r\n[&#39;j&#39;, &#39;l&#39;, &#39;w&#39;, &#39;v&#39;, &#39;a&#39;]</tt></p>\r\n</div>\r\n\r\n<p>Note:&nbsp;To choose a sample in a range of integers, use range as an argument. This is especially fast and space efficient for sampling from a large population: &nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example9</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.sample(range(10000000), 60)<br />\r\n[9112956, 6944281, 5421113, 6321392, 7522537, 7251087, 9816707, 7057672, 8459268, 1449208, 6175470, 3747447, 1018409, 3996934, 3974007, 3707436, 5914530, 5135485, 2057119, 1438545, 3865764, 3253435, 4852108, 2356165, 5448124, 8292110, 1326948, 447418, 7072265, 151405, 8405593, 3955614, 2215076, 9127058, 8718071, 5500250, 5296252, 1990040, 1765762, 6954933, 6895932, 1815758, 5977500, 681305, 8184391, 3051965, 2586617, 1847981, 3961661, 9864475, 3791363, 102537, 7422997, 6774960, 6038477, 3219549, 739779, 9305343, 4958745, 5999281]</tt></p>\r\n</div>\r\n\r\n<p><strong>betavariate(alpha, beta)&nbsp;</strong></p>\r\n\r\n<p>Beta distribution.</p>\r\n\r\n<p>Conditions on the parameters are alpha &gt; 0 and beta &gt; 0.</p>\r\n\r\n<p>Returned values range between 0 and 1.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example10</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.betavariate(90, 180)<br />\r\n0.31812504019644156</tt></p>\r\n</div>\r\n\r\n<p><strong>choices(population,&nbsp;k=1)&nbsp;</strong></p>\r\n\r\n<p>Return a k sized list of population elements chosen with replacement.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example11</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.choices(letters)<br />\r\n[&#39;f&#39;]<br />\r\n&gt;&gt;&gt; random.choices(letters, k=2)<br />\r\n[&#39;t&#39;, &#39;f&#39;]<br />\r\n&gt;&gt;&gt; random.choices(letters, k=10)<br />\r\n[&#39;t&#39;, &#39;b&#39;, &#39;e&#39;, &#39;r&#39;, &#39;s&#39;, &#39;y&#39;, &#39;d&#39;, &#39;r&#39;, &#39;j&#39;, &#39;a&#39;]<br />\r\n&gt;&gt;&gt; random.choices(letters, k= 23)<br />\r\n[&#39;j&#39;, &#39;e&#39;, &#39;g&#39;, &#39;g&#39;, &#39;y&#39;, &#39;d&#39;, &#39;w&#39;, &#39;j&#39;, &#39;m&#39;, &#39;a&#39;, &#39;f&#39;, &#39;p&#39;, &#39;z&#39;, &#39;c&#39;, &#39;p&#39;, &#39;b&#39;, &#39;p&#39;, &#39;l&#39;, &#39;p&#39;, &#39;e&#39;, &#39;c&#39;, &#39;k&#39;, &#39;u&#39;]</tt></p>\r\n</div>\r\n\r\n<p><strong>expovariate(lambd)&nbsp;</strong></p>\r\n\r\n<p>Exponential distribution. lambd is 1.0 divided by the desired mean. &nbsp;It should be nonzero. &nbsp;&nbsp;Returned values range from 0 to positive infinity if lambd is positive, and from negative infinity to 0 if lambd is negative.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example12</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.expovariate(100)<br />\r\n0.0075404592045069715<br />\r\n&gt;&gt;&gt; random.expovariate(100)<br />\r\n0.022169931428730555<br />\r\n&gt;&gt;&gt; random.expovariate(-1000)<br />\r\n-0.001506618109821088</tt></p>\r\n</div>\r\n\r\n<p><strong>gammavariate(alpha, beta)</strong></p>\r\n\r\n<p>Gamma distribution. &nbsp;Not the gamma function!</p>\r\n\r\n<p>Conditions on the parameters are alpha &gt; 0 and beta &gt; 0.<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; The probability distribution function is:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x ** (alpha - 1) * math.exp(-x / beta)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pdf(x) = &nbsp;--------------------------------------<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; math.gamma(alpha) * beta ** alpha</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example13</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.gammavariate(90, 45)<br />\r\n4264.747047899857<br />\r\n&gt;&gt;&gt; random.gammavariate(1, 1)<br />\r\n0.29846833392114885</tt></p>\r\n</div>\r\n\r\n<p><strong>gauss(mu, sigma) Gaussian distribution.</strong></p>\r\n\r\n<p>mu is the mean, and sigma is the standard deviation. &nbsp;This is slightly faster than the normalvariate() function. Not thread-safe without a lock around calls.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example14</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.gauss(5, 0.5)<br />\r\n5.595808075710566<br />\r\n&gt;&gt;&gt; random.gauss(5, 2.5)<br />\r\n1.4503089044362079<br />\r\n&gt;&gt;&gt; random.gauss(15, 2.5)<br />\r\n14.446265315156042<br />\r\n&gt;&gt;&gt; random.gauss(15, 2.5)<br />\r\n16.79523614898774</tt></p>\r\n</div>\r\n\r\n<p><strong>getrandbits()&nbsp;</strong></p>\r\n\r\n<p>getrandbits(k) -&gt; x. &nbsp;Generates an int with k random bits.</p>\r\n\r\n<p>Such as: Assume that k = 1, x can be 0&nbsp;or 1.&nbsp;<br />\r\nAssume that k = 2, x can be 0, 1, 2 or 3.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example15</p>\r\n\r\n<p>&gt;&gt;&gt; for i in range(10):<br />\r\n&nbsp;&nbsp; &nbsp;print(random.getrandbits(2))&nbsp; &nbsp;</p>\r\n\r\n<p>2<br />\r\n1<br />\r\n2<br />\r\n3<br />\r\n0<br />\r\n3<br />\r\n2<br />\r\n3<br />\r\n2<br />\r\n0</p>\r\n</div>\r\n\r\n<p><strong>lognormvariate(mu, sigma)</strong></p>\r\n\r\n<p>Log normal distribution.</p>\r\n\r\n<p>If you take the natural logarithm of this distribution, you&#39;ll get a normal distribution with mean mu and standard deviation sigma. mu can have any value, and sigma must be greater than zero.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example16</p>\r\n\r\n<p>&gt;&gt;&gt; random.lognormvariate(3, 0.5)<br />\r\n25.422359740733203</p>\r\n</div>\r\n\r\n<p><strong>normalvariate(mu, sigma) </strong></p>\r\n\r\n<p>Normal distribution. mu is the mean, and sigma is the standard deviation.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example17</p>\r\n\r\n<p>&gt;&gt;&gt; random.normalvariate(100, 5)<br />\r\n99.8929586526876<br />\r\n&gt;&gt;&gt; random.normalvariate(100, 50)<br />\r\n12.367857572077838<br />\r\n&gt;&gt;&gt; random.normalvariate(100, 90)<br />\r\n121.7945006162951</p>\r\n</div>\r\n\r\n<p><strong>paretovariate(alpha)</strong></p>\r\n\r\n<p>Pareto distribution. &nbsp;alpha is the shape parameter.</p>\r\n\r\n<p><strong>seed(a=None, version=2)&nbsp;</strong></p>\r\n\r\n<p>Initialize internal state from hashable object.</p>\r\n\r\n<p>None or no argument seeds from current time or from an operating system specific randomness source if available.</p>\r\n\r\n<p>If *a* is an int, all bits are used. For version 2 (the default), all of the bits are used if *a* is a str, bytes, or bytearray. &nbsp;For version 1 (provided for reproducing random sequences from older versions of Python), the algorithm for str and bytes generates a narrower range of seeds.</p>\r\n\r\n<p><strong>triangular(low=0.0, high=1.0, mode=None)&nbsp;</strong></p>\r\n\r\n<p>Triangular distribution.</p>\r\n\r\n<p>Continuous distribution bounded by given lower and upper limits, and having a given mode value in-between.</p>\r\n\r\n<p><a href="http://en.wikipedia.org/wiki/Triangular_distribution">http://en.wikipedia.org/wiki/Triangular_distribution</a></p>\r\n\r\n<p><strong>vonmisesvariate(mu, kappa)&nbsp;</strong></p>\r\n\r\n<p>Circular data distribution.</p>\r\n\r\n<p>mu is the mean angle, expressed in radians between 0 and 2*pi, and kappa is the concentration parameter, which must be greater than or equal to zero. &nbsp;If kappa is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2*pi.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example18</p>\r\n\r\n<p>&gt;&gt;&gt; random.vonmisesvariate(0, 0)<br />\r\n5.955375740432253<br />\r\n&gt;&gt;&gt; random.vonmisesvariate(0, 0)<br />\r\n0.3553227228019942</p>\r\n</div>\r\n\r\n<p><strong>weibullvariate(alpha, beta)&nbsp;</strong></p>\r\n\r\n<p>Weibull distribution.</p>\r\n\r\n<p>alpha is the scale parameter and beta is the shape parameter.&nbsp;</p>\r\n\r\n<p><strong>getstate()&nbsp;</strong></p>\r\n\r\n<p>Return internal state; can be passed to setstate() later.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example19</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.getstate()</tt></p>\r\n</div>\r\n\r\n<p><strong>setstate(state)&nbsp;</strong></p>\r\n\r\n<p>Restore internal state from object returned by getstate().</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Example20</p>\r\n\r\n<p><tt>&gt;&gt;&gt; random.setstate(random.getstate())</tt></p>\r\n</div>', '<p>This module is fast implementation of the date and time type. There are four main classes and one two subclasses of them&nbsp;in it. And These&nbsp; classes have useful attributes and methods.&nbsp;</p>\r\n\r\n<p><strong>1.</strong> date class:<br />\r\n&nbsp; &nbsp; &nbsp;&nbsp;datetime</p>\r\n\r\n<p><strong>2. </strong>time</p>\r\n\r\n<p><strong>3.</strong> timedelta</p>\r\n\r\n<p><strong>4.</strong> tzinfo<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;timezone</p>\r\n\r\n<p>You can list them via dir(datetime) function like this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>&gt;&gt;&gt; import datetime<br />\r\n&gt;&gt;&gt; dir(datetime)<br />\r\n[&#39;MAXYEAR&#39;, &#39;MINYEAR&#39;, &#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;_divide_and_round&#39;, &#39;<strong>date&#39;, &#39;datetime&#39;,</strong> &#39;datetime_CAPI&#39;, <strong>&#39;time&#39;, &#39;timedelta&#39;, &#39;timezone&#39;, &#39;tzinfo&#39;</strong>]</p>\r\n</div>\r\n\r\n<p>Now we will firstly see datetime class in datetime module.&nbsp;</p>\r\n\r\n<p><strong>datetime(date) class</strong></p>\r\n\r\n<p>The year, month and day arguments are required.&nbsp;&nbsp;tzinfo may be None, or aninstance of a tzinfo subclass. The remaining arguments may be ints.</p>\r\n\r\n<p>datetime(year, month, day,&nbsp;hour&nbsp;minute,&nbsp;second, microsecond, tzinfo)&nbsp;&rArr; datetime object</p>\r\n\r\n<p><strong>Note:</strong> datetime class is subclass of the date class in datetime&nbsp;module. So datetime class has all features of the date class, and additionally it has features (hour&nbsp;minute,&nbsp;second, microsecond, tzinfo) about time, too. date class don&#39;t have time features.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; datetime(2018, 5, 25)<br />\r\ndatetime.datetime(2018, 5, 25, 0, 0)</tt></p>\r\n\r\n<hr />\r\n<p>first datetime is name of datetime module<br />\r\nsecond datetime is name of datetime class of datetime module<br />\r\n2018: year<br />\r\n5: month<br />\r\n25: day<br />\r\n0: hour<br />\r\n0: minute</p>\r\n</div>\r\n\r\n<p><strong>Accessing date elements and time elements from datetime.datetime object</strong></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; a = datetime(2018, 12, 25, 15, 40, 29, 378325)<br />\r\n&gt;&gt;&gt; a.year<br />\r\n2018<br />\r\n&gt;&gt;&gt; a.month<br />\r\n12<br />\r\n&gt;&gt;&gt; a.day<br />\r\n25<br />\r\n&gt;&gt;&gt; a.hour<br />\r\n15<br />\r\n&gt;&gt;&gt; a.minute<br />\r\n40<br />\r\n&gt;&gt;&gt; a.second<br />\r\n29<br />\r\n&gt;&gt;&gt; a.microsecond<br />\r\n378325</tt></p>\r\n</div>\r\n\r\n<p><strong>importing datetime class</strong></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>Importing datetime class we can use directly datetime name.&nbsp;</p>\r\n\r\n<p><tt>&gt;&gt;&gt; from datetime import datetime</tt></p>\r\n\r\n<hr />\r\n<p>You can prefer below importing style, but we prefer above style.</p>\r\n\r\n<p>&gt;&gt;&gt; import datetime<br />\r\n&gt;&gt;&gt; datetime.datetime<br />\r\n&lt;class &#39;datetime.datetime&#39;&gt;</p>\r\n</div>\r\n\r\n<p><strong>Methods and attributes of datetime</strong></p>\r\n\r\n<p>You can list methods and attributes of it using dir(datetime) function.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; from datetime import datetime</tt><br />\r\n<tt>&gt;&gt;&gt; dir(datetime)</tt><br />\r\n[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__radd__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rsub__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;astimezone&#39;, &#39;combine&#39;, &#39;ctime&#39;, &#39;date&#39;, &#39;day&#39;, &#39;dst&#39;, &#39;fold&#39;, &#39;fromordinal&#39;, &#39;fromtimestamp&#39;, &#39;hour&#39;, &#39;isocalendar&#39;, &#39;isoformat&#39;, &#39;isoweekday&#39;, &#39;max&#39;, &#39;microsecond&#39;, &#39;min&#39;, &#39;minute&#39;, &#39;month&#39;, &#39;now&#39;, &#39;replace&#39;, &#39;resolution&#39;, &#39;second&#39;, &#39;strftime&#39;, &#39;strptime&#39;, &#39;time&#39;, &#39;timestamp&#39;, &#39;timetuple&#39;, &#39;timetz&#39;, &#39;today&#39;, &#39;toordinal&#39;, &#39;tzinfo&#39;, &#39;tzname&#39;, &#39;utcfromtimestamp&#39;, &#39;utcnow&#39;, &#39;utcoffset&#39;, &#39;utctimetuple&#39;, &#39;weekday&#39;, &#39;year&#39;]</p>\r\n</div>\r\n\r\n<p><strong>now(tz=None)&nbsp;</strong></p>\r\n\r\n<p>Returns new datetime object representing current time local to tz.<br />\r\ntz: Timezone object.<br />\r\nIf no tz is specified, uses local timezone.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; from datetime import datetime<br />\r\n&gt;&gt;&gt; datetime.now()<br />\r\ndatetime.datetime(2018, 11, 11, 12, 19, 29, 378325)</tt></p>\r\n\r\n<hr />\r\n<p>date is 11.11.2018<br />\r\ntime is 12:19<br />\r\n29 is&nbsp;second<br />\r\n<tt>378325 is&nbsp;</tt>microsecond</p>\r\n</div>\r\n\r\n<p><strong>today()</strong></p>\r\n\r\n<p>Current date or datetime as same as now.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; datetime.today()<br />\r\ndatetime.datetime(2018, 11, 11, 12, 33, 50, 742827)</tt></p>\r\n</div>\r\n\r\n<p><strong>ctime(datetime object)</strong></p>\r\n\r\n<p>Return ctime&nbsp;style string. It takes datetime object as an argument.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; datetime.ctime(now)<br />\r\n&#39;Sun Nov 11 12:36:48 2018&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>strftime(datetime object, format)</strong></p>\r\n\r\n<p>format&nbsp;&rArr;&nbsp; strftime style string.</p>\r\n\r\n<p>format can be %a abbreviation of day,&nbsp;<br />\r\n%A whole day name,<br />\r\n%b abbreviation of month,<br />\r\n%B whole month<br />\r\n%c whole date<br />\r\n%d date with numbers<br />\r\n%j day number(1-365)<br />\r\n%m month with number<br />\r\n%U week number(1-53)<br />\r\n%y last two number of year<br />\r\n%Y whole year<br />\r\n%x whole date<br />\r\n%X whole time</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; datetime.strftime(now, &quot;%x&quot;)<br />\r\n&#39;11/11/18&#39;<br />\r\n&gt;&gt;&gt; datetime.strftime(now, &quot;%X&quot;)<br />\r\n&#39;12:54:24&#39;<br />\r\n&gt;&gt;&gt; datetime.strftime(now, &quot;%c&quot;)<br />\r\n&#39;Sun Nov 11 12:54:24 2018&#39;<br />\r\n&gt;&gt;&gt; datetime.strftime(now, &quot;%A&quot;)<br />\r\n&#39;Sunday&#39;</tt></p>\r\n\r\n<hr />\r\n<p>You can any string too for formatting</p>\r\n\r\n<p>&gt;&gt;&gt; datetime.strftime(now, &quot;Hello Today&quot;)<br />\r\n&#39;Hello Today&#39;<br />\r\n&gt;&gt;&gt; datetime.strftime(now, &quot;Hello The Year is {}&quot;.format(now.year))<br />\r\n&#39;Hello The Year is 2018&#39;</p>\r\n</div>\r\n\r\n<p><strong>Note :</strong> If you want, you can change language of Python using locale module.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; import locale<br />\r\n&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, &#39;french&#39;)<br />\r\n&#39;French_France.1252&#39;<br />\r\n&gt;&gt;&gt; datetime.strftime(now, &quot;%A&quot;)<br />\r\n&#39;dimanche&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>strptime(string, format)&nbsp;</strong></p>\r\n\r\n<p>new datetime parsed from a string.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; string = &quot;Today is 27 October 2018 and time is 12:34:44&quot;<br />\r\n&gt;&gt;&gt; datetime.strptime(string, &quot;Today is %d %B %Y and time is %H:%M:%S&quot;)<br />\r\ndatetime.datetime(2018, 10, 27, 12, 34, 44)</tt></p>\r\n</div>\r\n\r\n<p><strong>timestamp(datetime)</strong></p>\r\n\r\n<p>Return POSIX timestamp as float.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; datetime.timestamp(now)<br />\r\n1541930635.480331</tt></p>\r\n</div>\r\n\r\n<p><strong>fromtimestamp(timestamp)</strong></p>\r\n\r\n<p>return local time from POSIX timestamp.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; datetime.fromtimestamp(datetime.timestamp(now))<br />\r\ndatetime.datetime(2018, 11, 11, 13, 3, 55, 480331)</tt></p>\r\n</div>\r\n\r\n<p><strong>utcfromtimestamp(timestamp)&nbsp;</strong></p>\r\n\r\n<p>Construct a naive UTC datetime from a POSIX timestamp.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now =datetime.today()<br />\r\n&gt;&gt;&gt; now<br />\r\ndatetime.datetime(2018, 11, 11, 14, 20, 49, 322664)<br />\r\n&gt;&gt;&gt; datetime.utcfromtimestamp(datetime.timestamp(now))<br />\r\ndatetime.datetime(2018, 11, 11, 11, 20, 49, 322664)</tt></p>\r\n</div>\r\n\r\n<p><strong>date(datetime)</strong></p>\r\n\r\n<p>Return date object with same year, month and day.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; datetime.date(now)<br />\r\ndatetime.date(2018, 11, 11)</tt></p>\r\n</div>\r\n\r\n<p><strong>time(datetime)</strong></p>\r\n\r\n<p>Return time object with same time but with tzinfo=None.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; datetime.time(now)<br />\r\ndatetime.time(13, 3, 55, 480331)</tt></p>\r\n</div>\r\n\r\n<p><strong>combine(date, time)&nbsp;</strong></p>\r\n\r\n<p>date, time -&gt; datetime with same date and time fields.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; a = datetime.date(now)<br />\r\n&gt;&gt;&gt; b = datetime.time(now)<br />\r\n&gt;&gt;&gt; datetime.combine(a, b)<br />\r\ndatetime.datetime(2018, 11, 11, 13, 3, 55, 480331)</tt></p>\r\n</div>\r\n\r\n<p><strong>isoformat(datetiem, sep)</strong></p>\r\n\r\n<p>sep is optional. return string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].</p>\r\n\r\n<p>sep is used to separate the year from the time, and defaults to &#39;T&#39;.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; datetime.isoformat(now)<br />\r\n&#39;2018-11-11T13:03:55.480331&#39;<br />\r\n&gt;&gt;&gt; datetime.isoformat(now, &quot;C&quot;)<br />\r\n&#39;2018-11-11C13:03:55.480331&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>isocalendar(datetime)</strong></p>\r\n\r\n<p>Return a 3-tuple containing ISO year, week number, and weekday.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; datetime.isocalendar(now)<br />\r\n(2018, 45, 7)</tt></p>\r\n</div>\r\n\r\n<p><strong>isoweekday(datetime)</strong></p>\r\n\r\n<p>Return the day of the week represented by the date. Monday == 1 ... Sunday == 7</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()</tt><br />\r\n<tt>&gt;&gt;&gt; datetime.isoweekday(now)</tt><br />\r\n7</p>\r\n</div>\r\n\r\n<p><strong>weekday(datetime)</strong></p>\r\n\r\n<p>Return the day of the week represented by the date. Monday == 0 ... Sunday == 6</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()</tt><br />\r\n<tt>&gt;&gt;&gt; datetime.weekday(now)</tt><br />\r\n6</p>\r\n</div>\r\n\r\n<p><strong>timetuple(datetime)</strong></p>\r\n\r\n<p>Return time tuple.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()</tt><br />\r\n<tt>&gt;&gt;&gt; datetime.timetuple(now)<br />\r\ntime.struct_time(tm_year=2018, tm_mon=11, tm_mday=11, tm_hour=13, tm_min=3, tm_sec=55, tm_wday=6, tm_yday=315, tm_isdst=-1)</tt></p>\r\n</div>\r\n\r\n<p><strong>timetz(datetime)</strong></p>\r\n\r\n<p>Return time object with same time and tzinfo.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()</tt><br />\r\n<tt>&gt;&gt;&gt; datetime.timetz(now)<br />\r\ndatetime.time(13, 3, 55, 480331)</tt></p>\r\n</div>\r\n\r\n<p><strong>replace(datetime)</strong></p>\r\n\r\n<p>Return datetime with new specified fields.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; datetime.replace(now)<br />\r\ndatetime.datetime(2018, 11, 11, 13, 3, 55, 480331)</tt></p>\r\n</div>\r\n\r\n<p><strong>utctimetuple(datetime)</strong></p>\r\n\r\n<p>Return UTC time tuple</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; datetime.replace(now)<br />\r\ndatetime.datetime(2018, 11, 11, 13, 3, 55, 480331)</tt><br />\r\n<tt>&gt;&gt;&gt; datetime.utctimetuple(now)<br />\r\ntime.struct_time(tm_year=2018, tm_mon=11, tm_mday=11, tm_hour=14, tm_min=20, tm_sec=49, tm_wday=6, tm_yday=315, tm_isdst=0)</tt></p>\r\n</div>\r\n\r\n<p><strong>utcnow()</strong></p>\r\n\r\n<p>Return a new datetime representing UTC day and time.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; datetime.utcnow()<br />\r\ndatetime.datetime(2018, 11, 11, 11, 26, 5, 862560)</tt></p>\r\n</div>\r\n\r\n<p><strong>max attribute</strong></p>\r\n\r\n<p>datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; datetime.max<br />\r\ndatetime.datetime(9999, 12, 31, 23, 59, 59, 999999)</tt></p>\r\n</div>\r\n\r\n<p><strong>min&nbsp;</strong></p>\r\n\r\n<p>datetime.datetime(1, 1, 1, 0, 0)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; datetime.min<br />\r\ndatetime.datetime(1, 1, 1, 0, 0)</tt></p>\r\n</div>\r\n\r\n<p><strong>resolution</strong></p>\r\n\r\n<p>datetime.timedelta(0, 0, 1)</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; datetime.resolution<br />\r\ndatetime.timedelta(0, 0, 1)</tt></p>\r\n</div>\r\n\r\n<p><strong>fromordinal(int)</strong>&nbsp;</p>\r\n\r\n<p>int -&gt; date corresponding to a proleptic Gregorian ordinal.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; datetime.fromordinal(100)<br />\r\ndatetime.datetime(1, 4, 10, 0, 0)</tt></p>\r\n</div>\r\n\r\n<p><strong>toordinal(datetime)</strong></p>\r\n\r\n<p>Return proleptic Gregorian ordinal. &nbsp;January 1 of year 1 is day 1.</p>\r\n\r\n<div>\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; datetime.toordinal(now)<br />\r\n737010</tt></p>\r\n</div>\r\n\r\n<p>&nbsp;<strong>date class</strong></p>\r\n</div>\r\n\r\n<p>date(year, month, day) --&gt; date object</p>\r\n\r\n<p>The year, month and day arguments are required to construct date object. It has no time features.&nbsp;</p>\r\n\r\n<p><strong>importing date class</strong></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; from datetime import date<br />\r\n&gt;&gt;&gt; date<br />\r\n&lt;class &#39;datetime.date</tt>&#39;&gt;</p>\r\n\r\n<hr />\r\n<p>You can prefer below importing style, but we prefer above style.</p>\r\n\r\n<p><tt>&gt;&gt;&gt; import datetime<br />\r\n&gt;&gt;&gt; datetime.date<br />\r\n&lt;class &#39;datetime.date&#39;&gt;</tt></p>\r\n</div>\r\n\r\n<p><strong>Construction of date class</strong></p>\r\n\r\n<p>You can use&nbsp;command of<strong>&nbsp;</strong><tt>date(year, month, day)</tt> <tt>--&gt; date object</tt></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; from datetime import date<br />\r\n&gt;&gt;&gt; date(2018, 11, 12)<br />\r\ndatetime.date(2018, 11, 12)</tt></p>\r\n</div>\r\n\r\n<p><strong>Attributes and methods of date class</strong></p>\r\n\r\n<p>datetime class has all&nbsp; attributes and methods of date class. So you can check like below this:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>for feature in dir(date):<br />\r\n&nbsp;&nbsp; &nbsp;if feature not in dir(datetime):<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;print(feature)</tt></p>\r\n\r\n<p><tt># There is no feature</tt></p>\r\n\r\n<hr />\r\n<p>If you see all of them, you can use below commands.</p>\r\n\r\n<p><tt>for feature in dir(date):<br />\r\n&nbsp;&nbsp; &nbsp;if feature in dir(datetime):<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;print(feature)</tt></p>\r\n\r\n<p><tt>ctime<br />\r\nday<br />\r\nfromordinal<br />\r\nfromtimestamp<br />\r\nisocalendar<br />\r\nisoformat<br />\r\nisoweekday<br />\r\nmax<br />\r\nmin<br />\r\nmonth<br />\r\nreplace<br />\r\nresolution<br />\r\nstrftime<br />\r\ntimetuple<br />\r\ntoday<br />\r\ntoordinal<br />\r\nweekday<br />\r\nyear</tt></p>\r\n</div>\r\n\r\n<p><strong>Note: </strong>Usage of the&nbsp;above methods and attributes is same as datetime class. So If yo need them, you can look at&nbsp;&nbsp;methods and attributes of datetime class. But you can see below examples about them.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; now = date.today()<br />\r\n&gt;&gt;&gt; now<br />\r\ndatetime.date(2018, 11, 12)<br />\r\n&gt;&gt;&gt; now.year<br />\r\n2018<br />\r\n&gt;&gt;&gt; now.month<br />\r\n11<br />\r\n&gt;&gt;&gt; now.day<br />\r\n12<br />\r\n&gt;&gt;&gt; date.ctime(now)<br />\r\n&#39;Mon Nov 12 00:00:00 2018&#39;<br />\r\n&gt;&gt;&gt; date.isoformat(now)<br />\r\n&#39;2018-11-12&#39;<br />\r\n&gt;&gt;&gt; date.isoweekday(now)<br />\r\n1<br />\r\n&gt;&gt;&gt; date.isocalendar(now)<br />\r\n(2018, 46, 1)<br />\r\n&gt;&gt;&gt; date.timetuple(now)<br />\r\ntime.struct_time(tm_year=2018, tm_mon=11, tm_mday=12, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=316, tm_isdst=-1)</tt></p>\r\n</div>\r\n\r\n<p><strong>timedelta class</strong></p>\r\n\r\n<p>Difference between two datetime values.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; from datetime import datetime<br />\r\n&gt;&gt;&gt; my_birthday = datetime(1986, 9, 23, 23, 15, 00)<br />\r\n&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; my_birthday<br />\r\ndatetime.datetime(1986, 9, 23, 23, 15)<br />\r\n&gt;&gt;&gt; now<br />\r\ndatetime.datetime(2018, 11, 12, 13, 39, 29, 883273)<br />\r\n&gt;&gt;&gt; difference = now - my_birthday<br />\r\n&gt;&gt;&gt; difference<br />\r\ndatetime.timedelta(11737, 51869, 883273)</tt></p>\r\n\r\n<hr />\r\n<p><tt>11737 is day<br />\r\n51869 is seconds<br />\r\n883273 is microseconds</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; difference.days<br />\r\n11737<br />\r\n&gt;&gt;&gt; difference.seconds<br />\r\n51869<br />\r\n&gt;&gt;&gt; difference.microseconds<br />\r\n883273<br />\r\n&gt;&gt;&gt; difference.total_seconds()<br />\r\n1014128669.883273</tt></p>\r\n</div>\r\n\r\n<p><strong>Construction of timedelta</strong></p>\r\n\r\n<p>timdelta(days, seconds, microseconds)</p>\r\n\r\n<p>days: number of days.<br />\r\nseconds: number of seconds (&gt;= 0 and less than 1 day).&nbsp;<br />\r\nmicroseconds: number of microseconds (&gt;= 0 and less than 1 second).</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; from datetime import timedelta<br />\r\n&gt;&gt;&gt; timedelta(200)<br />\r\ndatetime.timedelta(200)<br />\r\n&gt;&gt;&gt; timedelta(200, 60)<br />\r\ndatetime.timedelta(200, 60)<br />\r\n&gt;&gt;&gt; timedelta(200, 60, 30)<br />\r\ndatetime.timedelta(200, 60, 30)</tt></p>\r\n</div>\r\n\r\n<p><strong>Future Time</strong></p>\r\n\r\n<p>To obtain any future date, we should add date of now and timedelta(difference)</p>\r\n\r\n<p>future = now + timedelta</p>\r\n\r\n<p>Lets go one year. See below please.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; from datetime import datetime, timedelta<br />\r\n&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; now<br />\r\ndatetime.datetime(2018, 11, 12, 13, 56, 12, 359824)<br />\r\n&gt;&gt;&gt; difference = timedelta(365)<br />\r\n&gt;&gt;&gt; difference<br />\r\ndatetime.timedelta(365)<br />\r\n&gt;&gt;&gt; future = now + difference<br />\r\n&gt;&gt;&gt; future<br />\r\ndatetime.datetime(2019, 11, 12, 13, 56, 12, 359824)</tt></p>\r\n</div>\r\n\r\n<p><strong>Past Time</strong></p>\r\n\r\n<p>To obtain any past&nbsp;date, we should substract&nbsp;timedelta(difference) from&nbsp;now.</p>\r\n\r\n<p>past = now - timedelta</p>\r\n\r\n<p>Lets go back one year. See below please.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; from datetime import datetime, timedelta<br />\r\n&gt;&gt;&gt; now = datetime.today()<br />\r\n&gt;&gt;&gt; now<br />\r\ndatetime.datetime(2018, 11, 12, 13, 56, 12, 359824)<br />\r\n&gt;&gt;&gt; difference = timedelta(365)<br />\r\n&gt;&gt;&gt; difference<br />\r\ndatetime.timedelta(365)</tt><br />\r\n<tt>&gt;&gt;&gt; past = now - difference<br />\r\n&gt;&gt;&gt; past<br />\r\ndatetime.datetime(2017, 11, 12, 13, 56, 12, 359824)</tt></p>\r\n</div>', '<p>This module provides various functions to manipulate time values.&nbsp;&nbsp;There are two standard representations of time. &nbsp;One is the number of seconds since the<strong> Epoch</strong>&nbsp;is system-defined.&nbsp;it is generally January 1st, 1970. The actual value can be retrieved by calling gmtime(0). The epoch is reference time point for time module.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; import time</tt><br />\r\n<tt>&gt;&gt;&gt; time.gmtime(0)<br />\r\ntime.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)</tt></p>\r\n</div>\r\n\r\n<p>The other representation is a tuple of 9 integers giving local time.</p>\r\n\r\n<p>year (including century, e.g. 1998),&nbsp;month (1-12), day (1-31), hours (0-23), minutes (0-59), seconds (0-59), weekday (0-6, Monday is 0), Julian day (day in the year, 1-366)<br />\r\n&nbsp;and DST (Daylight Savings Time) flag (-1, 0 or 1)<br />\r\n&nbsp; &nbsp; If the DST flag is 0, the time is given in the regular time zone;<br />\r\n&nbsp; &nbsp; if it is 1, the time is given in the DST time zone;<br />\r\n&nbsp; &nbsp; if it is -1, mktime() should guess based on the date and time.</p>\r\n\r\n<p><strong>Methods and attributes of time modules</strong></p>\r\n\r\n<p>We can list all of them using dir(time) command.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; import time<br />\r\n&gt;&gt;&gt; dir(time)<br />\r\n[&#39;_STRUCT_TM_ITEMS&#39;, &#39;__doc__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;altzone&#39;, &#39;asctime&#39;, &#39;clock&#39;, &#39;ctime&#39;, &#39;daylight&#39;, &#39;get_clock_info&#39;, &#39;gmtime&#39;, &#39;localtime&#39;, &#39;mktime&#39;, &#39;monotonic&#39;, &#39;perf_counter&#39;, &#39;process_time&#39;, &#39;sleep&#39;, &#39;strftime&#39;, &#39;strptime&#39;, &#39;struct_time&#39;, &#39;time&#39;, &#39;timezone&#39;, &#39;tzname&#39;]</tt></p>\r\n</div>\r\n\r\n<p><strong>time()</strong></p>\r\n\r\n<p>return current time in seconds since the Epoch as a float.</p>\r\n\r\n<p>time() -&gt; floating point number(seconds).</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>&gt;&gt;&gt; time.time()<br />\r\n1542035439.6167371</p>\r\n</div>\r\n\r\n<p><strong>sleep(seconds)</strong></p>\r\n\r\n<p>delay for a number of seconds given as a float. The argument may be a floating point number for subsecond precision.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.sleep(0.5) # 0.5 second delay<br />\r\n&gt;&gt;&gt; time.sleep(1)&nbsp;# 1&nbsp;second delay<br />\r\n&gt;&gt;&gt; time.sleep(2)&nbsp;# 2&nbsp;second delay</tt></p>\r\n</div>\r\n\r\n<p><strong>gmtime()</strong></p>\r\n\r\n<p>convert seconds since Epoch to UTC tuple.&nbsp;When &#39;seconds&#39; is not passed in, convert the current time instead.&nbsp;time.gmtime(0) return Epoch time(generally January 1st, 1970)</p>\r\n\r\n<p><tt>gmtime([seconds]) -&gt; time.struct_time(tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_sec, tm_wday, tm_yday, tm_isdst)</tt></p>\r\n\r\n<p><strong>time.time.struct_time class</strong></p>\r\n\r\n<p>It is returned by gmtime(), localtime(), and strptime(), and accepted by asctime(), mktime() and strftime(). It consists of below&nbsp;paramterers:</p>\r\n\r\n<p>tm_year &rArr; year, for example, 1993<br />\r\ntm_mon&nbsp;&rArr; month of year, range [1, 12]<br />\r\ntm_mday&nbsp;&rArr; day of month, range [1, 31]<br />\r\ntm_hour&nbsp;&rArr; hours, range [0, 23]<br />\r\ntm_min&nbsp;&rArr; minutes, range [0, 59]<br />\r\ntm_sec&nbsp;&rArr; seconds, range [0, 61])<br />\r\ntm_wday&nbsp;&rArr; day of week, range [0, 6], Monday is 0<br />\r\ntm_yday&nbsp;&rArr; day of year, range [1, 366]<br />\r\ntm_isdst&nbsp;&rArr; 1 if summer time is in effect, 0 if not, and -1 if unknown<br />\r\ntm_gmtoff&nbsp;&rArr; offset from UTC in seconds<br />\r\ntm_zone&nbsp;&rArr;&nbsp;abbreviation of timezone name</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.gmtime()<br />\r\ntime.struct_time(tm_year=2018, tm_mon=11, tm_mday=13, tm_hour=10, tm_min=17, tm_sec=9, tm_wday=1, tm_yday=317, tm_isdst=0)<br />\r\n&gt;&gt;&gt; time.gmtime(0)<br />\r\ntime.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)<br />\r\n&gt;&gt;&gt; time.gmtime(time.time())<br />\r\ntime.struct_time(tm_year=2018, tm_mon=11, tm_mday=13, tm_hour=10, tm_min=18, tm_sec=7, tm_wday=1, tm_yday=317, tm_isdst=0)</tt>&nbsp;</p>\r\n</div>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; utc.tm_zone<br />\r\n&#39;UTC&#39;<br />\r\n&gt;&gt;&gt; utc.tm_gmtoff<br />\r\n0<br />\r\n&gt;&gt;&gt; utc.tm_year<br />\r\n2018<br />\r\n&gt;&gt;&gt; utc.tm_mon<br />\r\n11<br />\r\n&gt;&gt;&gt; utc.tm_yday<br />\r\n317</tt></p>\r\n</div>\r\n\r\n<p><strong>localtime()</strong></p>\r\n\r\n<p>convert seconds since Epoch to local time tuple.&nbsp;When &#39;seconds&#39; is not passed in, convert the current time instead.</p>\r\n\r\n<p>localtime([seconds]) -&gt;<tt>time.struct_time</tt></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.localtime()<br />\r\ntime.struct_time(tm_year=2018, tm_mon=11, tm_mday=13, tm_hour=13, tm_min=29, tm_sec=56, tm_wday=1, tm_yday=317, tm_isdst=0)<br />\r\n&gt;&gt;&gt; time.localtime(0)<br />\r\ntime.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=3, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)<br />\r\n&gt;&gt;&gt; time.localtime(time.time())<br />\r\ntime.struct_time(tm_year=2018, tm_mon=11, tm_mday=13, tm_hour=13, tm_min=30, tm_sec=58, tm_wday=1, tm_yday=317, tm_isdst=0)</tt></p>\r\n</div>\r\n\r\n<p><strong>asctime() </strong></p>\r\n\r\n<p>convert time tuple to string, e.g. &#39;Sat Jun 06 16:26:11 1998&#39;.&nbsp; When the time tuple is not present, current time as returned by localtime() is used</p>\r\n\r\n<p>asctime([tuple]) -&gt; string&nbsp;<br />\r\ntuple can be 9 integer or&nbsp;<tt>time.struct_time</tt></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.asctime(time.localtime())<br />\r\n&#39;Tue Nov 13 13:42:03 2018&#39;<br />\r\n&gt;&gt;&gt; time.asctime(time.gmtime())<br />\r\n&#39;Tue Nov 13 10:42:18 2018&#39;<br />\r\n&gt;&gt;&gt; time.asctime((2018, 11, 13, 13, 45, 23, 0, 0, 0))<br />\r\n&#39;Mon Nov 13 13:45:23 2018&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>ctime()</strong></p>\r\n\r\n<p>Convert a time in seconds since the Epoch to a string in local time. This is equivalent to asctime(localtime(seconds)). When the time tuple is not present, current time as returned by localtime() is used.</p>\r\n\r\n<p>ctime(seconds) -&gt; string</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.ctime()<br />\r\n&#39;Tue Nov 13 13:46:35 2018&#39;<br />\r\n&gt;&gt;&gt; time.ctime(time.time())<br />\r\n&#39;Tue Nov 13 13:46:54 2018&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>mktime()</strong></p>\r\n\r\n<p>convert local time tuple to seconds since Epoch</p>\r\n\r\n<p>mktime(tuple) -&gt; seconds, floating point number</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.mktime(time.localtime())<br />\r\n1542106260.0<br />\r\n&gt;&gt;&gt; time.mktime((2018, 11, 13, 13, 45, 23, 0, 0, 0))<br />\r\n1542105923.0</tt>&nbsp;&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>strftime()</strong></p>\r\n\r\n<p>Convert a time tuple to a string according to a format specification. See the library reference manual for formatting codes. When the time tuple is not present, current time as returned by localtime() is used.</p>\r\n\r\n<p>strftime(tuple, format,) -&gt; string</p>\r\n\r\n<p>Commonly used format codes:</p>\r\n\r\n<p>%Y &nbsp;Year with century as a decimal number.<br />\r\n%m &nbsp;Month as a decimal number [01,12].<br />\r\n%d &nbsp;Day of the month as a decimal number [01,31].<br />\r\n%H &nbsp;Hour (24-hour clock) as a decimal number [00,23].<br />\r\n%M &nbsp;Minute as a decimal number [00,59].<br />\r\n%S &nbsp;Second as a decimal number [00,61].<br />\r\n%z &nbsp;Time zone offset from UTC.<br />\r\n%a &nbsp;Locale&#39;s abbreviated weekday name.<br />\r\n%A &nbsp;Locale&#39;s full weekday name.<br />\r\n%b &nbsp;Locale&#39;s abbreviated month name.<br />\r\n%B &nbsp;Locale&#39;s full month name.<br />\r\n%c &nbsp;Locale&#39;s appropriate date and time representation.<br />\r\n%I &nbsp;Hour (12-hour clock) as a decimal number [01,12].<br />\r\n%p &nbsp;Locale&#39;s equivalent of either AM or PM.<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\nOther codes may be available on your platform. &nbsp;See documentation for the C library strftime function.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.strftime(&quot;%Y&quot;)<br />\r\n&#39;2018&#39;<br />\r\n&gt;&gt;&gt; time.strftime(&quot;%m&quot;)<br />\r\n&#39;11&#39;<br />\r\n&gt;&gt;&gt; time.strftime(&quot;%z&quot;)<br />\r\n&#39;+0300&#39;<br />\r\n&gt;&gt;&gt; time.strftime(&quot;%c&quot;)<br />\r\n&#39;Tue Nov 13 13:57:47 2018&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>strptime()&nbsp;</strong></p>\r\n\r\n<p>parse string to time tuple according to format specification</p>\r\n\r\n<p>strptime(string, format) -&gt; struct_time</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.strptime(&quot;13 November 2018&quot;, &quot;%d %B %Y&quot;)<br />\r\ntime.struct_time(tm_year=2018, tm_mon=11, tm_mday=13, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=1, tm_yday=317, tm_isdst=-1)&nbsp;&nbsp;</tt></p>\r\n</div>\r\n\r\n<p><strong>timezone</strong></p>\r\n\r\n<p>difference in seconds between UTC and local standard time.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p>&gt;&gt;&gt; time.timezone<br />\r\n-10800</p>\r\n</div>\r\n\r\n<p><strong>altzone </strong></p>\r\n\r\n<p>difference in &nbsp;seconds between UTC and local DST time</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.altzone<br />\r\n-14400</tt></p>\r\n</div>\r\n\r\n<p><strong>daylight</strong></p>\r\n\r\n<p>whether local time should reflect DST</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.daylight<br />\r\n0</tt></p>\r\n</div>\r\n\r\n<p><strong>tzname</strong></p>\r\n\r\n<p>tuple of (standard time zone name, DST time zone name)</p>\r\n\r\n<p><strong>clock()</strong></p>\r\n\r\n<p>return CPU time&nbsp;or real time since process start as a float.This has as much precision as the system records.</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.clock()<br />\r\n4274.898318391978<br />\r\n&gt;&gt;&gt; time.clock()<br />\r\n4278.860589973983<br />\r\n&gt;&gt;&gt; time.ctime(time.clock())<br />\r\n&#39;Thu Jan &nbsp;1 04:12:02 1970&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>monotonic()</strong></p>\r\n\r\n<p>Monotonic clock, cannot go backward.</p>\r\n\r\n<p>monotonic() -&gt; seconds</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.monotonic()<br />\r\n5270.275</tt></p>\r\n</div>\r\n\r\n<p><strong>perf_counter()</strong></p>\r\n\r\n<p>Performance counter for benchmarking.</p>\r\n\r\n<p>perf_counter() -&gt;seconds</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.perf_counter()<br />\r\n4710.988114053768</tt></p>\r\n</div>\r\n\r\n<p><strong>process_time()</strong></p>\r\n\r\n<p>Process time for profiling: sum of the kernel and user-space CPU time.&nbsp; &nbsp; &nbsp;&nbsp;</p>\r\n\r\n<p>process_time() -&gt; seconds</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">\r\n<p><tt>&gt;&gt;&gt; time.process_time()<br />\r\n0.8736056</tt></p>\r\n</div>\r\n\r\n<p><strong>get_clock_info()</strong></p>\r\n\r\n<p>Get information of the specified clock.&nbsp;</p>\r\n\r\n<p>get_clock_info(name: str) -&gt; dict</p>', '<p>198</p>', '<p>199</p>', '<p>200</p>', '<p>201</p>']

def headline():
	return ['What is Python?', 'Why Python?', 'How can i set up Python?', 'How can i work Python?', 'Python Shell', 'Text editors for Python', 'Variables, values and types', 'Operators', 'Arithmetic operators', 'Comparision operators', 'Boolean operators', 'Assignment operators', 'Possessive operator', 'Identity operator', 'Comments', 'Conditional statements (if-elif-else)', "Getting from user's input", 'Built-in function', 'Conversion functions', 'int()', 'str()', 'float()', 'complex()', 'abs()', 'round()', 'all()', 'any()', 'ascii()', 'repr()', 'bool()', 'bin()', 'bytes()', 'bytearray()', 'chr()', 'list()', 'set()', '36', 'tuple()', 'frozenset()', 'dict()', 'callable()', 'ord()', 'oct()', 'hex()', 'globals()', 'locals()', 'copyright()', 'credits()', 'license()', 'dir()', 'divmod()', 'enumerate()', 'exit()', 'help()', 'id()', 'input()', 'filter()', 'hash()', 'isinstance()', 'len()', 'map()', 'max()', 'min()', 'open()', 'pow()', 'print()', 'quit()', 'range()', 'reversed()', 'sorted()', 'slice()', 'sum()', 'type()', 'zip()', 'vars()', 'memoryview()', 'iter()', 'Loops (while, for)', 'Functions', 'Creating and calling functions', 'Parameters and arguments', 'global', 'Strings', 'Slice and reverse a string', 'Strings are immutable', 'String methods', 'replace()', 'split() and rsplit()', 'splitlines()', 'lower()', 'upper()', 'islower()', 'isupper()', 'endswith() and startswith()', 'capitalize()', 'title()', 'swapcase()', 'casefold()', 'strip(), lstrip() and rstrip()', 'join()', 'count()', 'index() and rindex()', 'find() and rfind()', 'center()', 'rjust() and ljust()', 'zfill()', 'partition() and rpartition()', 'encode()', 'expandtabs()', 'str.maketrans() and translate()', 'isalpha()', 'isdigit()', 'isalnum()', 'isdecimal()', 'isidentifier()', 'isnumeric()', 'isspace()', 'isprintable()', 'format', 'Lists', 'List methods', 'append()', 'extend()', 'insert()', 'remove()', 'reverse()', 'pop()', 'sort()', 'index() and count()', 'copy()', 'clear()', 'Tuples', 'Tuple methods', 'Dictionaries', 'Dictionary Methods', 'keys()', 'values()', 'items()', 'get()', 'clear()', 'copy()', 'fromkeys()', 'pop()', 'popitem()', 'setdefault()', 'update()', 'Numbers', 'Sets', 'Set methods', 'clear()', 'copy()', 'add()', 'difference()', 'difference_update()', 'discard()', 'remove()', 'intersection()', 'intersection_update()', 'isdisjoint', 'issubset()', 'issuperset()', 'union()', 'set.update()', 'symmetric_difference()', 'symmetric_difference_ update', 'pop()', 'Frozensets', 'try except', 'Escape Sequence', 'Files', 'Files methods', 'Binary Files', 'Bytes and Bytearrays', 'Character Encoding', 'Digit systems', 'lambda and recursive functions', 'Modules', 'Common atrributes of the modules', 'Importing modules', 'Object-Oriented Programming', 'Class methods', 'Class members', 'Inheritance', 'Construction, Initialization and Destruction', 'Packages', 'Importing Packages(Modules)', 'Constructing Package', 'Regular Expression', 'Match Object Methods and Attributes', 'Special seqeunces', 'Special Characters', 'Regular Expression Methods and Flags', 'Sqlite3', 'os modules', 'sys', 'random', 'datetime', 'time', '198', '199', '200', '201']
