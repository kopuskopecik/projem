def hepsi():
	return [['frozenset()', 'dict()', 'callable()', 'ord()', 'globals()', 'locals()', 'copyright(), credits() and license()', 'dir()', 'divmod()', 'enumerate()', 'exit() and quit()', 'help()', 'id()', 'input()', 'filter()', 'hash()', 'isinstance()', 'len()', 'map()', 'max()', 'min()', 'open()', 'pow()', 'print()', 'range()', 'reversed()', 'sorted()', 'slice()', 'sum()', 'type()', 'zip()'], ['<p>It can be used two different ways like list(), set() and&nbsp;tuple() functions.</p>\r\n\r\n<p>1. To have new empty frozenset&nbsp;object<br />\r\n2. To construct&nbsp;new frozenset object which is an unordered collection of unique elements.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> frozenset(&#39;<span style="color:#e67e22">python</span>&#39;)<br />\r\nfrozenset({&#39;n&#39;, &#39;h&#39;, &#39;t&#39;, &#39;p&#39;, &#39;o&#39;, &#39;y&#39;})</tt></p>\r\n</div>', '<p>It can be used three&nbsp;different ways.</p>\r\n\r\n<p><strong>1.</strong> to construct new empty dictionary</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = dict()<br />\r\n&gt;&gt;&gt; a<br />\r\n{}</tt></p>\r\n</div>\r\n\r\n<p><strong>2.</strong>&nbsp;To initialize new dictionary from a mapping object&#39;s (key, value) pairs</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [[&#39;<span style="color:#e67e22">a</span>&#39;, 1],[&#39;<span style="color:#e67e22">b</span>&#39;, 2],[&#39;<span style="color:#e67e22">c</span>&#39;, <span style="color:#2ecc71">3</span>],[&#39;<span style="color:#e67e22">d</span>&#39;, <span style="color:#2ecc71">5</span>]]<br />\r\n&gt;&gt;&gt; dict(a)<br />\r\n{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 5}</tt></p>\r\n</div>\r\n\r\n<p><strong>3. </strong>New dictionary initialized with the name=value pairs</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict(a=<span style="color:#2ecc71">1</span>, b=<span style="color:#2ecc71">2</span>, c=<span style="color:#2ecc71">3</span>, d=<span style="color:#2ecc71">4</span>)<br />\r\n{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4}</tt></p>\r\n</div>', '<p>It returns whether the object is callable such as :functions. If is callable, it returns <span style="color:#16a085">True</span>,&nbsp;otherwise <span style="color:#c0392b">False</span>. Functions are callable but variables is not callable.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; callable(input)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; callable(list)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = <span style="color:#2ecc71">34</span><br />\r\n&gt;&gt;&gt; callable(a)<br />\r\nFalse</tt></p>\r\n</div>', '<p>It returns the Unicode code point for a one-character string.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; ord(&#39;<span style="color:#e67e22">a</span>&#39;)<br />\r\n97</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; ord(&#39;<span style="color:#e67e22">A</span>&#39;)<br />\r\n65</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; ord(&#39;<span style="color:#e67e22">Åž</span>&#39;)<br />\r\n350</tt></p>\r\n</div>', '<p>It&nbsp;returns the dictionary containing the current scope&#39;s global variables. Updates to this dictionary *will* affect name lookups in the current global scope and vice-versa.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; globals()<br />\r\n{&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None, &#39;__package__&#39;: None, &#39;__loader__&#39;: &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &#39;__spec__&#39;: None, &#39;__annotations__&#39;: {}, &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;}</span></tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; a = 15<br />\r\n&gt;&gt;&gt; b = 36<br />\r\n&gt;&gt;&gt; globals()<br />\r\n{&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None, &#39;__package__&#39;: None, &#39;__loader__&#39;: &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &#39;__spec__&#39;: None, &#39;__annotations__&#39;: {}, &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;, &#39;<strong>a&#39;: 15, &#39;b&#39;: 36</strong>}</tt></p>\r\n</div>\r\n\r\n<p>Updates to this dictionary *will* affect name lookups in the current global scope and vice-versa. but it is not necessary if you need really. You can change this dictionary like this:</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; globals()[&#39;</span><span style="color:#e67e22">c</span><span style="color:null">&#39;]= </span><span style="color:#2ecc71">40</span><br />\r\n<span style="color:null">&gt;&gt;&gt; globals()<br />\r\n{&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None, &#39;__package__&#39;: None, &#39;__loader__&#39;: &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &#39;__spec__&#39;: None, &#39;__annotations__&#39;: {}, &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;, &#39;a&#39;: 15, &#39;b&#39;: 36, <strong>&#39;c&#39;: 40</strong>}</span></tt></p>\r\n</div>', '<p>It return a dictionary containing the current scope&#39;s local variables. It is used generally for functions. You couldn&#39;t reach this/these variables from global scope.</p>\r\n\r\n<div class="codes">\r\n<p><tt>def fonksiyon(param1, param2):<br />\r\n&nbsp; &nbsp; x = <span style="color:#1abc9c">10</span><br />\r\n&nbsp; &nbsp; y= param1 + param2<br />\r\n&nbsp; &nbsp; print(locals())</tt></p>\r\n\r\n<p><tt>fonksiyon(<span style="color:#1abc9c">10</span>, <span style="color:#1abc9c">20</span>)</tt></p>\r\n\r\n<hr />\r\n<p><tt>when examples1 runs from a file such as Python IDLE,&nbsp; our result will be&nbsp;</tt></p>\r\n\r\n<p><tt>{&#39;y&#39;: 30, &#39;x&#39;: 10, &#39;param2&#39;: 20, &#39;param1&#39;: 10}</tt></p>\r\n</div>\r\n\r\n<p>You can change this dictionary, but you can affect your program if the added variable is in your program.</p>\r\n\r\n<div class="codes">\r\n<p><tt>locals()[&#39;<span style="color:#e67e22">a</span>&#39;] = <span style="color:#1abc9c">50</span><br />\r\nlocals()</tt></p>\r\n\r\n<p><tt>{&#39;y&#39;: 30, &#39;x&#39;: 10, &#39;param2&#39;: 20, &#39;param1&#39;: 10, <strong>&#39;a&#39;: 50</strong></tt>}</p>\r\n</div>', '<h4>copyright()</h4>\r\n\r\n<p>It returns a list of contributors and the copyright notice.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> copyright()<br />\r\nCopyright (c) 2001-2016 Python Software Foundation.<br />\r\nAll Rights Reserved.</tt></p>\r\n\r\n<p><tt>Copyright (c) 2000 BeOpen.com.<br />\r\nAll Rights Reserved.</tt></p>\r\n\r\n<p><tt>Copyright (c) 1995-2001 Corporation for National Research Initiatives.<br />\r\nAll Rights Reserved.</tt></p>\r\n\r\n<p><tt>Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.<br />\r\nAll Rights Reserved.</tt></p>\r\n</div>\r\n\r\n<h4>credits()</h4>\r\n\r\n<p>It returns a list of contributors and the copyright notice especially about programming language.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span><span style="color:null"> credits()<br />\r\n&nbsp; &nbsp; Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands<br />\r\n&nbsp; &nbsp; for supporting Python development. &nbsp;See www.python.org for more information.</span></tt></p>\r\n</div>\r\n\r\n<h4>license()</h4>\r\n\r\n<p>It returns a lot of information about Python.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> license()<br />\r\nA. HISTORY OF THE SOFTWARE<br />\r\n==========================</tt></p>\r\n\r\n<p><tt>Python was created in the early 1990s by Guido van Rossum at Stichting<br />\r\nMathematisch Centrum (CWI, see http://www.cwi.nl) in the Netherlands<br />\r\nas a successor of a language called ABC. &nbsp;Guido remains Python&#39;s<br />\r\nprincipal author, although it includes many contributions from others.</tt></p>\r\n\r\n<p><tt>In 1995, Guido continued his work on Python at the Corporation for<br />\r\nNational Research Initiatives (CNRI, see http://www.cnri.reston.va.us)<br />\r\nin Reston, Virginia where he released several versions of the<br />\r\nsoftware.</tt></p>\r\n\r\n<p><tt>In May 2000, Guido and the Python core development team moved to<br />\r\nBeOpen.com to form the BeOpen PythonLabs team. &nbsp;In October of the same<br />\r\nyear, the PythonLabs team moved to Digital Creations (now Zope<br />\r\nCorporation, see http://www.zope.com). &nbsp;In 2001, the Python Software<br />\r\nFoundation (PSF, see http://www.python.org/psf/) was formed, a<br />\r\nnon-profit organization created specifically to own Python-related<br />\r\nIntellectual Property. &nbsp;Zope Corporation is a sponsoring member of<br />\r\nthe PSF.</tt></p>\r\n\r\n<p><tt>All Python releases are Open Source (see http://www.opensource.org for<br />\r\nHit Return for more, or q (and Return) to quit:&nbsp;</tt></p>\r\n</div>', '<p>If called without an argument, return the names in the current scope. Else, return an alphabetized list of names comprising (some of) the attributes of the given object.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; a= 25</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; b = 30</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; c = 45</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; dir()<br />\r\n[&#39;__annotations__&#39;, &#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span></tt></p>\r\n</div>\r\n\r\n<p><strong><span style="color:#e74c3c">If you want to see attributes of strings</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; dir(&#39;&#39;)<br />\r\n[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;]</span></tt></p>\r\n</div>\r\n\r\n<p><strong><span style="color:#e74c3c">If you want to see attributes of lists</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; dir([])<br />\r\n[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;]</span></tt></p>\r\n</div>', '<p>It returns the tuple (x//y, x%y).</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; divmod(<span style="color:#1abc9c">12</span>, <span style="color:#1abc9c">4</span>)<br />\r\n(3, 0)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; divmod(<span style="color:#1abc9c">12.5</span>, <span style="color:#1abc9c">6</span>)<br />\r\n(2.0, 0.5)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; divmod(<span style="color:#1abc9c">5</span>, <span style="color:#1abc9c">2</span>)<br />\r\n(2, 1)</tt></p>\r\n</div>', '<p>Return an enumerate object. This object must ve iterable such as string but numbers can&#39;t be. To&nbsp;see the object, you can use the list() function.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = enumerate(&quot;<span style="color:#e67e22">python</span>&quot;)<br />\r\n&gt;&gt;&gt; list(a)<br />\r\n[(0, &#39;p&#39;), (1, &#39;y&#39;), (2, &#39;t&#39;), (3, &#39;h&#39;), (4, &#39;o&#39;), (5, &#39;n&#39;)]</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; a = enumerate([&quot;<span style="color:#e67e22">a</span>&quot;, &quot;<span style="color:#e67e22">b</span>&quot;, &quot;<span style="color:#e67e22">c</span>&quot;])<br />\r\n&gt;&gt;&gt; list(a)<br />\r\n[(<span style="color:#1abc9c">0</span>, &#39;<span style="color:#e67e22">a</span>&#39;), (<span style="color:#1abc9c">1</span>, &#39;<span style="color:#e67e22">b</span>&#39;), (<span style="color:#1abc9c">2</span>, &#39;<span style="color:#e67e22">c</span>&#39;)]</tt></p>\r\n</div>\r\n\r\n<p>The starting point is zero as default. It can be changed with second parameter.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = enumerate(&#39;<span style="color:#e67e22">python</span>&#39;, <span style="color:#1abc9c">1</span>)<br />\r\n&gt;&gt;&gt; list(a)<br />\r\n[(1, &#39;p&#39;), (2, &#39;y&#39;), (3, &#39;t&#39;), (4, &#39;h&#39;), (5, &#39;o&#39;), (6, &#39;n&#39;)]</tt></p>\r\n</div>', '<p>They are used&nbsp;to exit a program or close to the Python shell.</p>', '<p>You can use reach the document of Python with this function which is very useful.</p>\r\n\r\n<p>It is used with two ways.</p>\r\n\r\n<p>1. When you&nbsp;write to shell &quot;help()&quot;, you will see like this:</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span>&nbsp;help()</tt></p>\r\n\r\n<p><tt>Welcome to Python 3.6&#39;s help utility!</tt></p>\r\n\r\n<p><tt>If this is your first time using Python, you should definitely check out<br />\r\nthe tutorial on the Internet at http://docs.python.org/3.6/tutorial/.</tt></p>\r\n\r\n<p><tt>Enter the name of any module, keyword, or topic to get help on writing<br />\r\nPython programs and using Python modules. &nbsp;To quit this help utility and<br />\r\nreturn to the interpreter, just type &quot;quit&quot;.</tt></p>\r\n\r\n<p><tt>To get a list of available modules, keywords, symbols, or topics, type<br />\r\n&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;. &nbsp;Each module also comes<br />\r\nwith a one-line summary of what it does; to list the modules whose name<br />\r\nor summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;.</tt></p>\r\n\r\n<p><tt>help&gt;</tt></p>\r\n\r\n<p><tt>and then after <strong>help&gt;</strong>, you can type what about you want to have information.&nbsp;</tt></p>\r\n\r\n<p><tt>help&gt; if<br />\r\nThe &quot;if&quot; statement<br />\r\n******************</tt></p>\r\n\r\n<p><tt>The &quot;if&quot; statement is used for conditional execution:</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp;if_stmt ::= &quot;if&quot; expression &quot;:&quot; suite<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;( &quot;elif&quot; expression &quot;:&quot; suite )*<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[&quot;else&quot; &quot;:&quot; suite]</tt></p>\r\n\r\n<p><tt>It selects exactly one of the suites by evaluating the expressions one<br />\r\nby one until one is found to be true (see section Boolean operations<br />\r\nfor the definition of true and false); then that suite is executed<br />\r\n(and no other part of the &quot;if&quot; statement is executed or evaluated).<br />\r\nIf all expressions are false, the suite of the &quot;else&quot; clause, if<br />\r\npresent, is executed.</tt></p>\r\n\r\n<p><tt>Related help topics: TRUTHVALUE</tt></p>\r\n</div>\r\n\r\n<p>2. second way is writing inside help function like this:</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; help(dir)<br />\r\nHelp on built-in function dir in module builtins:</tt></p>\r\n\r\n<p><tt>dir(...)<br />\r\n&nbsp; &nbsp; dir([object]) -&gt; list of strings<br />\r\n&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; If called without an argument, return the names in the current scope.<br />\r\n&nbsp; &nbsp; Else, return an alphabetized list of names comprising (some of) the attributes<br />\r\n&nbsp; &nbsp; of the given object, and of attributes reachable from it.<br />\r\n&nbsp; &nbsp; If the object supplies a method named __dir__, it will be used; otherwise<br />\r\n&nbsp; &nbsp; the default dir() logic is used and returns:<br />\r\n&nbsp; &nbsp; &nbsp; for a module object: the module&#39;s attributes.<br />\r\n&nbsp; &nbsp; &nbsp; for a class object: &nbsp;its attributes, and recursively the attributes<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; of its bases.<br />\r\n&nbsp; &nbsp; &nbsp; for any other object: its attributes, its class&#39;s attributes, and<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; recursively the attributes of its class&#39;s base classes.</tt></p>\r\n\r\n<hr />\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> help(&#39;<span style="color:#e67e22">if</span>&#39;)<br />\r\nThe &quot;if&quot; statement<br />\r\n******************</tt></p>\r\n\r\n<p><tt>The &quot;if&quot; statement is used for conditional execution:</tt></p>\r\n\r\n<p><tt>&nbsp; &nbsp;if_stmt ::= &quot;if&quot; expression &quot;:&quot; suite<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;( &quot;elif&quot; expression &quot;:&quot; suite )*<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[&quot;else&quot; &quot;:&quot; suite]</tt></p>\r\n\r\n<p><tt>It selects exactly one of the suites by evaluating the expressions one<br />\r\nby one until one is found to be true (see section Boolean operations<br />\r\nfor the definition of true and false); then that suite is executed<br />\r\n(and no other part of the &quot;if&quot; statement is executed or evaluated).<br />\r\nIf all expressions are false, the suite of the &quot;else&quot; clause, if<br />\r\npresent, is executed.</tt></p>\r\n\r\n<p><tt>Related help topics: TRUTHVALUE</tt></p>\r\n</div>', '<p>It return the identity of an object. This is guaranteed to be unique among simultaneously existing objects.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> id(<span style="color:#1abc9c">46</span>)<br />\r\n1758415200</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> id(<span style="color:#1abc9c">100</span>)<br />\r\n1758416064</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> id(&#39;<span style="color:#e67e22">apple</span>&#39;)<br />\r\n34757184</tt></p>\r\n</div>', '<p>It read a string from standard input. Output is always string.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; input(&#39;<span style="color:#e67e22">Whats your name:</span>&#39;)<br />\r\nWhats your name:John<br />\r\n&#39;John&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; input(<span style="color:#e67e22">&#39;How old are you \\n&#39;</span>)<br />\r\nHow old are you&nbsp;<br />\r\n25<br />\r\n&#39;25&#39;</tt></p>\r\n</div>', '<p>Return an&nbsp;items of iterable(list, tuple, string,,,) for which function(item) is true. If function is None, return the items that are true. It takes two parameters. One of them is a name of function, second one is iterable object like list, string, tuple.</p>\r\n\r\n<p><strong>filter(function_name, iterable_object)</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>a = [<span style="color:#2ecc71">1</span>, <span style="color:#2ecc71">2</span>, <span style="color:#2ecc71">3</span>, <span style="color:#2ecc71">4</span>, <span style="color:#2ecc71">5</span>, <span style="color:#2ecc71">6</span>, <span style="color:#2ecc71">7</span>, <span style="color:#2ecc71">8</span>, <span style="color:#2ecc71">9</span>, <span style="color:#2ecc71">10</span>]<br />\r\ndef odd(number):<br />\r\n&nbsp; &nbsp; return number % <span style="color:#2ecc71">2 </span>== <span style="color:#2ecc71">1</span></tt></p>\r\n\r\n<p><tt>b = filter(odd, a)<br />\r\nprint(b)<br />\r\nprint(*b)</tt></p>\r\n\r\n<p><tt><strong>&lt;filter object at 0x02265490&gt;<br />\r\n1 3 5 7 9</strong></tt></p>\r\n</div>\r\n\r\n<p><strong><span style="color:#e74c3c">for string</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">a = &quot;</span><span style="color:#e67e22">123456789</span><span style="color:null">&quot;<br />\r\ndef odd(string):<br />\r\n&nbsp; &nbsp; return int(string) % </span><span style="color:#2ecc71">2 </span><span style="color:null">== </span><span style="color:#2ecc71">1</span></tt></p>\r\n\r\n<p><tt><span style="color:null">b = filter(odd, a)<br />\r\nprint(b)<br />\r\nprint(*b)</span></tt></p>\r\n\r\n<p><tt>&lt;filter object at 0x02265490&gt;<br />\r\n1 3 5 7 9</tt></p>\r\n</div>\r\n\r\n<p><span style="color:#e74c3c"><strong>no function&nbsp;</strong></span></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = filter(None, [<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">3</span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">5</span>])<br />\r\n&gt;&gt;&gt; print(a)<br />\r\n&lt;filter object at 0x022F4E70&gt;<br />\r\n&gt;&gt;&gt; print(*a)<br />\r\n1 2 3 4 5</tt></p>\r\n</div>', '<p>Return the hash value for the given object which can be string or number.&nbsp; It takes one parameter. If two objects has same value, their hash values are same too.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; hash(<span style="color:#2ecc71">12.5</span>)<br />\r\n1073741836</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; hash(<span style="color:#2ecc71">12</span>)<br />\r\n12</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; hash(&#39;<span style="color:#e67e22">python</span>&#39;)<br />\r\n-443420559</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; hash(&#39;<span style="color:#e67e22">Hello World</span>&#39;)<br />\r\n-1645620467</tt></p>\r\n</div>', '<p>It returns whether an object(integer, float, string, list) is an instance of a class. It takes two parameter they are an object and class type. output is True or False.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; isinstance(&#39;<span style="color:#e67e22">apple</span>&#39;, str)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; isinstance(<span style="color:#1abc9c">256</span>, str)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; isinstance([], list)<br />\r\nTrue</tt></p>\r\n</div>', '<p>Return the number of items in a container. It takes a parameter which is iterable(string, list, tuple,,,). So an integer can&#39;t be a parameter for it. But Output is an integer.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; len(&#39;<span style="color:#e67e22">python</span>&#39;)<br />\r\n6</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type(len(&#39;<span style="color:#e67e22">python</span>&#39;))<br />\r\n&lt;class &#39;int&#39;&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; len([<span style="color:#2ecc71">1</span>, <span style="color:#2ecc71">2</span>, <span style="color:#1abc9c">3</span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">5</span>, <span style="color:#1abc9c">6</span>])<br />\r\n6</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; len(<span style="color:#1abc9c">123456</span>)<br />\r\nTraceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#22&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; len(123456)<br />\r\nTypeError: object of type &#39;int&#39; has no len()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; len({&#39;<span style="color:#e67e22">a</span>&#39;:<span style="color:#1abc9c">5</span>, &#39;<span style="color:#e67e22">b</span>&#39;:<span style="color:#1abc9c">6</span>, &#39;<span style="color:#e67e22">c</span>&#39;:<span style="color:#1abc9c">8</span>})<br />\r\n3</tt></p>\r\n</div>', '<p>It makes an iterator that computes the function using arguments from each of the iterables. &nbsp;Stops when the shortest iterable is exhausted.</p>\r\n\r\n<p><strong>map(func, *iterables) --&gt; map object</strong></p>\r\n\r\n<div class="codes">\r\n<p><strong><span style="color:#e74c3c"># given number and 5 will plus</span></strong><br />\r\n<tt>def plus_five(number):<br />\r\n&nbsp; &nbsp; return number + <span style="color:#1abc9c">5</span></tt></p>\r\n\r\n<p><tt>result = map(plus_five, [<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">3</span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">5</span>, <span style="color:#1abc9c">6</span>, <span style="color:#1abc9c">7</span>, <span style="color:#1abc9c">8</span>, <span style="color:#1abc9c">9</span>, <span style="color:#1abc9c">10</span>])<br />\r\nprint(*result)</tt></p>\r\n\r\n<p><tt>6 7 8 9 10 11 12 13 14 15</tt></p>\r\n</div>', '<p>It returns maximum value of an iterable(list, string...). It takes two parameters. one of them is optional(key parameter)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; max(<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">3 </span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">5</span>, <span style="color:#1abc9c">6</span>, <span style="color:#1abc9c">7</span>, <span style="color:#1abc9c">8</span>)<br />\r\n8</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])<br />\r\n10</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; max(&quot;<span style="color:#e67e22">123456789</span>&quot;)<br />\r\n&#39;9&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; max(&#39;<span style="color:#e67e22">ahmet</span>&#39;,&#39;<span style="color:#e67e22">as</span>&#39;)<br />\r\n&#39;as&#39;</tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; a =[&quot;</span><span style="color:#e67e22">pyhton</span><span style="color:null">&quot;, &#39;</span><span style="color:#e67e22">C++</span><span style="color:null">&#39;, &#39;</span><span style="color:#e67e22">Javascript</span><span style="color:null">&#39;]</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; max(a, key = len)<br />\r\n&#39;Javascript&#39;</span></tt></p>\r\n</div>', '<p>It works&nbsp;like max() function but it return minimum value.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; min(&#39;<span style="color:#e67e22">python</span>&#39;,&#39;<span style="color:#e67e22">C++</span>&#39;,&#39;<span style="color:#e67e22">Javascript</span>&#39;,&#39;<span style="color:#e67e22">Java</span>&#39;)<br />\r\n&#39;C++&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; min(<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">3</span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">5</span>, <span style="color:#1abc9c">6</span>, <span style="color:#1abc9c">7</span>, <span style="color:#1abc9c">8</span>)<br />\r\n1</tt></p>\r\n</div>', '<p>To read or write a file , we first must open the file. open() function&nbsp;reads and write a file and it has eight parameters.</p>\r\n\r\n<p>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</p>\r\n\r\n<p>Lets examine all parameters of the open() function</p>\r\n\r\n<h4>file</h4>\r\n\r\n<p>To open or produce a file, you must type name of a file in the current directory or as writing full adress of a file which can be text file(example.txt) or binary&nbsp;file(example.doc, example.pdf).&nbsp;</p>\r\n\r\n<p><span style="color:null"><strong>When the file is in the current directory,</strong></span></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> open(&#39;<span style="color:#e67e22">example.txt</span>&#39;)</tt></p>\r\n</div>\r\n\r\n<p><span style="color:null"><strong>If the file isn&#39;t in the current directory, we must write full adress of the file</strong></span></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> open(&#39;<span style="color:#e67e22">/home/pythonlesson/Desktop/example.txt</span>&#39;)</tt></p>\r\n</div>\r\n\r\n<h4><span style="color:null">mode</span></h4>\r\n\r\n<p><span style="color:null">mode is an optional string that specifies the mode in which the file is opened. It defaults to &#39;r&#39; which means open for reading in text mode.&nbsp;For reading and writing raw bytes use binary mode and leave encoding unspecified.</span></p>\r\n\r\n<p><span style="color:null">The available modes are:</span></p>\r\n\r\n<p><span style="color:null">&nbsp; <strong>&nbsp; &#39;r&#39; </strong>&nbsp; &nbsp; &nbsp; open for reading (default)<br />\r\n&nbsp; &nbsp;<strong> &#39;w&#39;</strong> &nbsp; &nbsp; &nbsp;open for writing, truncating the file first<br />\r\n&nbsp; &nbsp;<strong> &#39;x&#39; </strong>&nbsp; &nbsp; &nbsp; create a new file and open it for writing<br />\r\n&nbsp; <strong>&nbsp; &#39;a&#39;</strong> &nbsp; &nbsp; &nbsp; open for writing, appending to the end of the file if it exists<br />\r\n&nbsp; &nbsp;<strong> &#39;b&#39; </strong>&nbsp; &nbsp; &nbsp; binary mode<br />\r\n&nbsp; &nbsp;<strong> &#39;t&#39;</strong>&nbsp; &nbsp; &nbsp; &nbsp; text mode (default)<br />\r\n&nbsp; &nbsp; <strong>&#39;+&#39;</strong> &nbsp; &nbsp; &nbsp; open a disk file for updating (reading and writing)<br />\r\n&nbsp; &nbsp; <strong>&#39;U&#39;</strong>&nbsp; &nbsp; &nbsp; &nbsp;universal newline mode (deprecated)</span><br />\r\n&nbsp;</p>\r\n\r\n<h4>buffering</h4>\r\n\r\n<p>buffering is an optional integer used to set the buffering policy.&nbsp;<span style="color:null">The available values&nbsp;are:</span></p>\r\n\r\n<p><strong>0</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;is only&nbsp;used for binary mode and it means &quot;switch buffering off&quot;</p>\r\n\r\n<p><strong>1&nbsp;</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;is only used for text mode and it means &quot;line buffering&quot;</p>\r\n\r\n<p><strong>&gt;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong> is used for bothi and it indicates the size of a fixed-size chunk buffer.</p>\r\n\r\n<p><strong>-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>is default value.&nbsp;the default buffering policy is worked by Python. It is recommended.</p>\r\n\r\n<h4>encoding</h4>\r\n\r\n<p>It should only be used in text mode. It&nbsp;is the name of the encoding used to decode or encode the file.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; f = open(&#39;<span style="color:#e67e22">example.txt</span>&#39;, encoding=&#39;<span style="color:#e67e22">utf-8</span>&#39;)</tt></p>\r\n</div>\r\n\r\n<h4>errors</h4>\r\n\r\n<p>It is an optional string that specifies how encoding errors are to be handled---this argument should not be used in binary mode.&nbsp;<span style="color:null">The available values&nbsp;are:</span></p>\r\n\r\n<p><strong>strict:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>default value. It will give an error.</p>\r\n\r\n<p><strong>ignore:</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;It behaves there is no&nbsp;</p>\r\n\r\n<p><strong>replace :</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; It replaces &#39;?&#39; character&nbsp;</p>\r\n\r\n<p><strong>xmlcharrefreplace:</strong>&nbsp;It puts xml character</p>\r\n\r\n<h4>newline</h4>\r\n\r\n<p>newline controls how universal newlines works. It only applies to text mode. It can be None, &#39;&#39;, &#39;\\n&#39;, &#39;\\r&#39;, and &#39;\\r\\n&#39;.&nbsp;</p>\r\n\r\n<h4>closefd &nbsp; &nbsp;</h4>\r\n\r\n<p>If closefd is <span style="color:#c0392b">False</span>, the underlying file descriptor will be kept open when the file is closed. This does not work when a file name is given and must be <span style="color:#27ae60">True </span>in that case.</p>\r\n\r\n<p>If you want to see file descriptor of a file, you should use <em>fileno</em> attribute of open() fuction.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; f = open(&#39;<span style="color:#e67e22">example.txt</span>&#39;)<br />\r\n&gt;&gt;&gt; f.fileno()<br />\r\n3</tt></p>\r\n</div>\r\n\r\n<p>and then you can open this file with this number like this:</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; z = open(<span style="color:#1abc9c">3</span>)</tt></p>\r\n</div>', '<p>It equivalents to <strong>x**y</strong> (with two arguments) or <strong>x**y % z</strong> (with three arguments)</p>\r\n\r\n<p><strong>pow(x, y, z=None)</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; pow(<span style="color:#2ecc71">2</span>, <span style="color:#2ecc71">3</span>)<br />\r\n8</tt></p>\r\n</div>\r\n\r\n<p><span style="color:null"><strong>Three arguments</strong></span></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; pow(<span style="color:#2ecc71">2</span>, <span style="color:#2ecc71">3</span>, <span style="color:#2ecc71">2</span>)<br />\r\n0</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; pow(<span style="color:#2ecc71">2</span>, <span style="color:#2ecc71">3</span>, <span style="color:#2ecc71">3</span>)<br />\r\n2</tt></p>\r\n</div>', '<p>It prints the values to a stream, or to sys.stdout by default. &nbsp;&nbsp;</p>\r\n\r\n<p><strong>print(value, ..., sep=&#39; &#39;, end=&#39;\\n&#39;, file=sys.stdout, flush=False)</strong></p>\r\n\r\n<p>Optional keyword arguments:&nbsp; &nbsp;&nbsp;</p>\r\n\r\n<p><strong>&nbsp; &nbsp; file:</strong>&nbsp; &nbsp; &nbsp; &nbsp; a file-like object (stream); defaults to the current sys.stdout.<br />\r\n&nbsp; &nbsp; <strong>sep:</strong>&nbsp; &nbsp; &nbsp; &nbsp;string inserted between values, default a space.<br />\r\n&nbsp; &nbsp; <strong>end:</strong>&nbsp; &nbsp; &nbsp; &nbsp;string appended after the last value, default a newline.<br />\r\n&nbsp; &nbsp; <strong>flush:</strong>&nbsp; &nbsp; &nbsp;whether to forcibly flush the stream.</p>\r\n\r\n<h4>value</h4>\r\n\r\n<p>It can be any things : strings, integers, floats, list, tuples...</p>\r\n\r\n<p><span style="color:null"><strong>You can use a text between &#39;, &quot; or &quot;&quot;&quot;&nbsp;characters to define a&nbsp;strings</strong></span></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; print(&#39;<span style="color:#e67e22">John</span>&#39;, &quot;&quot;&quot;<span style="color:#e67e22">Jack</span>&quot;&quot;&quot;,&nbsp; &quot;<span style="color:#e67e22">Angelina</span>&quot;)<br />\r\nJohn Jack Angelina</tt></p>\r\n</div>\r\n\r\n<p><span style="color:null"><strong>If you want to&nbsp;&nbsp;use &#39; or &quot; characters in your strings, you should be careful</strong></span></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; print(&quot;<span style="color:#e67e22">John&#39;s house</span>&quot;)<br />\r\nJohn&#39;s house</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; print(&quot;&quot;&quot;<span style="color:#e67e22">John&#39;s last word is : &quot;Bye bye&quot;</span> &quot;&quot;&quot;)<br />\r\nJohn&#39;s last word is : &quot;Bye bye&quot;</tt></p>\r\n</div>\r\n\r\n<p><span style="color:null"><strong>&quot;&quot;&quot; charachter is very useful to use long strings.</strong></span></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; print(&quot;&quot;&quot; <span style="color:#e67e22">Welcome to Python 3.6&#39;s help utility!</span></tt></p>\r\n\r\n<p><span style="color:#e67e22"><tt>If this is your first time using Python, you should definitely check out<br />\r\nthe tutorial on the Internet at http://docs.python.org/3.6/tutorial/.</tt></span></p>\r\n\r\n<p><span style="color:#e67e22"><tt>Enter the name of any module, keyword, or topic to get help on writing<br />\r\nPython programs and using Python modules. &nbsp;To quit this help utility and<br />\r\nreturn to the interpreter, just type &quot;quit&quot;.</tt></span></p>\r\n\r\n<p><tt><span style="color:#e67e22">To get a list of available modules, keywords, symbols, or topics, type<br />\r\n&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;. &nbsp;Each module also comes<br />\r\nwith a one-line summary of what it does; to list the modules whose name<br />\r\nor summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;.</span> &quot;&quot;&quot;)</tt></p>\r\n</div>\r\n\r\n<h4>sep</h4>\r\n\r\n<p>Default sep value is &quot; &quot; . It is used as&nbsp;seperator between elements in print() function.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; print(&quot;<span style="color:#e67e22">www</span>&quot;, &quot;<span style="color:#e67e22">google</span>&quot;, &quot;<span style="color:#e67e22">com</span>&quot;, sep=&quot;<span style="color:#e67e22">.</span>&quot;)<br />\r\nwww.google.com</tt></p>\r\n\r\n<p><br />\r\n<tt>&gt;&gt;&gt; print(&quot;<span style="color:#e67e22">Jack</span>&quot;, &quot;<span style="color:#e67e22">Angelina</span>&quot;, &quot;<span style="color:#e67e22">Micheal</span>&quot;, sep=&quot;<span style="color:#e67e22">-</span>&quot;)<br />\r\nJack-Angelina-Micheal</tt></p>\r\n</div>\r\n\r\n<h4>end</h4>\r\n\r\n<p>Default value is new line character:<strong> &#39;\\n&#39;</strong>. It is used to determine end of the text.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; print(&quot;<span style="color:#e67e22">This is a book</span>&quot;, end=&quot;<span style="color:#e67e22">.</span>&quot;)<br />\r\nThis is a book.</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; print( &quot;<span style="color:#e67e22">This</span>&quot;, &quot;<span style="color:#e67e22">is</span>&quot;, &quot;<span style="color:#e67e22">a</span>&quot;, &quot;<span style="color:#e67e22">book</span>&quot;, end = &quot;<span style="color:#e67e22">.</span>&quot;)<br />\r\nThis is a book.</tt></p>\r\n</div>\r\n\r\n<h4>file</h4>\r\n\r\n<p>Default value is sys.stdout.&nbsp;</p>\r\n\r\n<p>When the print() function works normally, its output is seen in Python shell or comman line(sys.stdout). If we want to change this, we can use file parameter of print() function.</p>\r\n\r\n<p><strong><span style="color:null">In below example &quot;Jack&quot; string will be written in the example.txt file. We can&#39;t see anything Python Shell or command line.&nbsp;</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; our_file = open(&#39;</span><span style="color:#e67e22">example.txt</span><span style="color:null">&#39;, &quot;w&quot;)</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; print(&quot;</span><span style="color:#e67e22">Jack</span><span style="color:null">&quot;, file = our_file)</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; our_file.close()</span></tt></p>\r\n</div>\r\n\r\n<h4>flash</h4>\r\n\r\n<p>If the value of flush is True, print() function directly write to&nbsp;sys.stdout without keeping cache.</p>', '<p>Return an object that produces a sequence of integers from start (inclusive) to stop (exclusive) by step. &nbsp;</p>\r\n\r\n<p>range(i, j) produces i, i+1, i+2, ..., j-1. start defaults to 0, and stop is omitted! &nbsp;</p>\r\n\r\n<p>range(4) produces 0, 1, 2, 3. These are exactly the valid indices for a list of 4 elements.</p>\r\n\r\n<p>When step is given, it specifies the increment (or decrement).</p>\r\n\r\n<p><strong>range(stop) -&gt; range object</strong></p>\r\n\r\n<p><strong>range(start, stop[, step]) -&gt; range object</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> range(<span style="color:#2ecc71">4</span>)<br />\r\nrange(0, 4)</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> print(*range(<span style="color:#1abc9c">4</span>))<br />\r\n0 1 2 3</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> print(*range(<span style="color:#2ecc71">2</span>, <span style="color:#2ecc71">10</span>))<br />\r\n2 3 4 5 6 7 8 9</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> print(*range(<span style="color:#2ecc71">2</span>, <span style="color:#2ecc71">40</span>, <span style="color:#1abc9c">2</span>))<br />\r\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> print(*range(<span style="color:#1abc9c">40</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">-2</span>))<br />\r\n40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> list(range(<span style="color:#2ecc71">4</span>))<br />\r\n[0, 1, 2, 3]</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> tuple(range(<span style="color:#2ecc71">4</span>))<br />\r\n(0, 1, 2, 3)</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> set(range(<span style="color:#2ecc71">4</span>))<br />\r\n{0, 1, 2, 3}</tt></p>\r\n</div>', '<p>Return a reverse iterator.</p>\r\n\r\n<p><strong>reversed(sequence) -&gt; reverse iterator over values of the sequence.</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; letters = &quot;<span style="color:#e67e22">abcdefgh</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; reversed(letters)<br />\r\n&lt;reversed object at 0x024CC550&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; print(*reversed(letters))<br />\r\nh g f e d c b a</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; names = [&quot;<span style="color:#e67e22">John</span>&quot;, &quot;<span style="color:#e67e22">Jack</span>&quot;, &quot;<span style="color:#e67e22">Angelina</span>&quot;, &quot;<span style="color:#e67e22">Micheal</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list(reversed(names))<br />\r\n[&#39;Micheal&#39;, &#39;Angelina&#39;, &#39;Jack&#39;, &#39;John&#39;]</tt></p>\r\n</div>', '<p>Return a new list containing all items from the iterable in ascending order.</p>\r\n\r\n<p><strong>sorted(iterable, key=None, reverse=False)</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; names = [&quot;John&quot;, &quot;Jack&quot;, &quot;Angelina&quot;, &quot;Micheal&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; sorted(names)<br />\r\n[&#39;Angelina&#39;, &#39;Jack&#39;, &#39;John&#39;, &#39;Micheal&#39;]</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; sorted(&quot;Angelina&quot;)<br />\r\n[&#39;A&#39;, &#39;a&#39;, &#39;e&#39;, &#39;g&#39;, &#39;i&#39;, &#39;l&#39;, &#39;n&#39;, &#39;n&#39;]</tt></p>\r\n</div>\r\n\r\n<p><span style="color:null"><strong>Usage of reverse(ascending or descending) parameter</strong></span></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; sorted(names, reverse=<span style="color:#2ecc71">True</span>)<br />\r\n[&#39;Micheal&#39;, &#39;John&#39;, &#39;Jack&#39;, &#39;Angelina&#39;]</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; numbers = [<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">6</span>, <span style="color:#1abc9c">9</span>, <span style="color:#1abc9c">-2</span>, <span style="color:#1abc9c">0</span>, <span style="color:#1abc9c">5</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; sorted(numbers)<br />\r\n[-2, 0, 1, 4, 5, 6, 9]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; sorted(numbers, reverse=True)<br />\r\n[9, 6, 5, 4, 1, 0, -2]</tt></p>\r\n</div>\r\n\r\n<p><span style="color:null"><strong>Usage of key parameter</strong></span></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">people= [(&quot;</span><span style="color:#e67e22">John</span><span style="color:null">&quot;, </span><span style="color:#1abc9c">56</span><span style="color:null">), (&quot;</span><span style="color:#e67e22">Jack</span><span style="color:null">&quot;, </span><span style="color:#1abc9c">45</span><span style="color:null">), (&quot;</span><span style="color:#e67e22">Angelina</span><span style="color:null">&quot;, </span><span style="color:#1abc9c">40</span><span style="color:null">), (&quot;</span><span style="color:#e67e22">Micheal</span><span style="color:null">&quot;, </span><span style="color:#1abc9c">25</span><span style="color:null">)]<br />\r\nprint(sorted(people))</span></tt></p>\r\n\r\n<p><tt><strong>[(&#39;Angelina&#39;, 40), (&#39;Jack&#39;, 45), (&#39;John&#39;, 56), (&#39;Micheal&#39;, 25)] </strong></tt></p>\r\n</div>\r\n\r\n<p>Above result is in ascending(letter(A, Ja, Jo, M)) order&nbsp;but if we want to have in ascending order(number(25, 40, 45, 56)), we should use key parameter of sorted function.</p>\r\n\r\n<div class="codes">\r\n<p><tt>def <span style="color:#3498db">ranking</span>(person):<br />\r\n&nbsp; &nbsp; return person[<span style="color:#1abc9c">1</span>]</tt></p>\r\n\r\n<p><tt>people= [(&quot;<span style="color:#e67e22">John</span>&quot;, <span style="color:#1abc9c">56</span>),<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; (&quot;<span style="color:#e67e22">Jack</span>&quot;, <span style="color:#1abc9c">45</span>),<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; (&quot;<span style="color:#e67e22">Angelina</span>&quot;, <span style="color:#1abc9c">40</span>),<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; (&quot;<span style="color:#e67e22">Micheal</span>&quot;, <span style="color:#1abc9c">25</span>)<br />\r\n&nbsp; &nbsp; ]<br />\r\nprint(sorted(people, key = ranking))</tt></p>\r\n\r\n<p><tt><strong>[(&#39;Micheal&#39;, 25), (&#39;Angelina&#39;, 40), (&#39;Jack&#39;, 45), (&#39;John&#39;, 56)]</strong></tt></p>\r\n</div>', '<p>Create a slice object. &nbsp;This is used for extended slicing (e.g. a[0:10:2])</p>\r\n\r\n<p><strong>slice(stop)</strong></p>\r\n\r\n<p><strong>slice(start, stop[, step])</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; letters = [&#39;<span style="color:#e67e22">a</span>&#39;, &#39;<span style="color:#e67e22">b</span>&#39;, &#39;<span style="color:#e67e22">c</span>&#39;, &#39;<span style="color:#e67e22">d</span>&#39;, &#39;<span style="color:#e67e22">e</span>&#39;, &#39;<span style="color:#e67e22">f</span>&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; sl = slice(<span style="color:#1abc9c">3</span>)<br />\r\n&gt;&gt;&gt; letters[sl]<br />\r\n[&#39;<span style="color:#e67e22">a</span>&#39;, &#39;<span style="color:#e67e22">b</span>&#39;, &#39;<span style="color:#e67e22">c</span>&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; sl1 = slice(<span style="color:#1abc9c">3</span>, <span style="color:#1abc9c">5</span>)<br />\r\n&gt;&gt;&gt; letters[sl1]<br />\r\n[&#39;d&#39;, &#39;e&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; sl2 = slice(<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">6</span>, <span style="color:#1abc9c">1</span>)<br />\r\n&gt;&gt;&gt; letters[sl2]<br />\r\n[&#39;<span style="color:#e67e22">b</span>&#39;, &#39;<span style="color:#e67e22">c</span>&#39;, &#39;<span style="color:#e67e22">d</span>&#39;, &#39;<span style="color:#e67e22">e</span>&#39;, &#39;<span style="color:#e67e22">f</span>&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; sl3 = slice(<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">6</span>, <span style="color:#1abc9c">2</span>)<br />\r\n&gt;&gt;&gt; letters[sl3]<br />\r\n[&#39;b&#39;, &#39;d&#39;, &#39;f&#39;]</tt></p>\r\n</div>', '<p>Return the sum of a &#39;start&#39; value (default: 0) plus an iterable of numbers.</p>\r\n\r\n<p><strong>sum(iterable, start=0, /)</strong></p>\r\n\r\n<p>When the iterable is empty, return the start value.</p>\r\n\r\n<p>This function is intended specifically for use with numeric values and may reject non-numeric types.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; sum([<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">3</span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">5</span>])<br />\r\n15</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; sum([])<br />\r\n0</tt></p>\r\n</div>', '<p>return type of an object.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; type(<span style="color:#1abc9c">1</span>)<br />\r\n&lt;class &#39;int&#39;&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type(<span style="color:#1abc9c">1.5</span>)<br />\r\n&lt;class &#39;float&#39;&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type(&quot;<span style="color:#e67e22">a</span>&quot;)<br />\r\n&lt;class &#39;str&#39;&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type(&#39;<span style="color:#1abc9c">123</span>&#39;)<br />\r\n&lt;class &#39;str&#39;&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type([<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">3</span>])<br />\r\n&lt;class &#39;list&#39;&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type((<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">3</span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">5</span>))<br />\r\n&lt;class &#39;tuple&#39;&gt;</tt></p>\r\n</div>', '<p>Return a zip object whose .__next__() method returns a tuple where the i-th element comes from the i-th iterable argument. &nbsp;The .__next__() method continues until the shortest iterable in the argument sequence is exhausted and then it raises StopIteration.</p>\r\n\r\n<p><strong>zip(iter1 [,iter2 [...]]) --&gt; zip object</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; names = [&quot;<span style="color:#e67e22">John</span>&quot;, &quot;<span style="color:#e67e22">Jack</span>&quot;, &quot;<span style="color:#e67e22">Angelina</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; countries = [&quot;<span style="color:#e67e22">USA</span>&quot;, &quot;<span style="color:#e67e22">EN</span>&quot;, &quot;<span style="color:#e67e22">FR</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; ages = [<span style="color:#1abc9c">25</span>, <span style="color:#1abc9c">45</span>, <span style="color:#1abc9c">40</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; zip(names, countries, ages)<br />\r\n&lt;zip object at 0x024D8698&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list(zip(names, countries, ages))<br />\r\n[(&#39;John&#39;, &#39;USA&#39;, 25), (&#39;Jack&#39;, &#39;EN&#39;, 45), (&#39;Angelina&#39;, &#39;FR&#39;, 40)]</tt></p>\r\n</div>\r\n\r\n<p><span style="color:null"><strong>If the length of iterables is not same,&nbsp;</strong></span></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; names = [&quot;</span><span style="color:#e67e22">John</span><span style="color:null">&quot;, &quot;</span><span style="color:#e67e22">Jack</span><span style="color:null">&quot;, &quot;</span><span style="color:#e67e22">Angelina</span><span style="color:null">&quot;]</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; languages=[&#39;</span><span style="color:#e67e22">GER</span><span style="color:null">&#39;, &#39;</span><span style="color:#e67e22">ITA</span><span style="color:null">&#39;]</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; list(zip(names, languages))<br />\r\n[(&#39;John&#39;, &#39;GER&#39;), (&#39;Jack&#39;, &#39;ITA&#39;)]</span></tt></p>\r\n</div>'], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], ['In this tutorial you can learn how to use frozenset() function in Python.', 'In this tutorial you can learn how to use dict() function in Python.', 'In this tutorial you can learn how to use callable() function in Python.', 'In this tutorial you can learn how to use ord() function in Python.', 'In this tutorial you can learn how to use globals() function in Python.', 'In this tutorial you can learn how to use locals() function in Python.', 'In this tutorial you can learn how to use copyright(), credits() and license() functions in Python.', 'In this tutorial you can learn how to use dir() function in Python.', 'In this tutorial you can learn how to use divmod() function in Python.', 'In this tutorial you can learn how to use enumerate() function in Python.', 'In this tutorial you can learn how to use exit() and quit() functions in Python.', 'In this tutorial you can learn how to use help() function in Python.', 'In this tutorial you can learn how to use id() function in Python.', 'In this tutorial you can learn how to use input() function in Python.', 'In this tutorial you can learn how to use filter() function in Python.', 'In this tutorial you can learn how to use hash() function in Python.', 'In this tutorial you can learn how to use isinstance() function in Python.', 'In this tutorial you can learn how to use len() function in Python.', 'In this tutorial you can learn how to use map() function in Python.', 'In this tutorial you can learn how to use max() function in Python.', 'In this tutorial you can learn how to use min() function in Python.', 'In this tutorial you can learn how to use open() function in Python.', 'In this tutorial you can learn how to use pow() function in Python.', 'In this tutorial you can learn how to use print() function in Python.', 'In this tutorial you can learn how to use range() function in Python.', 'In this tutorial you can learn how to use reversed() function in Python.', 'In this tutorial you can learn how to use sorted() function in Python.', 'In this tutorial you can learn how to use slice() function in Python.', 'In this tutorial you can learn how to use sum() function in Python.', 'In this tutorial you can learn how to use type() function in Python.', 'In this tutorial you can learn how to use zip() function in Python.'], ['frozenset()', 'dict()', 'callable()', 'ord()', 'globals()', 'locals()', 'copyright(), credits() and license()', 'dir()', 'divmod()', 'enumerate()', 'exit() and quit()', 'help()', 'id() function', 'input() function', 'filter()', 'hash()', 'isinstance()', 'len()', 'map()', 'max()', 'min', 'open', 'pow()', 'print()', 'range()', 'reversed()', 'sorted()', 'slice()', 'sum()', 'type()', 'zip()'], ['Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function'], ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']]