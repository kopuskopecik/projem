def hepsi():
	return [['if-elif-else', 'while, for', 'Built-in function', 'int()', 'str()', 'float()', 'complex()', 'abs()', 'round()', 'all()', 'any()', 'ascii()', 'repr()', 'bool()', 'bin()', 'oct()', 'hex()', 'bytes()', 'bytearray()', 'chr()', 'list()', 'set()', 'tuple()'], ['<p>Python has three conditional words: if, elif and else.</p>\r\n\r\n<h4>If</h4>\r\n\r\n<p>The &quot;if&quot; statement is used for conditional execution. If a condition&nbsp;is true, then indented statement(s) is computed.&nbsp;Let&#39;s examine below example.</p>\r\n\r\n<div class="codes">\r\n<p><tt>a = <span style="color:#2ecc71">4</span><br />\r\n<span style="color:#16a085">if</span> a == <span style="color:#2ecc71">4</span>:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&quot;a is four&quot;</span>)</tt></p>\r\n</div>\r\n\r\n<p>we should focus two&nbsp;main points above example.</p>\r\n\r\n<p>1.<strong> a ==4</strong> result of&nbsp;&nbsp;this statement send True value because&nbsp;variable named &quot;a&quot; equals 4.</p>\r\n\r\n<p>2.&nbsp;<strong>if a == 4:</strong> structure of if statement consists of colon character <strong>(:)</strong> which must be end of header line. Structure of Python&#39;s condition statements(if, elif, else), function definitions and&nbsp;loops(for, while) must have indented&nbsp;statement after&nbsp;colon character (:) for computing&nbsp;something(print(&quot;a is four&quot;)&nbsp;). This intended space is very important to write meaningful programs. and it can be done with four space character(highly recommended). You can use Tab button too if you have <span style="background-color:null">text editor arranged for four space</span>&nbsp;like Python IDLE.&nbsp;</p>\r\n\r\n<p>If this codes are written in Python Shell, after&nbsp;<strong>if a == 4:&nbsp;</strong>statement you will see like this:</p>\r\n\r\n<p>&gt;&gt;&gt; if a&nbsp;==&nbsp;4:<br />\r\n...<br />\r\nThis tree point means that Python waits something for computing. and then you can write&nbsp;print(&quot;a is four&quot;) for above example.</p>\r\n\r\n<div class="codes">\r\n<p><tt>number = int(input(<span style="color:#e67e22">&quot;write a number, please: &quot;</span>))<br />\r\nif number&nbsp;&gt; <span style="color:#2ecc71">20</span>:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&quot;The number is bigger than 20&quot;</span>)<br />\r\nif number&nbsp;&lt; <span style="color:#2ecc71">20</span>:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&quot;The number is smaller than 20&quot;</span>)<br />\r\nif number&nbsp;== <span style="color:#2ecc71">20</span>:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&quot;The number equals 20&quot;</span>)</tt></p>\r\n</div>\r\n\r\n<p>In the above example,&nbsp;firstly we ask a number from a user with input function which returns always string so we use int function to convert from string to integer.&nbsp;&nbsp;</p>\r\n\r\n<p>Then we have three condition depend on user&#39;s number.</p>\r\n\r\n<p>if the number bigger than 20, <em>print(&quot;The number is bigger than 20&quot;)</em>&nbsp;codes&nbsp;work.</p>\r\n\r\n<p>if the number smaller than 20,&nbsp;<em>print(&quot;The number is smaller than 20&quot;)</em> codes work.</p>\r\n\r\n<p>if the number equals 20,&nbsp;<em>print(&quot;The number equals 20&quot;)</em> codes work.</p>\r\n\r\n<blockquote>\r\n<p>If user&#39;s input is not a number such as string, program will return Error message. Our aim is understanding work of if statement in this example. Next lessons we will fix errors.</p>\r\n</blockquote>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">x = </span><span style="color:#2ecc71">5</span><br />\r\n<span style="color:null">if x == </span><span style="color:#2ecc71">5</span><span style="color:null">:<br />\r\n&nbsp; &nbsp; print(</span><span style="color:#e67e22">&quot;x equals five&quot;</span><span style="color:null">)<br />\r\nif x &gt; 4:<br />\r\n&nbsp; &nbsp; print(</span><span style="color:#e67e22">&quot;x is bigger than 4&quot;</span><span style="color:null">)</span></tt></p>\r\n\r\n<hr />\r\n<p><tt><span style="color:null">x equals five<br />\r\nx is bigger than 4</span></tt></p>\r\n</div>\r\n\r\n<p>The result of above&nbsp;codes is indented statements of&nbsp;both if statements because both condition has True value.&nbsp;</p>\r\n\r\n<h4>elif</h4>\r\n\r\n<p>When we have more than two&nbsp;possibilities, we can use elif word with if word.&nbsp;But result is only one of them, therefore&nbsp;Python search first True statement. If it is found, Python ignore other elif statements.</p>\r\n\r\n<div class="codes">\r\n<p><tt>x = int(input (<span style="color:#e67e22">&quot;Write a number1 please: &quot;</span>))<br />\r\ny = int(input (<span style="color:#e67e22">&quot;Write a number2 please: &quot;</span>))<br />\r\nif x &gt; y:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&quot;x is bigger than y&quot;</span>)<br />\r\nelif x &lt; y:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&quot;x is smaller than y&quot;</span>)<br />\r\nelif x == y:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&quot;x equals y&quot;</span>)</tt></p>\r\n</div>\r\n\r\n<p>Each condition is controlled in order. If the first is false, the next is checked. when True one is found, its intended codes are executed.</p>\r\n\r\n<h4>else</h4>\r\n\r\n<p>else word&nbsp;is used with two statement:&nbsp;</p>\r\n\r\n<p>1. if and else together : if condition is false, indented codes&nbsp;under else works.</p>\r\n\r\n<p>2. if, elif and else together : if all confition is false,&nbsp;indented codes&nbsp;under else works.</p>\r\n\r\n<div class="codes">\r\n<p><tt>x = int(input (<span style="color:#e67e22">&quot;Write a number1 please:&nbsp;&nbsp;&quot;</span>))<br />\r\ny = int(put (<span style="color:#e67e22">&quot;Write a number2 please:&nbsp;&nbsp;&quot;</span>))<br />\r\nif x &gt; y:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&quot;x is bigger than y&quot;</span>)<br />\r\nelif x &lt; y:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&quot;x is smaller than y&quot;</span>)<br />\r\nelse:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&quot;x equals y&quot;</span>)</tt></p>\r\n</div>\r\n\r\n<p>if and elif condition is controlled in order. If both are false value, else works.</p>\r\n\r\n<p>When you enter&nbsp;10 for x and 10 for y, result is &#39;x equals y&#39;.</p>\r\n\r\n<div class="codes">\r\n<p><tt>if x % <span style="color:#2ecc71">2</span> == <span style="color:#2ecc71">0</span> :<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&#39;x is even&#39;</span>)<br />\r\nelse :<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&#39;x is odd&#39;</span>)</tt><br />\r\n&nbsp;</p>\r\n</div>\r\n\r\n<p>When you enter 0 or 2 or 4 or 6 so on &nbsp;for x, result is &#39;x is even&#39;</p>\r\n\r\n<p>when you enter 1&nbsp;or 3&nbsp;or 5&nbsp;or 7&nbsp;so on &nbsp;for x, result is &#39;x is odd&#39;</p>\r\n\r\n<blockquote>\r\n<p>else depend on the first previous if statement.</p>\r\n\r\n<div class="codes">\r\n<p><tt>x = int(input (<span style="color:#e67e22">&quot;Write a number please: &quot;</span>))<br />\r\nif x == <span style="color:#2ecc71">7</span>:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&#39;x equals 7&#39;</span>) &nbsp;&nbsp;<br />\r\nif x % <span style="color:#2ecc71">2</span> == <span style="color:#2ecc71">0 </span>:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&#39;x is even&#39;</span>)<br />\r\nelse :<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&#39;x is odd&#39;</span>)</tt></p>\r\n</div>\r\n\r\n<p>if you enter 7&nbsp;for x, else work for only&nbsp;if x%2 == 0 condition.</p>\r\n\r\n<p>x equals 7<br />\r\nx is even</p>\r\n</blockquote>', '<p>If we want to create loop, we have two options: while and for</p>\r\n\r\n<h4>while statement</h4>\r\n\r\n<p>It&nbsp;is used for repeated execution as long as an expression is true. Lets us examine Example1&nbsp;together.</p>\r\n\r\n<div class="codes">\r\n<p><tt>a = <span style="color:#2ecc71">5</span><br />\r\nwhile a &gt; <span style="color:#2ecc71">0</span>:<br />\r\n&nbsp; &nbsp; print(a)<br />\r\n&nbsp; &nbsp; a = a - <span style="color:#2ecc71">1</span></tt></p>\r\n\r\n<p><tt>5<br />\r\n4<br />\r\n3<br />\r\n2<br />\r\n1</tt></p>\r\n</div>\r\n\r\n<p>1. <strong>a = 5</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>we have&nbsp;the variable named a whose value is 5</p>\r\n\r\n<p>2.<strong>&nbsp;while a &gt; 0:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(a)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; a = a -1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>\r\n\r\n<p>while statement has the a &gt; 0 expression and as long as this expression is True, the intended statement&nbsp;and expression&nbsp;will work.&nbsp; In this example we have print(a) and a = a - 1 statements. Lets us examine every loop step by step .</p>\r\n\r\n<p>-<strong>first loop</strong>&nbsp; &nbsp; &nbsp; &nbsp; a = 5&nbsp;and the result of 5&nbsp;&gt; 0 is True and then we will see 5&nbsp;on the Python Shell&nbsp;finally a = 4<br />\r\n<strong>-second loop</strong>&nbsp; a = 4&nbsp;and&nbsp;the result of 4&nbsp;&gt; 0 is True and then we will see 4&nbsp;on the Python Shell&nbsp;finally a = 3<br />\r\n<strong>-third loop</strong>&nbsp; &nbsp; &nbsp; &nbsp;a = 3 and the result of 3 &gt; 0 is True and then we will see 3 on the Python Shell finally a = 2<br />\r\n<strong>-fourth loop</strong>&nbsp; &nbsp; &nbsp;a = 2&nbsp;and the result of 2&nbsp;&gt; 0 is True and then we will see 2&nbsp;on the Python Shell finally a = 1<br />\r\n<strong>-fifth loop</strong>&nbsp; &nbsp; &nbsp; &nbsp; a = 1 and the result of a &gt; 0 is True&nbsp;and then we will see 1&nbsp;on the Python Shell finally a = 0<br />\r\n<s><strong>-sixth loop</strong></s>&nbsp; &nbsp; &nbsp; &nbsp;a = 0 and the result of&nbsp;a &gt; 0 is False so loop ends</p>\r\n\r\n<h4>infinite loop</h4>\r\n\r\n<p>If we want to create infinite loop, you can use this while statement:&nbsp;</p>\r\n\r\n<p>while True:&nbsp;</p>\r\n\r\n<p>But we should be control to quit from loop, otherwise our program&nbsp;works non-stopping. If we do this mistake, you can quit from program with pushing CTRL +C&nbsp;or Ctrl + Z.</p>\r\n\r\n<h4><span style="color:null">break statement</span></h4>\r\n\r\n<p><span style="color:null">It terminates the nearest enclosing loop.</span></p>\r\n\r\n<p><span style="color:null">Lets write a simple program which repeatedly asks for &quot;What is your name&quot;. When the&nbsp;user type &quot;q&quot;, the program ends, else it prints &quot;Hello user&#39;s name&quot;.</span></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">while True:<br />\r\n&nbsp; &nbsp; a = input(</span><span style="color:#e67e22">&quot; Whats is your name: \\n &quot;</span><span style="color:null">)<br />\r\n&nbsp; &nbsp; if a == </span><span style="color:#e67e22">&quot;q&quot;</span><span style="color:null">:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(</span><span style="color:#e67e22">&quot;Bye Bye&quot;</span><span style="color:null">)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; break<br />\r\n&nbsp; &nbsp; else:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(</span><span style="color:#e67e22">&quot;Hello&quot;, a, &quot;\\n&quot;</span><span style="color:null">)</span></tt></p>\r\n\r\n<p><tt><strong>Result:&nbsp;</strong></tt></p>\r\n\r\n<p><tt><span style="color:null">Whats is your name:<br />\r\nJack<br />\r\nHello Jack&nbsp;</span></tt></p>\r\n\r\n<p><tt><span style="color:null">Whats is your name:<br />\r\nTom<br />\r\nHello Tom&nbsp;</span></tt></p>\r\n\r\n<p><tt><span style="color:null">Whats is your name:<br />\r\nq<br />\r\nBye Bye</span></tt></p>\r\n</div>\r\n\r\n<h4>continue statement</h4>\r\n\r\n<p>It skips to the next iteration without finishing the body of the loop for&nbsp;the current iteration.</p>\r\n\r\n<p><span style="color:null">Nowi lets write a program&nbsp;repeatedly asks for &quot;Please write a letter: &quot;. &nbsp;</span></p>\r\n\r\n<p><span style="color:null">İf an user type &quot;q&quot;, the program ends.&nbsp;</span></p>\r\n\r\n<p><span style="color:null">İf an user type &quot;c&quot;, continue statement work and then it skips next iteration.</span></p>\r\n\r\n<p><span style="color:null">else </span>print(&quot;You did write&quot;, a, &quot; not q or c&quot;, &quot;\\n&quot;)&nbsp;works.</p>\r\n\r\n<div class="codes">\r\n<p><tt>while True: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; a = input(<span style="color:#e67e22">&quot;Please write a letter: &nbsp; &quot;</span>)<br />\r\n&nbsp; &nbsp; if a == <span style="color:#e67e22">&quot;q&quot;</span>:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(<span style="color:#e67e22">&quot;The break statement worked. Bye Bye!&quot;, &quot;\\n&quot;</span>)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; break<br />\r\n&nbsp; &nbsp; if a == <span style="color:#e67e22">&quot;c&quot;</span>:&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(<span style="color:#e67e22">&quot;The continue statement worked. Lets go next loop&quot;, &quot;\\n&quot;</span>)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; continue<br />\r\n&nbsp; &nbsp; print(&quot;You did write&quot;, a, &quot; not q or c&quot;, &quot;\\n&quot;)</tt></p>\r\n\r\n<p><tt><strong>when our input is respectively &quot;a&quot;, &quot;b&quot;, &quot;c&quot; and &quot;q&quot;, our result will be like this:&nbsp;</strong></tt></p>\r\n\r\n<p><tt>Please write a letter: &nbsp; a<br />\r\nYou did write a &nbsp;not q or c&nbsp;</tt></p>\r\n\r\n<p><tt>Please write a letter: &nbsp; b<br />\r\nYou did write b &nbsp;not q or c&nbsp;</tt></p>\r\n\r\n<p><tt>Please write a letter: &nbsp; c<br />\r\nThe continue statement worked. Lets go next loop&nbsp;</tt></p>\r\n\r\n<p><tt>Please write a letter: &nbsp; q<br />\r\nThe break statement worked. Bye Bye!</tt></p>\r\n</div>\r\n\r\n<h4>for statement</h4>\r\n\r\n<p>The &quot;for&quot; statement is used to iterate over the elements of a sequence (such as a string, tuple or list) or other iterable object. This statement is used for creating loop like the while statement. The continue statement and break statement can be used in for statement too like while statement.</p>\r\n\r\n<div class="codes">\r\n<p><tt>letters = <span style="color:#e67e22">&quot;abcdefg&quot;</span><br />\r\nfor letter in letters:<br />\r\n&nbsp; &nbsp; print(letter)</tt></p>\r\n\r\n<p><tt>a<br />\r\nb<br />\r\nc<br />\r\nd<br />\r\ne<br />\r\nf<br />\r\ng</tt></p>\r\n</div>\r\n\r\n<p>Lets examine the program</p>\r\n\r\n<p>1. <strong>for letter in letters:</strong> variable letters is string which is &quot;abcdefg&quot; and iterable.</p>\r\n\r\n<p>&nbsp; &nbsp; value of letter in letters is True until last letter(&#39;g&#39;). After last letter(g), it is False so our loop ends.&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; letter is string which is &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39; but only one of them can be used in its loop. Such as:</p>\r\n\r\n<p>&nbsp; &nbsp; in first loop value of letter is &#39;a&#39; and print a<br />\r\n&nbsp; &nbsp;&nbsp;in second&nbsp;loop value of letter is &#39;b&#39; and print b<br />\r\n&nbsp; &nbsp;&nbsp;in third&nbsp;loop value of letter is &#39;c&#39; and print c<br />\r\n&nbsp; &nbsp;&nbsp;in fourth&nbsp;loop value of letter is &#39;d&#39; and print d<br />\r\n&nbsp; &nbsp;&nbsp;in fifth&nbsp;loop value of letter is &#39;e&#39; and print e<br />\r\n&nbsp; &nbsp;&nbsp;in sixth&nbsp;loop value of letter is &#39;f&#39; and print f<br />\r\n&nbsp; &nbsp; in seventh&nbsp;loop value of letter is &#39;g&#39; and print g</p>\r\n\r\n<div class="codes">\r\n<p><tt>our_list = [<span style="color:#e67e22">&quot;Jack&quot;</span>, <span style="color:#e67e22">&quot;Tom&quot;</span>, <span style="color:#e67e22">&quot;Angelina&quot;</span>]<br />\r\nfor person in our_list:<br />\r\n&nbsp; &nbsp; print(<span style="color:#e67e22">&quot;Hello&quot;</span>, person)</tt></p>\r\n\r\n<p><tt>Hello Jack<br />\r\nHello Tom<br />\r\nHello Angelina</tt></p>\r\n</div>\r\n\r\n<blockquote>\r\n<p>Because numbers are not iterable, we shouldn&#39;t&nbsp;use in for loops.</p>\r\n</blockquote>\r\n\r\n<div class="codes">\r\n<p><tt>numbers = <span style="color:#1abc9c">123456</span><br />\r\nfor number in numbers:<br />\r\n&nbsp; &nbsp; print(number</tt></p>\r\n\r\n<p><tt><span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;C:/Users/sahint&uuml;rk/Desktop/python_programları/for_examples.py&quot;, line 10, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; for number in numbers:<br />\r\nTypeError: &#39;int&#39; object is not iterable</span></tt></p>\r\n</div>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">numbers = </span><span style="color:#e67e22">&quot;123456&quot;</span><br />\r\n<span style="color:null">for number in numbers:<br />\r\n&nbsp; &nbsp; print(number)</span></tt></p>\r\n\r\n<p><tt><span style="color:null">1 &nbsp;2 &nbsp;3 &nbsp;4 &nbsp;5 &nbsp;6&nbsp;</span></tt></p>\r\n</div>\r\n\r\n<h4>Usage of the range() function with for loops</h4>\r\n\r\n<div class="codes">\r\n<p><tt>for i in range(5):<br />\r\n&nbsp; &nbsp; print(i)</tt></p>\r\n\r\n<p><tt>1<br />\r\n2<br />\r\n3<br />\r\n4</tt></p>\r\n</div>\r\n\r\n<div class="codes">\r\n<p><tt>for i in range(<span style="color:#1abc9c">20</span>, <span style="color:#1abc9c">36</span>):<br />\r\n&nbsp; &nbsp; print(i, end = <span style="color:#e67e22">&quot; &nbsp;&quot;</span>)</tt></p>\r\n\r\n<p><tt>20 &nbsp;21 &nbsp;22 &nbsp;23 &nbsp;24 &nbsp;25 &nbsp;26 &nbsp;27 &nbsp;28 &nbsp;29 &nbsp;30 &nbsp;31 &nbsp;32 &nbsp;33 &nbsp;34 &nbsp;35</tt>&nbsp;</p>\r\n</div>\r\n\r\n<h4>pass statement with for loops</h4>\r\n\r\n<p>&quot;pass&quot; is a null operation --- when it is executed, nothing happens. It is useful to not take error after &quot;:&quot; character. It is generally used with function and class.</p>\r\n\r\n<div class="codes">\r\n<p><tt>letters = <span style="color:#e67e22">&quot;abcdefg&quot;</span><br />\r\nfor letter in letters:<br />\r\n&nbsp; &nbsp; pass</tt></p>\r\n</div>', '<p>There are the built-in functions which are&nbsp;ready to use anywhere for us in Python. They are very useful&nbsp;and interested in common problems. Conversion functions(int(), str(), input(), type() are examples of&nbsp; built-in function. We will see them next pages.</p>', '<p>Convert a number or string to an integer, or return 0 if no arguments are given.&nbsp;&nbsp;If x is not a number or if base is given, then x must be a string,&nbsp;bytes, or bytearray.</p>\r\n\r\n<p><strong>int(x)</strong>&nbsp;&rArr; x can be number or string,&nbsp;5,5,&nbsp;&quot;5.5&quot;, &quot;23&quot; etc.<br />\r\n<strong>int(x, base)</strong>&nbsp;&rArr; x can be string, byte or bytearray,&nbsp;&#39;0b100&#39;,&nbsp;&#39;0o100&#39;,&nbsp;&#39;0x100&#39; etc.&nbsp;the default value of base is 10. when base is 0, x value otomatically is converted to base 10.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; int(<span style="color:#e67e22">&#39;32&#39;</span>)<br />\r\n32</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; int(<span style="color:#e67e22">&#39;home&#39;</span>)<br />\r\n<span style="color:#e74c3c">ValueError: invalid literal for int() with base 10: &#39;home&#39;</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; int(</span><span style="color:#2ecc71">4.9</span><span style="color:null">)<br />\r\n4</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; int(</span><span style="color:#1abc9c">3.4</span><span style="color:null">)<br />\r\n3</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; int(</span><span style="color:#2ecc71">-7.459987</span><span style="color:null">)<br />\r\n-7</span></tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; int(<span style="color:#e67e22">&#39;0b100&#39;</span>, base=<span style="color:#2ecc71">0</span>)<br />\r\n4</tt></p>\r\n\r\n<p><code># from base 8&nbsp;to&nbsp;10</code></p>\r\n\r\n<p><tt>&gt;&gt;&gt; int(<span style="color:#e67e22">&#39;0o100&#39;</span>, base=<span style="color:#2ecc71">0</span>)<br />\r\n64</tt></p>\r\n\r\n<p><code># from 16 base to 10</code><br />\r\n<tt>&gt;&gt;&gt; int(<span style="color:#e67e22">&#39;0x100&#39;</span>, base=<span style="color:#2ecc71">0</span>)<br />\r\n256</tt></p>\r\n</div>', '<p>It converts a value to string.&nbsp;</p>\r\n\r\n<p><strong>str(</strong>value<strong>)</strong>&nbsp;&rArr; string</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; str(<span style="color:#2ecc71">4.5</span>)<br />\r\n&#39;4.5&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; str(<span style="color:#2ecc71">65</span>)<br />\r\n&#39;65&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; str(<span style="color:#2ecc71">-45</span>)<br />\r\n&#39;-45&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; str([<span style="color:#2ecc71">1</span>, <span style="color:#2ecc71">2</span>, <span style="color:#e67e22">&quot;a&quot;</span>])<br />\r\n&quot;[1, 2, &#39;a&#39;]&quot;</tt></p>\r\n</div>\r\n\r\n<p><strong>str(bytes,&nbsp;<em>encoding, errors</em>)</strong>&nbsp;&rArr; string</p>\r\n\r\n<p>It can be used to convert bytes.&nbsp;encoding and&nbsp;errors are optional. encoding can be &quot;utf-8&quot;, &quot;ascii&quot;, etc. errors can &#39;ignore&#39;, replace&#39; and&nbsp;&#39;xmlcharrefreplace&#39;. Default valu of it is &quot;strict&quot;.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt;&nbsp;str(b<span style="color:#e67e22">&#39;home&#39;</span>, <span style="color:#e67e22">&quot;utf-8&quot;</span>)<br />\r\n&#39;elma&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;str(b<span style="color:#e67e22">&#39;home&#39;</span>, <span style="color:#e67e22">&quot;ascii&quot;</span>)<br />\r\n&#39;elma&#39;</tt></p>\r\n</div>\r\n\r\n<blockquote>\r\n<p>We will see encoding and errors deeply in character encoding tutorial.</p>\r\n</blockquote>', '<p>It convert an integer or a string-number value to float number.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; a = </span><span style="color:#2ecc71">5</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; type(a)<br />\r\n&lt;class &#39;int&#39;&gt;</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; b = float(a)</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; b<br />\r\n5.0</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; type(b)<br />\r\n&lt;class &#39;float&#39;&gt;</span></tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; a = <span style="color:#e67e22">&#39;5&#39;</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; type(a)<br />\r\n&lt;class &#39;str&#39;&gt;</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; float(a)<br />\r\n5.0</span></tt></p>\r\n</div>', '<p>It returns real part of a value to complex number.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = <span style="color:#2ecc71">5</span></tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = complex(a)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b<br />\r\n(5+0j)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type(b)<br />\r\n&lt;class &#39;complex&#39;&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; complex(<span style="color:#2ecc71">5.5</span>)<br />\r\n(5.5+0j)</tt></p>\r\n</div>', '<p>It converts a number to absolute value. It means distance to zero.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; abs(<span style="color:#2ecc71">-10</span>)<br />\r\n10</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; abs(<span style="color:#2ecc71">10</span>)<br />\r\n10</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; abs(<span style="color:#2ecc71">10.0</span>)<br />\r\n10.0</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; abs(<span style="color:#2ecc71">3</span> + <span style="color:#1abc9c">4j</span>)<br />\r\n5.0</tt></p>\r\n</div>', '<p>It rounds a number below or above integer.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; round(<span style="color:#2ecc71">4.6</span>)<br />\r\n5</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; round(<span style="color:#2ecc71">4.4</span>)<br />\r\n4</tt></p>\r\n</div>\r\n\r\n<p>If distance equals to odd or even integer, Python prefer even one.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; round(<span style="color:#1abc9c">4.5</span>)<br />\r\n4</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; round(<span style="color:#1abc9c">3.5</span>)<br />\r\n4</tt></p>\r\n</div>\r\n\r\n<p>round() function has two parameters. we know already first one. And second one controls how many number there will be after point(.).</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; round(22/7)<br />\r\n3</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; round(<span style="color:#1abc9c">22</span>/<span style="color:#1abc9c">7</span>, <span style="color:#1abc9c">0</span>)<br />\r\n3.0</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; round(<span style="color:#1abc9c">22</span>/<span style="color:#1abc9c">7</span>, <span style="color:#1abc9c">1</span>)<br />\r\n3.1</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; round(<span style="color:#1abc9c">22</span>/<span style="color:#1abc9c">7</span>, <span style="color:#1abc9c">2</span>)<br />\r\n3.14</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; round(<span style="color:#1abc9c">22</span>/<span style="color:#1abc9c">7</span>, <span style="color:#1abc9c">3</span>)<br />\r\n3.143</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; round(<span style="color:#1abc9c">22</span>/<span style="color:#1abc9c">7</span>, <span style="color:#1abc9c">4</span>)<br />\r\n3.1429</tt></p>\r\n</div>', '<p>It returns True value if all bool(True or False) values in a list are <span style="color:#1abc9c">True</span>. If least a value in a list is <span style="color:#c0392b">False </span>value, all() function returns False value. we know alredy bool value of values. Such as:&nbsp;</p>\r\n\r\n<table align="left" border="1" cellpadding="1" cellspacing="1" style="width:150px">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><strong>value</strong></td>\r\n\t\t\t<td><strong>bool value</strong></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>3</td>\r\n\t\t\t<td>True</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&quot;string&quot;</td>\r\n\t\t\t<td>True</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&quot; &quot;</td>\r\n\t\t\t<td>True</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&quot;3&quot;</td>\r\n\t\t\t<td>True</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>0</td>\r\n\t\t\t<td>False</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>&#39;&#39;&quot;</td>\r\n\t\t\t<td>False</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> our_list = [<span style="color:#2ecc71">1</span>, <span style="color:#2ecc71">2</span>, <span style="color:#1abc9c">3</span>, <span style="color:#1abc9c">4</span>]<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> all(our_list)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> second_list = [<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">3</span>, <span style="color:#1abc9c">0</span>]<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> all(second_list)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> list3&nbsp;= [<span style="color:#e67e22">&#39;John&#39;</span>, <span style="color:#e67e22">&#39;Jack&#39;</span>, <span style="color:#e67e22">&#39;&#39;</span>]<br />\r\n<span style="color:#e67e22">&gt;&gt;&gt;</span> all(list3)<br />\r\nFalse</tt></p>\r\n</div>', '<p>It returns True value if any&nbsp;bool(True or False) values in a list are <span style="color:#2ecc71">True</span>. If all&nbsp;values in a list is <span style="color:#c0392b">False </span>value, any() function returns False value.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; false_values = [<span style="color:#e67e22">&#39;&#39;</span>, <span style="color:#2ecc71">0</span>, [], (), set(), dict()]<br />\r\n&gt;&gt;&gt; any(false_values)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list1 = [<span style="color:#2ecc71">0</span>,&nbsp;<span style="color:#e67e22">&quot;&quot;</span>, <span style="color:#1abc9c">1</span>]<br />\r\n&gt;&gt;&gt; any(list1)<br />\r\nTrue</tt></p>\r\n</div>', '<p>It show and return printable value to us. This result is always string.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = &quot;<span style="color:#e67e22">python</span>&quot;<br />\r\n&gt;&gt;&gt; ascii(a)<br />\r\n&quot;&#39;python&#39;&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list1 = [&quot;John&quot;,&#39;Jack&#39;,&quot;Angelina&quot;]<br />\r\n&gt;&gt;&gt; ascii(list1)<br />\r\n&quot;[&#39;John&#39;, &#39;Jack&#39;, &#39;Angelina&#39;]&quot;</tt></p>\r\n</div>\r\n\r\n<p>If value is not ASCII, it returns UNICODE value.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; ascii(&quot;<span style="color:#e67e22">Ş</span>&quot;)<br />\r\n&quot;&#39;\\\\u015e&#39;&quot;</tt></p>\r\n</div>', '<p>repr() function, which&nbsp;shows and returns printable value to us, is same as ascii() function except about ASCII characters.&nbsp;If value is not ASCII, repr() function&nbsp;returns value as normal. it returns always string.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; repr(&quot;<span style="color:#e67e22">Ş</span>&quot;)<br />\r\n&quot;&#39;Ş&#39;&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; ascii(&quot;<span style="color:#e67e22">Ş</span>&quot;)<br />\r\n&quot;&#39;\\\\u015e&#39;&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; repr([&quot;<span style="color:#e67e22">John</span>&quot;, &#39;<span style="color:#e67e22">Jack</span>&#39;, &quot;<span style="color:#e67e22">Angelina</span>&quot;])<br />\r\n&quot;[&#39;John&#39;, &#39;Jack&#39;, &#39;Angelina&#39;]&quot;</tt></p>\r\n</div>', '<p>It returns <span style="color:#2ecc71">True </span>or <span style="color:#c0392b">False </span>depend on boolean value.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; bool(<span style="color:#2ecc71">0</span>)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; bool(<span style="color:#2ecc71">1</span>)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; bool([])<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; bool(&#39;&#39;)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; bool(&#39; &#39;)<br />\r\nTrue</tt></p>\r\n</div>', '<p>It returns binary value of a number. The output is string.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; bin(<span style="color:#1abc9c">8</span>)<br />\r\n&#39;0b1000&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; bin(<span style="color:#1abc9c">2</span>)<br />\r\n&#39;0b10&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; bin(<span style="color:#1abc9c">20</span>)<br />\r\n&#39;0b10100&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type(bin(<span style="color:#1abc9c">2</span>))<br />\r\n&lt;class &#39;str&#39;&gt;</tt></p>\r\n</div>', '<p>It return the octal representation of an integer.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; oct(<span style="color:#1abc9c">10</span>)<br />\r\n&#39;0o12&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; oct(<span style="color:#1abc9c">20</span>)<br />\r\n&#39;0o24&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; oct(<span style="color:#1abc9c">80</span>)<br />\r\n&#39;0o120&#39;</tt></p>\r\n</div>', '<p>It returns the hexadecimal representation of an integer.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; hex(<span style="color:#1abc9c">120</span>)<br />\r\n&#39;0x78&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; hex(<span style="color:#1abc9c">80</span>)<br />\r\n&#39;0x50&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; hex(<span style="color:#1abc9c">5</span>)<br />\r\n&#39;0x5&#39;</tt></p>\r\n</div>', '<p>It creates byte type value.</p>\r\n\r\n<p><strong>bytes(integer) -&gt; bytes</strong></p>\r\n\r\n<p>If it has an integer&nbsp;argument, it returns&nbsp;given integer times&nbsp;byte object.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; bytes(<span style="color:#2ecc71">5</span>)<br />\r\nb&#39;\\x00\\x00\\x00\\x00\\x00&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; bytes(<span style="color:#2ecc71">2</span>)<br />\r\nb&#39;\\x00\\x00&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong><span style="color:null">bytes(string, encoding[, errors]) -&gt; bytes</span></strong></p>\r\n\r\n<p>If it has a string&nbsp;argument, it returns&nbsp;bytes depend on encoding type which can be ASCII, UTF-8, CP857, CP1254...</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; bytes(&#39;</span><span style="color:#e67e22">Ş</span><span style="color:null">&#39;, &#39;</span><span style="color:#e67e22">utf-8</span><span style="color:null">&#39;)</span><br />\r\n<span style="color:null">b&#39;\\xc5\\x9e&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;</span><span style="color:#e67e22">Ş</span><span style="color:null">&#39;, &#39;</span><span style="color:#e67e22">cp1254</span><span style="color:null">&#39;)<br />\r\nb&#39;\\xde&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;</span><span style="color:#e67e22">Ş</span><span style="color:null">&#39;, &#39;</span><span style="color:#e67e22">cp857</span><span style="color:null">&#39;)<br />\r\nb&#39;\\x9e&#39;</span></tt></p>\r\n</div>\r\n\r\n<p>If the string is not a element of the&nbsp;encoding type, it will give an error.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; bytes(&#39;<span style="color:#e67e22">Ş</span>&#39;,&#39;<span style="color:#e67e22">ascii</span>&#39;)<br />\r\n<span style="color:#c0392b">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#75&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; bytes(&#39;Ş&#39;,&#39;ascii&#39;)<br />\r\nUnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character &#39;\\u015e&#39; in position 0: ordinal not in range(128)</span></tt></p>\r\n</div>\r\n\r\n<p><span style="color:null">To not have the error, you should use error parameter except&nbsp;&#39;strict&#39; . Error parameter can be &#39;strict&#39;, &#39;&#39;replace&#39;, &#39;ignore&#39;, &#39;</span>xmlcharrefreplace<span style="color:null">&#39;.</span></p>\r\n\r\n<p><span style="color:null"><strong>strict:&nbsp;</strong>default value. I</span>t will give an error.</p>\r\n\r\n<p><strong>ignore:</strong> It behaves there is no&nbsp;</p>\r\n\r\n<p><strong>replace :</strong> It replaces &#39;?&#39; character&nbsp;</p>\r\n\r\n<p><strong>xmlcharrefreplace:</strong> It puts xml character</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; bytes(&#39;</span><span style="color:#e67e22">ŞII</span><span style="color:null">&#39;,&#39;</span><span style="color:#e67e22">ascii</span><span style="color:null">&#39;,&#39;</span><span style="color:#e67e22">replace</span><span style="color:null">&#39;)<br />\r\nb&#39;?II&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;</span><span style="color:#e67e22">ŞII</span><span style="color:null">&#39;,&#39;</span><span style="color:#e67e22">ascii</span><span style="color:null">&#39;,&#39;</span><span style="color:#e67e22">ignore</span><span style="color:null">&#39;)<br />\r\nb&#39;II&#39;<br />\r\n&gt;&gt;&gt; bytes(&#39;</span><span style="color:#e67e22">ŞII</span><span style="color:null">&#39;,&#39;</span><span style="color:#e67e22">ascii</span><span style="color:null">&#39;,&#39;</span><span style="color:#e67e22">xmlcharrefreplace</span><span style="color:null">&#39;)<br />\r\nb&#39;&amp;#350;II&#39;</span></tt></p>\r\n</div>', '<p>It constructs a mutable bytearray. it is similar to bytes function. But because&nbsp;bytes() function creates immutable byte object,&nbsp;&nbsp;we couldn&#39;t change elements of a byte&nbsp;object. bytearray() function let us change elements of a bytearray object.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = bytes(&#39;<span style="color:#e67e22">home</span>&#39;, &#39;<span style="color:#e67e22">ascii</span>&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#2ecc71">0</span>]<br />\r\n105</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#2ecc71">0</span>] = <span style="color:#1abc9c">106</span><br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\nFile &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br />\r\nTypeError: &#39;bytes&#39; object does not support item assignment</span></tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; a = bytearray(&#39;<span style="color:#e67e22">home</span>&#39;, &#39;<span style="color:#e67e22">ascii</span>&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\nbytearray(<span style="color:#e67e22">b&#39;home&#39;</span>)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#2ecc71">0</span>]<br />\r\n104</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#2ecc71">0</span>] = <span style="color:#2ecc71">106</span></tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\nbytearray(b&#39;jome&#39;)</tt></p>\r\n</div>', '<p>It returns a Unicode string of an integer value. It&nbsp;takes exactly one argument.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; chr(<span style="color:#1abc9c">65</span>)<br />\r\n&#39;A&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; chr(<span style="color:#1abc9c">125</span>)<br />\r\n&#39;}&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; chr(<span style="color:#1abc9c">1256</span>)<br />\r\n&#39;Ө&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; chr(<span style="color:#1abc9c">256987</span>)<br />\r\n&#39;\\U0003ebdb&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; chr(<span style="color:#2ecc71">106</span>)<br />\r\n&#39;j&#39;</tt></p>\r\n</div>', '<p>It can be used&nbsp;two different ways.</p>\r\n\r\n<p>1. It creates new empty list.</p>\r\n\r\n<p>2. New list initialized from iterable&#39;s items.</p>\r\n\r\n<p><strong><span style="color:#e74c3c"># an empty list</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; l = list()</tt></p>\r\n</div>\r\n\r\n<p><strong><span style="color:#e74c3c"># from string to list</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; list(&#39;<span style="color:#e67e22">python</span>&#39;)<br />\r\n[&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]</tt></p>\r\n</div>\r\n\r\n<p><strong><span style="color:#e74c3c"># from set to list</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; list({&#39;<span style="color:#e67e22">a</span>&#39;,&#39;<span style="color:#e67e22">b</span>&#39;,&#39;<span style="color:#e67e22">c</span>&#39;})<br />\r\n[&#39;c&#39;, &#39;b&#39;, &#39;a&#39;]&nbsp;</tt></p>\r\n</div>\r\n\r\n<p><strong><span style="color:#e74c3c"># from dictionary to list</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = {&#39;<span style="color:#e67e22">a</span>&#39;:<span style="color:#1abc9c">10</span>, &#39;<span style="color:#e67e22">b</span>&#39;:<span style="color:#1abc9c">20</span>, &#39;<span style="color:#e67e22">c</span>&#39;:<span style="color:#1abc9c">30</span>}<br />\r\n&gt;&gt;&gt; type(a)<br />\r\n&lt;class &#39;dict&#39;&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = list(a)<br />\r\n&gt;&gt;&gt; b<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]<br />\r\n&gt;&gt;&gt; type(b)<br />\r\n&lt;class &#39;list&#39;&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; c = list(a.values())<br />\r\n&gt;&gt;&gt; c</tt><br />\r\n[10, 20, 30]</p>\r\n</div>', '<p>It can be used two different ways like list() function.</p>\r\n\r\n<p>1. To have new empty set object<br />\r\n2. To construct&nbsp;new set object which is an unordered collection of unique elements.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; set(&quot;<span style="color:#e67e22">python</span>&quot;)<br />\r\n{&#39;o&#39;, &#39;h&#39;, &#39;t&#39;, &#39;p&#39;, &#39;n&#39;, &#39;y&#39;}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; set()<br />\r\nset()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; set([<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">3</span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">56</span>])<br />\r\n{1, 2, 3, 4, 56}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; set([<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">3</span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">4</span>])<br />\r\n{1, 2, 3, 4}</tt></p>\r\n</div>', '<p>It can be used two different ways like list() and set() functions.</p>\r\n\r\n<p>1. To have new empty tuple&nbsp;object.<br />\r\n2. To construct&nbsp;new tuple&nbsp;object.</p>\r\n\r\n<p>If the argument is a tuple, the return value is the same object.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; tuple()<br />\r\n()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; tuple(&quot;<span style="color:#e67e22">python</span>&quot;)<br />\r\n(&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; tuple([<span style="color:#1abc9c">1</span>, <span style="color:#1abc9c">4</span>, <span style="color:#1abc9c">2</span>, <span style="color:#1abc9c">5</span>, <span style="color:#1abc9c">6</span>, <span style="color:#1abc9c">7</span>])<br />\r\n(1, 4, 2, 5, 6, 7)</tt></p>\r\n</div>'], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], ['In this tutorial you can learn how to use if, elif and else conditional statements in Python', 'In this tutorial you can learn how to use for and while loops in Python.', 'In this tutorial you can learn what the built-in function is.', 'In this tutorial you can learn how to convert to a value to integer via int() function in Python.', 'In this tutorial you can learn how to convert to a value to string via str() function in Python.', 'In this tutorial you can learn how to convert to a value to float via float() function in Python.', 'In this tutorial you can learn how to convert to a value to complex number via complex() function in Python.', 'In this tutorial you can learn how to use abs() function in Python.', 'In this tutorial you can learn how to use round() function in Python.', 'In this tutorial you can learn how to use all() function in Python.', 'In this tutorial you can learn how to use any() function in Python.', 'In this tutorial you can learn how to use ascii() function in Python.', 'In this tutorial you can learn how to use repr() function in Python.', 'In this tutorial you can learn how to use bool() function in Python.', 'In this tutorial you can learn how to convert a number to binary value via bin() function in Python.', 'In this tutorial you can learn how to convert a number to octal number via oct() function in Python.', 'In this tutorial you can learn how to convert a number to hexadecimal number via hex() function in Python.', 'In this tutorial you can learn how to convert a value to byte datatype via bytes() function in Python.', 'In this tutorial you can learn how to convert a value to bytearray datatype via bytearray() function in Python.', 'In this tutorial you can learn how to use chr() function in Python.', 'In this tutorial you can learn how to use list() fınction in Python.', 'In this tutorial you can learn how to use set() function in Python.', 'In this tutorial you can learn how to use tuple() function in Python.'], ['if, elif, else', 'while, for', 'built-in function', 'int(), integer', 'str, string', 'float()', 'complex', 'abs', 'round()', 'all()', 'any()', 'ascii()', 'repr', 'bool', 'bin(), binary numbers', 'oct, octal numbers', 'hex(), hexadecimal numbers', 'bytes(), bytes() function in Python', 'bytearray(), bytearray function in Python', 'chr(), chr function in Python', 'list(), lists in Python', 'set(), sets in Python', 'tuple(), tuples in Python'], ['Conditional statements and Loops', 'Conditional statements and Loops', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function', 'Built-in function'], ['ana1', 'ana1', 'ana1', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']]