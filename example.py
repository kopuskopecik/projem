def hepsi():
    return [['Functions', 'Creating and calling functions', 'Parameters and Arguments', 'A function without parameter', 'Ordered parameters', 'Unordered parameters', 'Default argument for parameters', 'Infinite unordered parameters', 'infinite ordered parameters', 'Strings', 'To Define the Strings', 'Accessing the elements of a string', 'Length of a string', 'in and not in statements with the strings', 'for loops in the strings', 'Comparision of the strings', 'Multiplication operator with the strings', 'plus operator with the strings', 'Slicing strings', 'Strings are immutable', 'String methods', 'String methods-2', 'String methods-3', 'format()'], ['<p>A function is a sequence of statements that make&nbsp;a computation. In order to define a function,&nbsp;you need a&nbsp;name and specify the name and&nbsp;the sequence of statements. And then you can call the function by using this name of it.</p>\r\n\r\n<p>Lets us explore&nbsp;a built-in function named len:</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22;">&gt;&gt;&gt;</span> len(&quot;<span style="color:#e67e22;">python</span>&quot;)<br />\r\n6</tt></p>\r\n</div>\r\n\r\n<p>name of this function is &quot;len&quot;<br />\r\nargument for this example is &quot;python&quot;<br />\r\nreturn value of this function is 6&nbsp;<br />\r\nwhen you call the function, you should use parantheses() with name like len(&quot;argument&quot;)</p>\r\n\r\n<h4>Why do we need the functions?</h4>\r\n\r\n<p>- Easier to read, understand, and debug the programs</p>\r\n\r\n<p>- Eliminating repetitive code</p>\r\n\r\n<p>- Being reusable</p>\r\n\r\n<h4>The Kinds of Function</h4>\r\n\r\n<p>1. Built-in Functions:&nbsp;This type function is created by Python developer. print(), len(), type(), int(), str() ...</p>\r\n\r\n<p>2. Custom&nbsp;functions: This type function is created by us.</p>', '<p>In order to define a function, you&nbsp;need a keyword whose name is &quot;<strong>def</strong>&quot;, a name, &quot;<strong>:</strong>&quot; and sequence statements.</p>\r\n\r\n<p>Here&#39;is an example:</p>\r\n\r\n<p><span style="color:#e67e22">def</span> <span style="color:#3498db">plus_two_number</span>(number1, number2):<br />\r\n&nbsp; &nbsp; result = number1 + number2<br />\r\n&nbsp; &nbsp; <span style="color:#e74c3c">print</span>(result)<br />\r\n&nbsp; &nbsp; <span style="color:#e67e22">return</span> result</p>\r\n\r\n<p>-&nbsp;<strong>def</strong> is keyword to define&nbsp;<span style="color:#3498db">plus_two_number() function<br />\r\n-&nbsp;</span><span style="color:null"><strong>plus_two_number&nbsp;</strong>is name of this function<br />\r\n- <strong>number1 and number2&nbsp;</strong>are parameters of this function<br />\r\n- <strong>: character</strong> is necessary to compute the intended statements<br />\r\n- </span><strong>result = number1 + number2 and&nbsp;<span style="color:null">print</span>(result)</strong>&nbsp;are&nbsp;<span style="color:null">the intended statements&nbsp;for computing&nbsp;<br />\r\n- <strong>return</strong> is keyword to send a result of a function</span></p>\r\n\r\n<h4><span style="color:null">Calling function</span></h4>\r\n\r\n<p>In order to use a function, we should call it like this :</p>\r\n\r\n<p><span style="color:null">a = </span><span style="color:#3498db;">plus_two_number</span><span style="color:null">(</span><span style="color:#1abc9c;">5</span><span style="color:null">, </span><span style="color:#1abc9c;">6</span><span style="color:null">)<br />\r\n11</span>&nbsp;&nbsp;</p>\r\n\r\n<p><span style="color:null"><strong>plus_two_number&nbsp;</strong>is name of this function<br />\r\n<strong>5 and 6</strong> are arguments for this function. 5 is for number1 parameter and 6 is for number2 parameter</span><br />\r\n<strong>a&nbsp;</strong>is 11 because of&nbsp;<span style="color:#e67e22">return</span><span style="color:null"> result, we stored in variable a<br />\r\n<strong>11</strong>&nbsp;is shown because of&nbsp;</span><span style="color:#e74c3c">print</span>(result) otherwise you couldn&#39;t anything</p>', '<p>You can define several different type functions which depend on parameters which are variables of a function. Arguments are value of these parameters.&nbsp;&nbsp;</p>\r\n\r\n<p>1. A function without parameter</p>\r\n\r\n<p>2. A function which has the ordered parameter(s)</p>\r\n\r\n<p>3. A function which has the unordered parameter(s)</p>\r\n\r\n<p>4. A function which has&nbsp;<strong>&nbsp;</strong>the&nbsp;unordered and infinite parameter(s)</p>\r\n\r\n<p>5. A function which has the infinite ordered parameter(s)</p>\r\n\r\n<p>Now lets learn them.</p>', '<p>We can define a function without parameter.</p>\r\n\r\n<p>example.py</p>\r\n\r\n<div class="codes">\r\n<p><tt>def&nbsp;<span style="color:#3498db;">hello_world</span>():<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">Hello World</span>&quot;)</tt></p>\r\n\r\n<p><tt>hello_world() # calling the function</tt></p>\r\n\r\n<p><tt>Hello World</tt></p>\r\n</div>', '<p>The order of parameters are important when you use them.</p>\r\n\r\n<div class="codes">\r\n<p><tt><font color="#e74c3c"><b>example.py</b></font></tt></p>\r\n\r\n<p><tt>def <span style="color:#3498db">name_and_age</span>(name, age):<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22">Your name is :</span> &quot;, name)<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22">You are</span> &quot;, age)</tt></p>\r\n\r\n<p><tt>name_and_age(&quot;John&quot;, 40)</tt></p>\r\n\r\n<p><tt>Your name is : &nbsp;John<br />\r\nYou are &nbsp;40</tt></p>\r\n</div>\r\n\r\n<p>If you call above&nbsp;function like this:&nbsp;name_and_age(<span style="color:#1abc9c">40</span>, &quot;<span style="color:#e67e22">John</span>&quot;), your output will be&nbsp;</p>\r\n\r\n<p>Your name is :&nbsp; 40<br />\r\nYou are&nbsp; John</p>', '<p><font color="#e74c3c"><b>example.py</b></font></p>\r\n\r\n<div class="codes">\r\n<p><tt>def <span style="color:#3498db">name_and_age</span>(name, age):<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22">Your name is :</span> &quot;, name)<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22">You are</span> &quot;, age)</tt></p>\r\n\r\n<p><tt>name_and_age(&quot;John&quot;, 40)</tt></p>\r\n\r\n<p><tt>Your name is : &nbsp;John<br />\r\nYou are &nbsp;40</tt></p>\r\n</div>\r\n\r\n<p>When you&nbsp;call above function with parameters, you don&#39;t have to call in order. So You can call like this:</p>\r\n\r\n<p>name_and_age(age = 40, name = &quot;John&quot;)&nbsp;</p>\r\n\r\n<p>Your name is : &nbsp;John<br />\r\nYou are &nbsp;40</p>\r\n\r\n<p>However you can&#39;t call like this:</p>\r\n\r\n<p>name_and_age(age = 40, &quot;John&quot;)&nbsp;</p>\r\n\r\n<p>If you want, you will take error. Because the ordered parameters can&#39;t be front of the ordered parameters.</p>', '<p>If you&nbsp;want to give default value to parameter, you can define like this:</p>\r\n\r\n<div class="codes">\r\n<p><tt>def planet(name = &quot;<span style="color:#e67e22;">World</span>&quot;):<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">Your planet is</span>&quot;, name)</tt></p>\r\n</div>\r\n\r\n<p>If you call like <strong>planet()&nbsp;</strong>your result is<br />\r\nYour planet is World</p>\r\n\r\n<p>You can call like this too:&nbsp;<strong>planet(&quot;Mars&quot;)</strong><br />\r\nYour planet is Mars</p>', '<p>In order to define infinite unordered parameters, you should use * character.</p>\r\n\r\n<div class="codes">\r\n<p><tt>def show_all(*args):<br />\r\n&nbsp; &nbsp; print(args)</tt></p>\r\n\r\n<p><tt>show_all(<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>, <span style="color:#1abc9c;">7</span>, <span style="color:#1abc9c;">8</span>)</tt></p>\r\n\r\n<p><tt>(1, 2, 3, 4, 5, 6, 7, 8)</tt></p>\r\n</div>', '<p>In order to define infinite unordered parameters, you should use ** character.</p>\r\n\r\n<div class="codes">\r\n<p><tt>def showing(**kwargs):<br />\r\n&nbsp; &nbsp; print(kwargs)</tt></p>\r\n\r\n<p><tt>showing(name = &quot;<span style="color:#e67e22;">John</span>&quot;, age = <span style="color:#1abc9c;">40</span>, lastname = &quot;<span style="color:#e67e22;">Rock</span>&quot;)</tt></p>\r\n\r\n<p><tt>{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 40, &#39;lastname&#39;: &#39;Rock&#39;}</tt></p>\r\n</div>', '<p>A string has the characters such as &quot;python&quot;, &#39;Paris&#39;, &quot; &quot;, &quot;+&quot;, &quot;&quot;&quot;123&quot;&quot;&quot; .&nbsp;You can access the characters with&nbsp;the bracket operator []. First character is [0] of a string.&nbsp;The strings are enclosed in quotes. Single quotes and double quotes do the same thing. Triple quotes is used for long texts or explaining something in a program.</p>\r\n\r\n<div class="codes">\r\n<p><code># double quotes</code><br />\r\n<tt>&gt;&gt;&gt;&nbsp;&quot;Paris&quot;<br />\r\n&#39;Paris&#39;</tt></p>\r\n\r\n<p><code># one quotes</code><br />\r\n<tt>&gt;&gt;&gt;&nbsp;&#39;Python 3.6&#39;<br />\r\n&#39;Python 3.6&#39;</tt></p>\r\n\r\n<p><code># triple quotes</code><br />\r\n<tt>&gt;&gt;&gt;&nbsp;&quot;&quot;&quot; In Python there are the different and usefull datatypes which are strings, integers, integers, floats, lists, dictionaries, tuples, sets.&quot;&quot;&quot;<br />\r\n&#39; In Python there are the different and usefull datatypes which are strings, integers, integers, floats, lists, dictionaries, tuples, sets&#39;</tt></p>\r\n\r\n<p><code># learning of data type</code><br />\r\n<tt>&gt;&gt;&gt;&nbsp;type(&#39;&#39;)<br />\r\n&lt;class &#39;str&#39;&gt;</tt></p>\r\n</div>', '<p>To define a string, we have two options: First one is using enclosed quotes which are single, double and triple. Second one is using str() built-in function.&nbsp;</p>\r\n\r\n<h4>Quotes &#39;&#39;, &quot;&quot;, &quot;&quot;&quot;</h4>\r\n\r\n<p>Single quotes examples:</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &#39;<span style="color:#e67e22;">apple</span>&#39;&nbsp;<br />\r\n&#39;apple&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &#39;<span style="color:#e67e22;">bird</span>&#39;<br />\r\n&#39;bird&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &#39;<span style="color:#e67e22;">1234567</span>&#39;<br />\r\n&#39;1234567&#39;</tt></p>\r\n</div>\r\n\r\n<p>Double quotes examples:</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">apple</span>&quot;<br />\r\n&#39;apple&#39;&nbsp;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &#39;<span style="color:#e67e22;">bird</span>&#39;<br />\r\n&#39;bird&#39;&nbsp;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">1234567</span>&quot;<br />\r\n&#39;1234567&#39;</tt></p>\r\n</div>\r\n\r\n<p>Triple quotes examples:</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;&quot;&quot;<span style="color:#e67e22;">apple</span>&quot;&quot;&quot;<br />\r\n&#39;apple&#39;&nbsp;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;&quot;&quot;<span style="color:#e67e22;">bird</span>&quot;&quot;&quot;<br />\r\n&#39;bird&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;&quot;&quot;<span style="color:#e67e22;">1234567</span>&quot;&quot;&quot;<br />\r\n&#39;1234567&#39;</tt></p>\r\n</div>\r\n\r\n<p>If you want to use the quotes&nbsp;in your string, you should be carefull.</p>\r\n\r\n<p>So How should i construct&nbsp;What&#39;s your name or he said &quot;My name is Jack and this isn&#39;t mine&quot; . Look at these below examples.</p>\r\n\r\n<p><em>Wrong usages</em></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &#39;What&#39;s your name&#39;<br />\r\n<span style="color:#e74c3c;">SyntaxError: invalid character in identifier</span></tt></p>\r\n</div>\r\n\r\n<p><em>Right usages</em></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">What&#39;s your name</span>&quot;<br />\r\n&quot;What&#39;s your name&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &#39; <span style="color:#e67e22;">&quot;My name is Jack&quot;</span> &#39;<br />\r\n&#39; &quot;My name is Jack&quot; &#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;&quot;&quot; <span style="color:#e67e22;">he said: &quot;My name is Jack and this is not &#39;mine&#39; &quot;</span> &quot;&quot;&quot;<br />\r\n&#39; he said: &quot;My name is Jack and this is not \\&#39;mine\\&#39; &quot; &#39;</tt></p>\r\n</div>\r\n\r\n<p>Finally we can say this: if there is only<em>&nbsp;single quote</em>&nbsp; in our string, we can use &quot; or &quot;&quot;&quot; characters at the begining and ending of our string.</p>\r\n\r\n<p>if there is only<em>&nbsp;double quote</em>&nbsp; in our string, we can use &#39;&nbsp;or &quot;&quot;&quot; characters at the begining and ending of our string.</p>\r\n\r\n<p>if there is single and double quotes<em>&nbsp;</em>in our string, we can use only &quot;&quot;&quot;&nbsp;characters at the begining and ending of our string.</p>\r\n\r\n<h4>str()</h4>\r\n\r\n<p>It converts a value to string.&nbsp;</p>\r\n\r\n<p><strong>str(</strong>value<strong>)</strong>&nbsp;&rArr; string</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; str(<span style="color:#2ecc71">4.5</span>)<br />\r\n&#39;4.5&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; str(<span style="color:#2ecc71">65</span>)<br />\r\n&#39;65&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; str(<span style="color:#2ecc71">-45</span>)<br />\r\n&#39;-45&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; str([<span style="color:#2ecc71">1</span>, <span style="color:#2ecc71">2</span>, <span style="color:#e67e22">&quot;a&quot;</span>])<br />\r\n&quot;[1, 2, &#39;a&#39;]&quot;</tt></p>\r\n</div>\r\n\r\n<p><strong>str(bytes,&nbsp;<em>encoding, errors</em>)</strong>&nbsp;&rArr; string</p>\r\n\r\n<p>It can be used to convert bytes.&nbsp;encoding and&nbsp;errors are optional. encoding can be &quot;utf-8&quot;, &quot;ascii&quot;, etc. errors can &#39;ignore&#39;, replace&#39; and&nbsp;&#39;xmlcharrefreplace&#39;. Default valu of it is &quot;strict&quot;.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt;&nbsp;str(b<span style="color:#e67e22">&#39;home&#39;</span>, <span style="color:#e67e22">&quot;utf-8&quot;</span>)<br />\r\n&#39;elma&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;str(b<span style="color:#e67e22">&#39;home&#39;</span>, <span style="color:#e67e22">&quot;ascii&quot;</span>)<br />\r\n&#39;elma&#39;</tt></p>\r\n</div>\r\n\r\n<blockquote>\r\n<p>We will see encoding,&nbsp;and errors deeply in character encoding tutorial.</p>\r\n</blockquote>', '<p>We can access the characters with&nbsp;the bracket operator []. First character is [0] of a string.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">Python</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string<br />\r\n&#39;Python&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">0</span>]<br />\r\n&#39;P&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">1</span>]<br />\r\n&#39;y&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">2</span>]<br />\r\n&#39;t&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">3</span>]<br />\r\n&#39;h&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">4</span>]<br />\r\n&#39;o&#39;<br />\r\n&gt;&gt;&gt; string[<span style="color:#1abc9c;">5</span>]<br />\r\n&#39;n&#39;</tt></p>\r\n</div>', '<p>In order to get the length of a string, you can use len() function.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; len(&#39;<span style="color:#e67e22;">Python</span>&#39;)<br />\r\n6</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; len(&#39;<span style="color:#e67e22;">apple</span>&#39;)<br />\r\n5</tt></p>\r\n</div>\r\n\r\n<p><strong>Getting the last letter of a string</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">computer</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[len(string) - <span style="color:#1abc9c;">1</span>]<br />\r\n&#39;r&#39;</tt></p>\r\n</div>', '<p>The operators &quot;in&quot; and &quot;not in&quot; test for membership. An output is True or False.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">a</span>&quot; in &quot;<span style="color:#e67e22;">apple</span>&quot;<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">q</span>&quot; in &quot;<span style="color:#e67e22;">apple</span>&quot;<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;a&quot; not in &quot;apple&quot;<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;q&quot; not in &quot;apple&quot;<br />\r\nTrue</tt></p>\r\n</div>', '<p>We can reach the elements of a string using for loops.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e74c3c;"># example.py</span><br />\r\nstring = &quot;<span style="color:#e67e22;">Hello World</span>&quot;<br />\r\nfor letter in string:<br />\r\n&nbsp; &nbsp; print(letter)</tt></p>\r\n\r\n<p><tt>H<br />\r\ne<br />\r\nl<br />\r\nl<br />\r\no<br />\r\n&nbsp;<br />\r\nW<br />\r\no<br />\r\nr<br />\r\nl<br />\r\nd</tt></p>\r\n</div>', '<p>To compare strings, you should use <strong>==</strong> or <strong>&gt;</strong>, <strong>&lt; </strong>operators.</p>\r\n\r\n<p>== operators ask if strings are equal to another strings</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e74c3c;"># example.py</span><br />\r\nstring = input(&quot;<span style="color:#e67e22;">Please, write a string: </span>&nbsp;&quot;)<br />\r\nif string == &quot;<span style="color:#e67e22;">Python</span>&quot;:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">It is Python</span>&quot;)<br />\r\nelse:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">It isn&#39;t Python</span>&quot;)</tt></p>\r\n</div>\r\n\r\n<p>&lt; and &gt; operators check if strings are in alphabetical order.</p>\r\n\r\n<div class="codes">\r\n<p><tt># example.py<br />\r\nstring = input(&quot;<span style="color:#e67e22;">Please, write a string: &nbsp;</span>&quot;)<br />\r\nif string &gt; &quot;<span style="color:#e67e22;">Python</span>&quot;:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">alphabetical order is</span>&quot;, &quot;<span style="color:#e67e22;">Python</span>&quot;, string)<br />\r\nelse:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">alphabetical order is</span>&quot;, string, &quot;<span style="color:#e67e22;">Python</span>&quot;)</tt></p>\r\n</div>', '<p>It copies the strings number of times.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22;">&gt;&gt;&gt;</span> &quot;<span style="color:#e67e22;">-</span>&quot; * <span style="color:#1abc9c;">30</span><br />\r\n&#39;------------------------------&#39;</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22;">&gt;&gt;&gt;</span>&nbsp;&quot;<span style="color:#e67e22;">slow&nbsp;</span>&quot;&nbsp;*&nbsp;<span style="color:#1abc9c;">2</span><br />\r\n&#39;slow&nbsp;slow&nbsp;&#39;</tt></p>\r\n</div>', '<p>It concatenates the strings.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> &quot;google&quot; + &quot;.com&quot;<br />\r\n&#39;google.com&#39;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> &quot;Hello&quot; + &quot;World&quot;<br />\r\n&#39;HelloWorld&#39;</tt></p>\r\n</div>', '<p>To take partion of a string, you can use (<strong>:</strong>) character. our formula is</p>\r\n\r\n<p>string[first_elements_order&nbsp;<strong>:</strong> last_elements_order+1]</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">SpiderMan</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">0</span>:<span style="color:#1abc9c;">5</span>]<br />\r\n&#39;Spide&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">0</span>:<span style="color:#1abc9c;">6</span>]<br />\r\n&#39;Spider&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">6</span>:<span style="color:#1abc9c;">9</span>]<br />\r\n&#39;Man&#39;</tt></p>\r\n</div>\r\n\r\n<p>If you omit the first index (before the colon), the slice starts at the beginning of the string. If you omit the second index, the slice goes to the end of the string:</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">SpiderMan</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[:]<br />\r\n&#39;SpiderMan&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[:<span style="color:#1abc9c;">6</span>]<br />\r\n&#39;Spider&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">6</span>:]<br />\r\n&#39;Man&#39;</tt></p>\r\n</div>\r\n\r\n<p>To reverse of a&nbsp;string, you can use slice character, too.</p>\r\n\r\n<p>string[first_character <strong>:</strong>&nbsp;last_character&nbsp;<strong>:</strong>&nbsp;step]</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">Python</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[::<span style="color:#1abc9c;">-1</span>]<br />\r\n&#39;nohtyP&#39;</tt></p>\r\n</div>\r\n\r\n<p>to reverse a partion of a string</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">Python</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">4</span>:<span style="color:#1abc9c;">0</span>:<span style="color:#1abc9c;">-1</span>]<br />\r\n&#39;ohty&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">4</span>::<span style="color:#1abc9c;">-1</span>]<br />\r\n&#39;ohtyP&#39;</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">Tom and Jerry</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">0</span>:<span style="color:#1abc9c;">3</span>]<br />\r\n&#39;Tom&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[<span style="color:#1abc9c;">8</span>:]<br />\r\n&#39;Jerry&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[::<span style="color:#1abc9c;">1</span>]<br />\r\n&#39;Tom and Jerry&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[::<span style="color:#1abc9c;">-1</span>]<br />\r\n&#39;yrreJ dna moT&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[::<span style="color:#1abc9c;">2</span>]<br />\r\n&#39;TmadJry&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string[::<span style="color:#1abc9c;">-2</span>]<br />\r\n&#39;yrJdamT&#39;</tt></p>\r\n</div>\r\n\r\n<p>You can use reversed() function to reverse a string, too</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; print(*reversed(string))<br />\r\ny r r e J &nbsp; d n a &nbsp; m o T</tt></p>\r\n</div>', '<p>Python has two datatypes which are immutable and mutable. Strings&nbsp;are immutable so if a string assigns a variable, you can&#39;t change this string.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22;">&gt;&gt;&gt;</span> string = &quot;<span style="color:#e67e22;">Python</span>&quot;</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22;">&gt;&gt;&gt;</span> string[<span style="color:#1abc9c;">0</span>]<br />\r\n&#39;P&#39;</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22;">&gt;&gt;&gt;</span> string[<span style="color:#1abc9c;">0</span>] = &quot;<span style="color:#e67e22;">J</span>&quot;<br />\r\n<span style="color:#e74c3c;">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#20&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; string[0] = &quot;J&quot;<br />\r\nTypeError: &#39;str&#39; object does not support item assignment</span></tt></p>\r\n</div>\r\n\r\n<p>If you&nbsp;need change a string, you can only&nbsp;redefine another string.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e67e22;">&gt;&gt;&gt;</span> string = &#39;<span style="color:#e67e22;">Python</span>&#39;</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22;">&gt;&gt;&gt;</span> string = &#39;<span style="color:#e67e22;">J</span>&#39; + string[<span style="color:#1abc9c;">1</span>:]</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22;">&gt;&gt;&gt;</span> string<br />\r\n&#39;Jython&#39;</tt></p>\r\n</div>', '<p>In order to list methods of the strings, we can use dir function which&nbsp;return an alphabetized list of names comprising (some of) the attributes of the given object, and of attributes reachable from it.</p>\r\n\r\n<p>dir(str) or dir(&quot;&quot;) or dir(&quot;apple&quot;) each of these commands show methods of the string in aphabetical order.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dir(str)<br />\r\n[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;,&nbsp;<strong>&#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;</strong>]&nbsp;</tt></p>\r\n</div>\r\n\r\n<p>Above there are all methods of the strings. Because the strings without &quot;__&quot; character are very important, we will examine them.</p>\r\n\r\n<h4>replace()</h4>\r\n\r\n<p>Return a copy of a string&nbsp;with all occurrences of substring old replaced by new. &nbsp;If the optional argument count is given, only the first count occurrences are replaced.</p>\r\n\r\n<p>The methods are used with &quot;.&quot; character after string and other types. This called &quot;dot notation&quot; in Python.</p>\r\n\r\n<p>str.replace(old_character, new_character, count) -&gt; str</p>\r\n\r\n<p><strong>str&nbsp;:</strong> is any string like &quot;Python&quot;, &quot;apple&quot;...<br />\r\n<strong>old_character :&nbsp;</strong>a partion of exisiting character such as:&nbsp; &quot;P&quot;, &quot;Py&quot;, &quot;o&quot; for&nbsp;&quot;Python&quot; ...<br />\r\n<strong>new_character : </strong>any new character such as: &quot;J&quot;, &quot;abc&quot;, &quot;&quot;,&quot; &quot; ...<br />\r\n<strong>count :</strong> optional character is the&nbsp;number of replaced character such as: count =1 only first one old_character is replaced.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string.replace(&quot;<span style="color:#e67e22;">P</span>&quot;, &quot;<span style="color:#e67e22;">J</span>&quot;)<br />\r\n&#39;Jython&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string.replace(&quot;<span style="color:#e67e22;">Pyt</span>&quot;, &quot;<span style="color:#e67e22;">Telep</span>&quot;)<br />\r\n&#39;Telephon&#39;</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; string.replace(&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">A</span>&quot;)<br />\r\n&#39;bAnAnA&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string.replace(&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">A</span>&quot;, <span style="color:#1abc9c;">1</span>)<br />\r\n&#39;bAnana&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string.replace(&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">A</span>&quot;, <span style="color:#1abc9c;">2</span>)<br />\r\n&#39;bAnAna&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string.replace(&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;&quot;)<br />\r\n&#39;bnn&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string.replace(&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;&quot;, <span style="color:#1abc9c;">1</span>)<br />\r\n&#39;bnana&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string.replace(&quot;<span style="color:#e67e22;">a</span>&quot;, &quot; &quot;, <span style="color:#1abc9c;">2</span>)<br />\r\n&#39;b n na&#39;</tt></p>\r\n</div>\r\n\r\n<p>Please, don&#39;t forget that the strings are immutable. The Methods &nbsp;can&#39;t change the strings. Only they give an output.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">banana</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string.replace(&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">A</span>&quot;)<br />\r\n&#39;bAnAnA&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string<br />\r\n&#39;banana&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; new_string = string.replace(&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">A</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; new_string<br />\r\n&#39;bAnAnA&#39;</tt></p>\r\n</div>\r\n\r\n<p>If sep is not in a string, replace&nbsp;method doesn&#39;t anything</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string.replace(&quot;<span style="color:#e67e22;">c</span>&quot;, &quot;<span style="color:#e67e22;">k</span>&quot;)<br />\r\n&#39;banana&#39;</tt></p>\r\n\r\n<h4>&nbsp;</h4>\r\n</div>\r\n\r\n<h4>split()</h4>\r\n\r\n<p>Return a list of the words in an string, using sep as the delimiter string. &nbsp;If maxsplit is given, at most maxsplit splits are done.</p>\r\n\r\n<p>str.split(sep=None, maxsplit=-1) -&gt; list of strings</p>\r\n\r\n<p><strong>sep :</strong> a seperator character(s) in string such as : &quot;a&quot; for &quot;banana&quot; string<br />\r\n<strong>maxsplit : </strong>number of a split character(s) such as. 0, 1, 2, 3 ...</p>\r\n\r\n<div class="codes">\r\n<h4><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">banana</span>&quot;</tt></h4>\r\n\r\n<h4><tt>&gt;&gt;&gt; g.split(&quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\n[&#39;b&#39;, &#39;n&#39;, &#39;n&#39;, &#39;&#39;]</tt></h4>\r\n\r\n<h4><tt>&gt;&gt;&gt; string.split(&quot;<span style="color:#e67e22;">n</span>&quot;)<br />\r\n[&#39;ba&#39;, &#39;a&#39;, &#39;a&#39;]</tt></h4>\r\n\r\n<h4><tt>&gt;&gt;&gt; string.split(&quot;<span style="color:#e67e22;">b</span>&quot;)<br />\r\n[&#39;&#39;, &#39;anana&#39;]</tt></h4>\r\n\r\n<h4><tt>&gt;&gt;&gt; string.split(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">1</span>)<br />\r\n[&#39;b&#39;, &#39;nana&#39;]</tt></h4>\r\n\r\n<h4><tt>&gt;&gt;&gt; string.split(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">2</span>)<br />\r\n[&#39;b&#39;, &#39;n&#39;, &#39;na&#39;]strin</tt></h4>\r\n\r\n<hr />\r\n<h4><tt>&gt;&gt;&gt; cities = &quot;<span style="color:#e67e22;">London, Paris, Berlin</span>&quot;</tt></h4>\r\n\r\n<h4><tt>&gt;&gt;&gt; cities.split(&quot;<span style="color:#e67e22;">,</span>&quot;)<br />\r\n[&#39;London&#39;, &#39; Paris&#39;, &#39; Berlin&#39;]</tt></h4>\r\n</div>\r\n\r\n<p>If sep is not specified or is None, any whitespace string is a separator and empty strings are removed from the result.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">The United State America</span>&quot;<br />\r\n&gt;&gt;&gt; string.split()<br />\r\n[&#39;The&#39;, &#39;United&#39;, &#39;State&#39;, &#39;America&#39;]</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; cities = &quot;<span style="color:#e67e22;">London,Paris,Berlin</span>&quot;<br />\r\n&gt;&gt;&gt; cities.split(&quot;<span style="color:#e67e22;">,</span>&quot;)<br />\r\n[&#39;London&#39;, &#39;Paris&#39;, &#39;Berlin&#39;]</tt></p>\r\n</div>\r\n\r\n<p>If sep is not in string, split method doesn&#39;t anything like replace method</p>\r\n\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">banana</span>&quot;<br />\r\n&gt;&gt;&gt; string.split(&quot;<span style="color:#e67e22;">c</span>&quot;)<br />\r\n[&#39;banana&#39;]</tt></p>\r\n\r\n<h4>rsplit()</h4>\r\n\r\n<p>It works like split() but it does same things with starting at the end of the string and working to the front.</p>\r\n\r\n<h4>splitlines()</h4>\r\n\r\n<p>Return a list of the lines in string, breaking at line boundaries.</p>\r\n\r\n<p>str.splitlines(keepends) -&gt; list of strings</p>\r\n\r\n<p><strong>keepends :</strong> default value is False, if it is True, you will see &quot;\\n&quot; newline character every element&nbsp;in the occured list.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;&quot;&quot; <span style="color:#e67e22;">Welcome to Python 3.6&#39;s help utility!</span></tt></p>\r\n\r\n<p><span style="color:#e67e22;"><tt>If this is your first time using Python, you should definitely check out<br />\r\nthe tutorial on the Internet at http://docs.python.org/3.6/tutorial/.</tt></span></p>\r\n\r\n<p><span style="color:#e67e22;"><tt>Enter the name of any module, keyword, or topic to get help on writing<br />\r\nPython programs and using Python modules. &nbsp;To quit this help utility and<br />\r\nreturn to the interpreter, just type &quot;quit&quot;.</tt></span></p>\r\n\r\n<p><tt><span style="color:#e67e22;">To get a list of available modules, keywords, symbols, or topics, type<br />\r\n&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;. &nbsp;Each module also comes<br />\r\nwith a one-line summary of what it does; to list the modules whose name<br />\r\nor summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;. </span>&quot;&quot;&quot;</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> string.splitlines()</tt></p>\r\n\r\n<p><tt>[&quot; Welcome to Python 3.6&#39;s help utility!&quot;, &#39;&#39;, &#39;If this is your first time using Python, you should definitely check out&#39;, &#39;the tutorial on the Internet at http://docs.python.org/3.6/tutorial/.&#39;, &#39;&#39;, &#39;Enter the name of any module, keyword, or topic to get help on writing&#39;, &#39;Python programs and using Python modules. &nbsp;To quit this help utility and&#39;, &#39;return to the interpreter, just type &quot;quit&quot;.&#39;, &#39;&#39;, &#39;To get a list of available modules, keywords, symbols, or topics, type&#39;, &#39;&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;. &nbsp;Each module also comes&#39;, &#39;with a one-line summary of what it does; to list the modules whose name&#39;, &#39;or summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;. &#39;]</tt></p>\r\n\r\n<p><tt><span style="color:#e67e22">&gt;&gt;&gt;</span> string.splitlines(True)</tt></p>\r\n\r\n<p><br />\r\n<tt>[&quot; Welcome to Python 3.6&#39;s help utility!\\n&quot;, &#39;\\n&#39;, &#39;If this is your first time using Python, you should definitely check out\\n&#39;, &#39;the tutorial on the Internet at http://docs.python.org/3.6/tutorial/.\\n&#39;, &#39;\\n&#39;, &#39;Enter the name of any module, keyword, or topic to get help on writing\\n&#39;, &#39;Python programs and using Python modules. &nbsp;To quit this help utility and\\n&#39;, &#39;return to the interpreter, just type &quot;quit&quot;.\\n&#39;, &#39;\\n&#39;, &#39;To get a list of available modules, keywords, symbols, or topics, type\\n&#39;, &#39;&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;. &nbsp;Each module also comes\\n&#39;, &#39;with a one-line summary of what it does; to list the modules whose name\\n&#39;, &#39;or summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;. &#39;]</tt></p>\r\n</div>\r\n\r\n<h4>lower()</h4>\r\n\r\n<p>Return a copy of the string S converted to lowercase.</p>\r\n\r\n<p>string.lower() -&gt; str</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string =&quot;<span style="color:#e67e22;">ABCDEFgHIjkl</span>&quot;<br />\r\n&gt;&gt;&gt; string.lower()<br />\r\n&#39;abcdefghijkl&#39;</tt></p>\r\n</div>\r\n\r\n<h4>upper()</h4>\r\n\r\n<p>Return a copy of S converted to uppercase.</p>\r\n\r\n<p>str.upper() -&gt; str</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">abcdefghijklmn</span>&quot;<br />\r\n&gt;&gt;&gt; string.upper()<br />\r\n&#39;ABCDEFGHIJKLMN&#39;</tt></p>\r\n</div>\r\n\r\n<h4>islower()</h4>\r\n\r\n<p>Return True if all cased characters in a string&nbsp;are lowercase.&nbsp;otherwise,&nbsp;False</p>\r\n\r\n<p>str.islower() -&gt; bool -&gt; True or False</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">London</span>&quot;<br />\r\n&gt;&gt;&gt; string.islower()<br />\r\nFalse<br />\r\n<br />\r\n&gt;&gt;&gt; &quot;<span style="color:#e67e22;">abcdefgh</span>&quot;.islower()<br />\r\nTrue</tt></p>\r\n</div>\r\n\r\n<h4>isupper()</h4>\r\n\r\n<p>Return True if all cased characters in S are uppercase,&nbsp;otherwise False.</p>\r\n\r\n<p>S.isupper() -&gt; bool&nbsp;-&gt; True or False</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">ABCDEFGH</span>&quot;<br />\r\n&gt;&gt;&gt; string.isupper()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">aBCDEFGH</span>&quot;<br />\r\n&gt;&gt;&gt; string.isupper()<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">USA</span>&quot;.isupper()<br />\r\nTrue</tt></p>\r\n</div>\r\n\r\n<h4>endswith()</h4>\r\n\r\n<p>Return True if a string&nbsp;ends with the specified suffix, False otherwise.</p>\r\n\r\n<p>str.endswith(suffix, startpoint, endpoint) -&gt; bool</p>\r\n\r\n<p><strong>suffix :</strong>&nbsp;string like &quot;a&quot;, &quot;banana&quot;, &quot;na&quot;.&nbsp;suffix can also be a tuple of strings to try. such as :&nbsp; a = (&quot;banana&quot;)<br />\r\n<strong>startpoint :</strong> optional start, test string&nbsp;beginning at that position.<br />\r\n<strong>endpoint :</strong>&nbsp; optional end, stop comparing string&nbsp;at that position.<br />\r\n&nbsp; &nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; string = &quot;<span style="color:#e67e22;">banana</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string.endswith(&quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; string.endswith(&quot;<span style="color:#e67e22;">b</span>&quot;)<br />\r\nFalse</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; &quot;banana&quot;.endswith(&quot;<span style="color:#e67e22;">na</span>&quot;, <span style="color:#1abc9c;">5</span>)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;banana&quot;.endswith(&quot;<span style="color:#e67e22;">na</span>&quot;, <span style="color:#1abc9c;">4</span>)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;banana&quot;.endswith(&quot;<span style="color:#e67e22;">an</span>&quot;, <span style="color:#1abc9c;">0</span>, <span style="color:#1abc9c;">3</span>)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:#e74c3c"><strong># a tuple example</strong></span></tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a = (&quot;<span style="color:#e67e22;">asdf</span>&quot;)<br />\r\n&gt;&gt;&gt; a.endswith(&quot;<span style="color:#e67e22;">f</span>&quot;)<br />\r\nTrue</tt></p>\r\n</div>\r\n\r\n<h4>startswith</h4>\r\n\r\n<p>Return True if a string&nbsp;starts with the specified prefix, False otherwise.</p>\r\n\r\n<p>str.endswith(prefix, startpoint, endpoint) -&gt; bool</p>\r\n\r\n<p><strong>prefix :</strong>&nbsp;string like &quot;a&quot;, &quot;banana&quot;, &quot;na&quot;.&nbsp;suffix can also be a tuple of strings to try. such as :&nbsp; a = (&quot;banana&quot;)<br />\r\n<strong>startpoint :</strong> optional start, test string&nbsp;beginning at that position.<br />\r\n<strong>endpoint :</strong>&nbsp; optional end, stop comparing string&nbsp;at that position.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.startswith(&quot;<span style="color:#e67e22;">p</span>&quot;)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.startswith(&quot;<span style="color:#e67e22;">y</span>&quot;)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.startswith(&quot;<span style="color:#e67e22;">y</span>&quot;, <span style="color:#1abc9c;">1</span>)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.startswith(&quot;<span style="color:#e67e22;">tho</span>&quot;, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">6</span>)<br />\r\nTrue</tt></p>\r\n</div>\r\n\r\n<h4>capitalize()</h4>\r\n\r\n<p>Return a capitalized version of a string, i.e. make the first character have upper case and the rest lower case.</p>\r\n\r\n<p>str.capitalize() -&gt; str</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.capitalize()<br />\r\n&#39;Python&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">the python lesson</span>&quot;.capitalize()<br />\r\n&#39;The python lesson&#39;</tt></p>\r\n</div>\r\n\r\n<h4>title()</h4>\r\n\r\n<p>Return a titlecased version of S, i.e. words start with title case characters, all remaining cased characters have lower case.</p>\r\n\r\n<p>str.title() -&gt; str</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">the python lessons</span>&quot;.title()<br />\r\n&#39;The Python Lessons&#39;</tt></p>\r\n</div>\r\n\r\n<h4>swapcase()</h4>\r\n\r\n<p>Return a copy of S with uppercase characters converted to lowercase and vice versa.</p>\r\n\r\n<p>str.swapcase() -&gt; str</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; string = &quot;</span><span style="color:#e67e22;">Python</span><span style="color:null">&quot;<br />\r\n&gt;&gt;&gt; string.swapcase()<br />\r\n&#39;pYTHON&#39;</span></tt></p>\r\n</div>\r\n\r\n<h4>casefold()</h4>\r\n\r\n<p>Return a version of S suitable for caseless comparisons. It is similar to lower() method.</p>\r\n\r\n<p>str.casefold() -&gt; str</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">Python</span>&quot;.casefold()<br />\r\n&#39;python&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">ABCDEFG</span>&quot;.casefold()<br />\r\n&#39;abcdefg&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">&szlig;</span>&quot;.casefold()<br />\r\n&#39;ss&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">&szlig;</span>&quot;.lower()<br />\r\n&#39;&szlig;&#39;</tt></p>\r\n</div>\r\n\r\n<p>strip(), lstrip() and rstrip()</p>\r\n\r\n<p><strong>strip</strong></p>\r\n\r\n<p>Return a copy of the string S with leading and trailing whitespace removed. If chars is given and not None, remove characters in chars instead.</p>\r\n\r\n<p>str.strip(chars) -&gt; str</p>\r\n\r\n<p>&lsquo; &lsquo;&nbsp; and \\t , \\n , \\r , \\v , \\f escape sequence are removed.</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span><br />\r\n&gt;&gt;&gt; &quot;window&quot;.strip(&quot;w&quot;)<br />\r\n&#39;indo&#39;<br />\r\n&gt;&gt;&gt; &quot; window &quot;.strip()<br />\r\n&#39;window&#39;<br />\r\n&gt;&gt;&gt; &quot;\\nwindow\\r&quot;.strip()<br />\r\n&#39;window&#39;</p>\r\n\r\n<p><strong>rstrip&nbsp;</strong></p>\r\n\r\n<p>Return a copy of the string S with trailing(right) whitespace removed.</p>\r\n\r\n<p>str.rstrip(chars) -&gt; str</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;window&quot;.rstrip(&quot;w&quot;)<br />\r\n&#39;windo&#39;<br />\r\n&gt;&gt;&gt; &quot; window &quot;.rstrip()<br />\r\n&#39; window&#39;</p>\r\n\r\n<p><strong>lstrip</strong></p>\r\n\r\n<p>Return a copy of the string S with leading whitespace removed.</p>\r\n\r\n<p>str.lstrip(chars) -&gt; str</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;window&quot;.lstrip(&quot;w&quot;)<br />\r\n&#39;indow&#39;<br />\r\n&gt;&gt;&gt; &quot; window &quot;.lstrip()<br />\r\n&#39;window &#39;</p>\r\n\r\n<p>join()</p>\r\n\r\n<p>Return a string which is the concatenation of the strings in the iterable. &nbsp;The separator between elements is string.</p>\r\n\r\n<p>str.join(iterable) -&gt; str</p>\r\n\r\n<p><strong>iterable :</strong> it can be list, tuple</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;.&quot;.join([&quot;www&quot;, &quot;google&quot;, &quot;com&quot;])<br />\r\n&#39;www.google.com&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot;.&quot;.join((&quot;www&quot;, &quot;google&quot;, &quot;com&quot;))<br />\r\n&#39;www.google.com&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot;-&quot;.join(&quot;abcdefgh&quot;)<br />\r\n&#39;a-b-c-d-e-f-g-h&#39;</p>\r\n\r\n<p><br />\r\n&gt;&gt;&gt; &quot; &quot;.join([&quot;Life&quot;, &quot;is&quot;, &quot;beautiful&quot;])<br />\r\n&#39;Life is beautiful&#39;</p>\r\n\r\n<p>count()</p>\r\n\r\n<p>Return the number of non-overlapping occurrences of character(s)&nbsp;in string.</p>\r\n\r\n<p>str.count(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong> optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.count(&quot;a&quot;)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.count(&quot;a&quot;,2)<br />\r\n2<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.count(&quot;a&quot;, 2, 4)<br />\r\n1<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.count(&quot;ba&quot;)<br />\r\n1<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.count(&quot;ba&quot;, 3)<br />\r\n0</p>\r\n\r\n<p>index() and rindex()</p>\r\n\r\n<p><strong>index</strong></p>\r\n\r\n<p>show number of the first index for substring.&nbsp;Like S.find() but raise ValueError when the substring is not found.</p>\r\n\r\n<p>str.index(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong> optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:&nbsp;</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.index(&quot;a&quot;)<br />\r\n1<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.index(&quot;b&quot;)<br />\r\n0<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.index(&quot;a&quot;,2)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.index(&quot;a&quot;, 4, 6)<br />\r\n5<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.index(&quot;w&quot;)<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#47&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; &quot;banana&quot;.index(&quot;w&quot;)<br />\r\nValueError: substring not found</span></p>\r\n\r\n<p><span style="color:null"><strong>rindex</strong></span></p>\r\n\r\n<p>show number of the first index for substring reference to the end of a string.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.rindex(&quot;b&quot;)<br />\r\n0<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rindex(&quot;a&quot;)<br />\r\n5<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rindex(&quot;n&quot;)<br />\r\n4<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rindex(&quot;ba&quot;)<br />\r\n0<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rindex(&quot;na&quot;)<br />\r\n4</p>\r\n\r\n<p>find() and rfind()</p>\r\n\r\n<p>Return the lowest index in a string where substring sub is found.</p>\r\n\r\n<p>Return -1 on failure.(not founded situation)</p>\r\n\r\n<p>str.rfind(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong> optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.find(&quot;a&quot;)<br />\r\n1<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.find(&quot;ban&quot;)<br />\r\n0<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.find(&quot;a&quot;, 2)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.find(&quot;a&quot;, 3, 6)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.find(&quot;a&quot;, 4, 6)<br />\r\n5<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.find(&quot;T&quot;)<br />\r\n-1</p>\r\n\r\n<p><strong>rfind</strong></p>\r\n\r\n<p>Return the lowest index in a string where substring sub is found from the ending of string.&nbsp;&nbsp;</p>\r\n\r\n<p>Return -1 on failure.(not founded situation)</p>\r\n\r\n<p>str.find(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong> optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.rfind(&quot;a&quot;)<br />\r\n5<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rfind(&quot;an&quot;)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rfind(&quot;a&quot;,2)<br />\r\n5<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rfind(&quot;a&quot;, 2, 4)<br />\r\n3<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.rfind(&quot;t&quot;)<br />\r\n-1</p>\r\n\r\n<p>center()</p>\r\n\r\n<p>Return string which is&nbsp;&nbsp;centered in a string of length width. Padding is done using the specified fill character (default is a space)</p>\r\n\r\n<p>str.center(width,&nbsp;fillchar) -&gt; str</p>\r\n\r\n<p><strong>width :</strong> length like 5 , 6, ...<br />\r\n<strong>fillchar :</strong> optional argument to padding whose default is space</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.center(6)<br />\r\n&#39;python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.center(11)<br />\r\n&#39; &nbsp; python &nbsp;&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.center(21, &quot;*&quot;)<br />\r\n&#39;********python*******&#39;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong> If you want see any change with center method, your length argument should be bigger than your length of a string. So&nbsp;&quot;python&quot;.center(6) command show any change.</p>\r\n\r\n<p>rjust() and ljust()</p>\r\n\r\n<p>Return string&nbsp;right-justified in a string of length width. Padding is done using the specified fill character (default is a space).</p>\r\n\r\n<p>str.rjust(width,&nbsp;fillchar) -&gt; str</p>\r\n\r\n<p><strong>width :</strong>&nbsp;length like 5 , 6, ...<br />\r\n<strong>fillchar :</strong>&nbsp;optional argument to padding its&nbsp;default is space</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.rjust(6)<br />\r\n&#39;python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.rjust(7)<br />\r\n&#39; python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.rjust(8)<br />\r\n&#39; &nbsp;python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.rjust(11, &quot;-&quot;)<br />\r\n&#39;-----python</p>\r\n\r\n<p><strong>ljust</strong></p>\r\n\r\n<p>Return S left-justified in a string of length width. Padding is done using the specified fill character (default is a space).</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.ljust(6)<br />\r\n&#39;python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.ljust(10)<br />\r\n&#39;python &nbsp; &nbsp;&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.ljust(15, &quot;?&quot;)<br />\r\n&#39;python?????????&#39;</p>\r\n\r\n<p><strong>Note:</strong> If you want see any change with rjust and ljust&nbsp;method, your the length argument should be bigger than the length of a string. So&nbsp;&quot;python&quot;.rjust6) command show any change.</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.rjust(6)<br />\r\n&#39;python&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.ljust(6)<br />\r\n&#39;python&#39;</p>\r\n\r\n<p>zfill()</p>\r\n\r\n<p>Pad a numeric string&nbsp;with zeros on the left, to fill a field of the specified width. The string is never truncated.</p>\r\n\r\n<p>string.zfill(width) -&gt; str</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;python&quot;.zfill(7)<br />\r\n&#39;0python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.zfill(11)<br />\r\n&#39;00000python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.zfill(5)<br />\r\n&#39;python&#39;<br />\r\n&gt;&gt;&gt; &quot;python&quot;.zfill(6)<br />\r\n&#39;python&#39;</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;If you want see any change with zfill&nbsp;method, your the length argument should be bigger than the length of a string.</p>\r\n\r\n<p>partition() and rpartition()</p>\r\n\r\n<p>Search for the separator sep in a string, and return the part before it, the separator itself, and the part after it. &nbsp;If the separator is not found, return a string&nbsp;and two empty strings.</p>\r\n\r\n<p>str.partition(sep) -&gt; (head, sep, tail)&nbsp;-&gt; tuple</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;computer&quot;.partition(&quot;pu&quot;)<br />\r\n(&#39;com&#39;, &#39;pu&#39;, &#39;ter&#39;)<br />\r\n&gt;&gt;&gt; &quot;computer&quot;.partition(&quot;c&quot;)<br />\r\n(&#39;&#39;, &#39;c&#39;, &#39;omputer&#39;)<br />\r\n&gt;&gt;&gt; &quot;computer&quot;.partition(&quot;r&quot;)<br />\r\n(&#39;compute&#39;, &#39;r&#39;, &#39;&#39;)<br />\r\n&gt;&gt;&gt; &quot;computer&quot;.partition(&quot;a&quot;)<br />\r\n(&#39;computer&#39;, &#39;&#39;, &#39;&#39;)</p>\r\n\r\n<p><strong>rpartition</strong></p>\r\n\r\n<p>Search for the separator sep in a string, starting at the end of string, and return the part before it, the separator itself, and the part after it. &nbsp;If the separator is not found, return two empty strings.</p>\r\n\r\n<p>str.rpartition(sep) -&gt; (head, sep, tail)&nbsp;-&gt; tuple</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;computer&quot;.rpartition(&quot;com&quot;)<br />\r\n(&#39;&#39;, &#39;com&#39;, &#39;puter&#39;)<br />\r\n&gt;&gt;&gt; &quot;computer&quot;.rpartition(&quot;ter&quot;)<br />\r\n(&#39;compu&#39;, &#39;ter&#39;, &#39;&#39;)</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.rpartition(&quot;na&quot;)<br />\r\n(&#39;bana&#39;, &#39;na&#39;, &#39;&#39;)<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.partition(&quot;na&quot;)<br />\r\n(&#39;ba&#39;, &#39;na&#39;, &#39;na&#39;)</p>\r\n\r\n<p>encode()</p>\r\n\r\n<p>Encode string&nbsp;using the codec registered for encoding. Default encoding is &#39;utf-8&#39;. errors may be given to set a different error handling scheme. Default is &#39;strict&#39; meaning that encoding errors raise a UnicodeEncodeError. Other possible values are &#39;ignore&#39;, &#39;replace&#39; and &#39;xmlcharrefreplace&#39; as well as any other name registered with codecs.register_error that can handle UnicodeEncodeErrors.</p>\r\n\r\n<p>string.encode(encoding=&#39;utf-8&#39;, errors=&#39;strict&#39;) -&gt; bytes</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example1:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;banana&quot;.encode(&quot;ascii&quot;)<br />\r\nb&#39;banana&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;&ccedil;ilek&quot;.encode(&quot;cp1254&quot;)<br />\r\nb&#39;\\xe7ilek&#39;</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Example2: Not to have an error, you should the error parameters(&quot;replac&quot;e , &quot;ignore&quot;, &quot;xmlcharrefreplace&quot;)</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;&ccedil;ilek&quot;.encode(&quot;ascii&quot;)<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#32&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; &quot;&ccedil;ilek&quot;.encode(&quot;ascii&quot;)<br />\r\nUnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character &#39;\\xe7&#39; in position 0: ordinal not in range(128)</span><br />\r\n&gt;&gt;&gt; &quot;&ccedil;ilek&quot;.encode(&quot;ascii&quot;, &quot;replace&quot;)<br />\r\nb&#39;?ilek&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;&ccedil;ilek&quot;.encode(&quot;ascii&quot;, &quot;ignore&quot;)<br />\r\nb&#39;ilek&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;&ccedil;ilek&quot;.encode(&quot;ascii&quot;, &quot;xmlcharrefreplace&quot;)<br />\r\nb&#39;&amp;#231;ilek&#39;</p>\r\n\r\n<p>expandtabs()</p>\r\n\r\n<p>Return a copy of S where all tab characters are expanded using spaces. If tabsize is not given, a tab size of 8 characters is assumed.</p>\r\n\r\n<p>str.expandtabs(tabsize=8) -&gt; str</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;a\\tb\\t&quot;.expandtabs()<br />\r\n&#39;a &nbsp; &nbsp; &nbsp; b &nbsp; &nbsp; &nbsp; &#39;<br />\r\n&gt;&gt;&gt; &quot;a\\tb\\t&quot;.expandtabs(4)<br />\r\n&#39;a &nbsp; b &nbsp; &#39;</p>\r\n\r\n<p>str.maketrans() and translate()</p>\r\n\r\n<p><strong>str.maketrans</strong></p>\r\n\r\n<p>Return a translation table usable for str.translate().</p>\r\n\r\n<p>str.maketrans(x, y=None, z=None)&nbsp;&rArr; dict</p>\r\n\r\n<p>If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters to Unicode ordinals, strings or None. Character keys will be then converted to ordinals.</p>\r\n\r\n<ul>\r\n\t<li>str.maketrans({&quot;a&quot;:&#39;A&#39;, &#39;b&#39; :&#39;B&#39;, &#39;c&#39;:&#39;C&#39;})&nbsp;</li>\r\n\t<li>str.maketrans({97: 65, 98: 66, 99: 67})<br />\r\n\tboth of above commands make the same thing.<br />\r\n\tHere Unicode value&nbsp;of &quot;a&quot; is 97, &quot;b is 98&quot;, &quot;c&quot; is 99, &#39;A&#39; is 65, &#39;B&#39; is 66, &#39;C&#39; is 67<br />\r\n\tAs a result of we have dictionary argument for x parameter. If you want to trasnlate this &quot;letter&quot;, you should translate method.&nbsp;&nbsp;&nbsp;</li>\r\n</ul>\r\n\r\n<p>If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y.</p>\r\n\r\n<ul>\r\n\t<li>str.maketrans(&quot;abc&quot;, &quot;ABC&quot;)<br />\r\n\tx = &quot;abc&quot;<br />\r\n\ty = &quot;ABC&quot;</li>\r\n</ul>\r\n\r\n<p>If there is a third argument, it must be a string, whose characters will be mapped to None in the result.</p>\r\n\r\n<ul>\r\n\t<li>str.maketrans(&quot;abc&quot;, &quot;ABC&quot;, &quot;def&quot;)<br />\r\n\tx = &quot;abc&quot;<br />\r\n\ty = &quot;ABC&quot;<br />\r\n\tz = &quot;def&quot;</li>\r\n</ul>\r\n\r\n<p>Finally after this three condition, we have a dict like this :&nbsp;{97: 65, 98: 66, 99: 67} Every&nbsp;number has a&nbsp;chracater like &quot;a&quot;, &quot;A&quot; ...</p>\r\n\r\n<p><strong>Note:</strong> So In order to translate as regard as the dictionary, we need translate() method.&nbsp;</p>\r\n\r\n<p><strong>translate</strong></p>\r\n\r\n<p>Return a copy of the string S in which each character has been mapped through the given translation table. The table must implement lookup/indexing&nbsp;for instance&nbsp;a dictionary or list, mapping Unicode ordinals to Unicode ordinals, strings, or None.</p>\r\n\r\n<p>str.translate(table) -&gt; str</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example1:&nbsp;To convert from &quot;a&quot; to &quot;A&quot;, from &quot;b&quot; to &quot;B&quot;, from &quot;c&quot; to &quot;C&quot;</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; our_dictionary = str.maketrans({&quot;a&quot;:&#39;A&#39;, &#39;b&#39; :&#39;B&#39;, &#39;c&#39;:&#39;C&#39;})<br />\r\n&gt;&gt;&gt; our_dictionary<br />\r\n{97: &#39;A&#39;, 98: &#39;B&#39;, 99: &#39;C&#39;}<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.translate(our_dictionary)<br />\r\n&#39;BAnAnA&#39;<br />\r\n&gt;&gt;&gt; &quot;abcABC&quot;.translate(our_dictionary)<br />\r\n&#39;ABCABC&#39;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example2: Second way to&nbsp;convert from &quot;a&quot; to &quot;A&quot;, from &quot;b&quot; to &quot;B&quot;, from &quot;c&quot; to &quot;C&quot;</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; our_dict = str.maketrans(&quot;abc&quot;, &quot;ABC&quot;)<br />\r\n&gt;&gt;&gt; our_dict<br />\r\n{97: 65, 98: 66, 99: 67}<br />\r\n&gt;&gt;&gt; &quot;banana&quot;.translate(our_dict)<br />\r\n&#39;BAnAnA&#39;<br />\r\n&gt;&gt;&gt; &quot;abcabccccaaa&quot;.translate(our_dict)<br />\r\n&#39;ABCABCCCCAAA&#39;</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Example3: to remove &quot;d&quot;, &quot;e&quot;, and &quot;f&quot;</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; our_dict = str.maketrans(&quot;abc&quot;, &quot;ABC&quot;,&quot;def&quot;)<br />\r\n&gt;&gt;&gt; &quot;abcdefghabcdefgdd&quot;.translate(our_dict)<br />\r\n&#39;ABCghABCg&#39;<br />\r\n&gt;&gt;&gt; &quot;fedfeddef&quot;.translate(our_dict)<br />\r\n&#39;&#39;</p>\r\n\r\n<p>isalpha()</p>\r\n\r\n<p>Return True if all characters in S are alphabetic,&nbsp;False otherwise.</p>\r\n\r\n<p>str.isalpha() -&gt; bool&nbsp;-&gt; True or False</p>\r\n\r\n<p>Examples:</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;abcdefgh&quot;.isalpha()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;abc1&quot;.isalpha()<br />\r\nFalse</p>\r\n\r\n<p>isdigit()</p>\r\n\r\n<p>Return True if all characters in S are digits, otherwise False.</p>\r\n\r\n<p>str.isdigit() -&gt; bool</p>\r\n\r\n<p><span style="color:#e74c3c">Examples:</span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;123456789&quot;.isdigit()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;123a&quot;.isdigit()<br />\r\nFalse</p>\r\n\r\n<p>isalnum()</p>\r\n\r\n<p>Return True if all characters in a string&nbsp;are alphanumeric, otherwise False.</p>\r\n\r\n<p>str.isalnum() -&gt; bool</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;121abc&quot;.isalnum()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;121&quot;.isalnum()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;abc&quot;.isalnum()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;123ab-+&quot;.isalnum()<br />\r\nFalse</p>\r\n\r\n<p>isdecimal()</p>\r\n\r\n<p>Return True if there are only decimal characters in a string, False otherwise.</p>\r\n\r\n<p>str.isdecimal() -&gt; bool</p>\r\n\r\n<p><span style="color:#e74c3c"><strong>Examples:</strong></span></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;1234&quot;.isdecimal()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;1234.4&quot;.isdecimal()<br />\r\nFalse</p>\r\n\r\n<p>isidentifier()</p>\r\n\r\n<p>Return True if S is a valid identifier according to the language definition.</p>\r\n\r\n<p>Remember variables rules, too.</p>\r\n\r\n<p>str.isidentifier() -&gt; bool</p>\r\n\r\n<p>Examples:</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;1aa&quot;.isidentifier()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;-ab&quot;.isidentifier()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;string&quot;.isidentifier()<br />\r\nTrue</p>\r\n\r\n<p><strong>Note:</strong> Use keyword.iskeyword() to test for reserved identifiers such as &quot;def&quot; and &quot;class&quot;.</p>\r\n\r\n<p>isnumeric()</p>\r\n\r\n<p>Return True if there are only numeric characters in a string, False otherwise.</p>\r\n\r\n<p>str.isnumeric() -&gt; bool</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;123e&quot;.isnumeric()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;1234.6&quot;.isnumeric()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;12345&quot;.isnumeric()<br />\r\nTrue</p>\r\n\r\n<p>isspace()</p>\r\n\r\n<p>Return True if all characters in a string&nbsp;are whitespace and there is at least one character in a string, False otherwise.</p>\r\n\r\n<p>str.isspace() -&gt; bool</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot; &nbsp; &nbsp; &nbsp;&quot;.isspace()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot; &quot;.isspace()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot; asd &nbsp; &quot;.isspace()<br />\r\nFalse</p>\r\n\r\n<p>isprintable()</p>\r\n\r\n<p>Return True if all characters in a string are considered printable in repr() or a string&nbsp;is empty, False otherwise.</p>\r\n\r\n<p>non-printing characters are \\n, \\t, ...</p>\r\n\r\n<p>printing-characters are a, b, c, ...</p>\r\n\r\n<p><strong><span style="color:#e74c3c">Examples:</span></strong></p>\r\n\r\n<p>&gt;&gt;&gt; &quot;abcdef&quot;.isprintable()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;abc*n&quot;.isprintable()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;abc\\n&quot;.isprintable()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;&quot;.isprintable()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot; &quot;.isprintable()<br />\r\nTrue<br />\r\n&gt;&gt;&gt; &quot;\\r&quot;.isprintable()<br />\r\nFalse<br />\r\n&gt;&gt;&gt; &quot;\\t&quot;.isprintable()<br />\r\nFalse</p>', '<h4>strip</h4>\r\n\r\n<p>Return a copy of the string S with leading and trailing whitespace removed. If chars is given and not None, remove characters in chars instead.</p>\r\n\r\n<p>str.strip(chars) -&gt; str</p>\r\n\r\n<p>&lsquo; &lsquo;&nbsp; and \\t , \\n , \\r , \\v , \\f escape sequence are removed.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">window</span>&quot;.strip(&quot;<span style="color:#e67e22;">w</span>&quot;)<br />\r\n&#39;indo&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot; <span style="color:#e67e22;">window </span>&quot;.strip()<br />\r\n&#39;window&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">\\nwindow\\r</span>&quot;.strip()<br />\r\n&#39;window&#39;</tt></p>\r\n</div>\r\n\r\n<h4>rstrip&nbsp;</h4>\r\n\r\n<p>Return a copy of the string S with trailing(right) whitespace removed.</p>\r\n\r\n<p>str.rstrip(chars) -&gt; str</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">window</span>&quot;.rstrip(&quot;<span style="color:#e67e22;">w</span>&quot;)<br />\r\n&#39;windo&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot; <span style="color:#e67e22;">window </span>&quot;.rstrip()<br />\r\n&#39; window&#39;</tt></p>\r\n</div>\r\n\r\n<h4>lstrip</h4>\r\n\r\n<p>Return a copy of the string S with leading whitespace removed.</p>\r\n\r\n<p>str.lstrip(chars) -&gt; str</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">window</span>&quot;.lstrip(&quot;<span style="color:#e67e22;">w</span>&quot;)<br />\r\n&#39;indow&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot; <span style="color:#e67e22;">window </span>&quot;.lstrip()<br />\r\n&#39;window &#39;</tt></p>\r\n</div>\r\n\r\n<h4>join()</h4>\r\n\r\n<p>Return a string which is the concatenation of the strings in the iterable. &nbsp;The separator between elements is string.</p>\r\n\r\n<p>str.join(iterable) -&gt; str</p>\r\n\r\n<p><strong>iterable :</strong>&nbsp;it can be list, tuple, ...</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">.</span>&quot;.join([&quot;<span style="color:#e67e22;">www</span>&quot;, &quot;<span style="color:#e67e22;">google</span>&quot;, &quot;<span style="color:#e67e22;">com</span>&quot;])<br />\r\n&#39;www.google.com&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">.</span>&quot;.join((&quot;<span style="color:#e67e22;">www</span>&quot;, &quot;<span style="color:#e67e22;">google</span>&quot;, &quot;<span style="color:#e67e22;">com</span>&quot;))<br />\r\n&#39;www.google.com&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">-</span>&quot;.join(&quot;<span style="color:#e67e22;">abcdefgh</span>&quot;)<br />\r\n&#39;a-b-c-d-e-f-g-h&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot; &quot;.join([&quot;<span style="color:#e67e22;">Life</span>&quot;, &quot;<span style="color:#e67e22;">is</span>&quot;, &quot;<span style="color:#e67e22;">beautiful</span>&quot;])<br />\r\n&#39;Life is beautiful&#39;</tt></p>\r\n</div>\r\n\r\n<h4>count()</h4>\r\n\r\n<p>Return the number of non-overlapping occurrences of character(s)&nbsp;in string.</p>\r\n\r\n<p>str.count(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong>&nbsp;optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.count(&quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\n3</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.count(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">2</span>)<br />\r\n2</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.count(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">4</span>)<br />\r\n1</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.count(&quot;<span style="color:#e67e22;">ba</span>&quot;)<br />\r\n1</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.count(&quot;<span style="color:#e67e22;">ba</span>&quot;, <span style="color:#1abc9c;">3</span>)<br />\r\n0</tt></p>\r\n</div>\r\n\r\n<h4>index()</h4>\r\n\r\n<p>Show number of the first index for substring.&nbsp;Like S.find() but raise ValueError when the substring is not found.</p>\r\n\r\n<p>str.index(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong>&nbsp;optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.index(&quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\n1</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.index(&quot;<span style="color:#e67e22;">b</span>&quot;)<br />\r\n0</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.index(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">2</span>)<br />\r\n3</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.index(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">6</span>)<br />\r\n5</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.index(&quot;<span style="color:#e67e22;">w</span>&quot;)<br />\r\n<span style="color:#e74c3c;">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#47&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; &quot;banana&quot;.index(&quot;w&quot;)<br />\r\nValueError: substring not found</span></tt></p>\r\n</div>\r\n\r\n<h4>rindex</h4>\r\n\r\n<p>show number of the first index for substring reference to the end of a string.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.rindex(&quot;<span style="color:#e67e22;">b</span>&quot;)<br />\r\n0</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.rindex(&quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\n5</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.rindex(&quot;<span style="color:#e67e22;">n</span>&quot;)<br />\r\n4</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.rindex(&quot;<span style="color:#e67e22;">ba</span>&quot;)<br />\r\n0</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.rindex(&quot;<span style="color:#e67e22;">na</span>&quot;)<br />\r\n4</tt></p>\r\n</div>\r\n\r\n<h4>find()</h4>\r\n\r\n<p>Return the lowest index in a string where substring sub is found.</p>\r\n\r\n<p>Return -1 on failure.(not founded situation)</p>\r\n\r\n<p>str.rfind(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong>&nbsp;optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.find(&quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\n1</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.find(&quot;<span style="color:#e67e22;">ban</span>&quot;)<br />\r\n0</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.find(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">2</span>)<br />\r\n3</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.find(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">6</span>)<br />\r\n3</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.find(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">6</span>)<br />\r\n5</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.find(&quot;<span style="color:#1abc9c;">T</span>&quot;)<br />\r\n-1</tt></p>\r\n</div>\r\n\r\n<h4>rfind</h4>\r\n\r\n<p>Return the lowest index in a string where substring sub is found from the ending of string.&nbsp;&nbsp;</p>\r\n\r\n<p>Return -1 on failure.(not founded situation)</p>\r\n\r\n<p>str.find(sub, start, end) -&gt; int</p>\r\n\r\n<p><strong>sub :</strong>&nbsp;substring<br />\r\n<strong>start :</strong>&nbsp;optional argument to start point<br />\r\n<strong>end :</strong>&nbsp; optional argument to end point</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.rfind(&quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\n5</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.rfind(&quot;<span style="color:#e67e22;">an</span>&quot;)<br />\r\n3</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.rfind(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">2</span>)<br />\r\n5</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.rfind(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">4</span>)<br />\r\n3</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.rfind(&quot;<span style="color:#e67e22;">t</span>&quot;)<br />\r\n-1</tt></p>\r\n</div>\r\n\r\n<h4>center()</h4>\r\n\r\n<p>Return string which is&nbsp;&nbsp;centered in a string of length width. Padding is done using the specified fill character (default is a space)</p>\r\n\r\n<p>str.center(width,&nbsp;fillchar) -&gt; str</p>\r\n\r\n<p><strong>width :</strong>&nbsp;length like 5 , 6, ...<br />\r\n<strong>fillchar :</strong>&nbsp;optional argument to padding whose default is space</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.center(6)<br />\r\n&#39;python&#39;<br />\r\n&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.center(11)<br />\r\n&#39; &nbsp; python &nbsp;&#39;<br />\r\n&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.center(21, &quot;*&quot;)<br />\r\n&#39;********python*******&#39;</tt></p>\r\n</div>\r\n\r\n<p>If you want see any change with center method, your length argument should be bigger than your length of a string. So&nbsp;&quot;python&quot;.center(6) command show any change.</p>\r\n\r\n<h4>rjust()</h4>\r\n\r\n<p>Return string&nbsp;right-justified in a string of length width. Padding is done using the specified fill character (default is a space).</p>\r\n\r\n<p>str.rjust(width,&nbsp;fillchar) -&gt; str</p>\r\n\r\n<p><strong>width :</strong>&nbsp;length like 5 , 6, ...<br />\r\n<strong>fillchar :</strong>&nbsp;optional argument to padding its&nbsp;default is space</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.rjust(<span style="color:#1abc9c;">6</span>)<br />\r\n&#39;python&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.rjust(<span style="color:#1abc9c;">7</span>)<br />\r\n&#39; python&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.rjust(<span style="color:#1abc9c;">8</span>)<br />\r\n&#39; &nbsp;python&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.rjust(<span style="color:#1abc9c;">11</span>, &quot;<span style="color:#e67e22;">-</span>&quot;)<br />\r\n&#39;-----python&#39;</tt></p>\r\n</div>\r\n\r\n<h4>ljust</h4>\r\n\r\n<p>Return S left-justified in a string of length width. Padding is done using the specified fill character (default is a space).</p>\r\n\r\n<div class="codes">\r\n<p>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.ljust(<span style="color:#1abc9c;">6</span>)<br />\r\n&#39;python&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.ljust(<span style="color:#1abc9c;">10</span>)<br />\r\n&#39;python &nbsp; &nbsp;&#39;</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.ljust(<span style="color:#1abc9c;">15</span>, &quot;<span style="color:#e67e22;">?</span>&quot;)<br />\r\n&#39;python?????????&#39;</p>\r\n</div>\r\n\r\n<p>If you want see any change with rjust and ljust&nbsp;method, your the length argument should be bigger than the length of a string. So&nbsp;&quot;python&quot;.rjust6) command show any change.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.rjust(<span style="color:#1abc9c;">6</span>)<br />\r\n&#39;python&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.ljust(<span style="color:#1abc9c;">6</span>)<br />\r\n&#39;python&#39;</tt></p>\r\n</div>\r\n\r\n<h4>zfill()</h4>\r\n\r\n<p>Pad a numeric string&nbsp;with zeros on the left, to fill a field of the specified width. The string is never truncated.</p>\r\n\r\n<p>string.zfill(width) -&gt; str</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.zfill(<span style="color:#1abc9c;">7</span>)<br />\r\n&#39;0python&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.zfill(<span style="color:#1abc9c;">11</span>)<br />\r\n&#39;00000python&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.zfill(<span style="color:#1abc9c;">5</span>)<br />\r\n&#39;python&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">python</span>&quot;.zfill(<span style="color:#1abc9c;">6</span>)<br />\r\n&#39;python&#39;</tt></p>\r\n\r\n<p>If you want see any change with zfill&nbsp;method, your the length argument should be bigger than the length of a string.</p>\r\n</div>\r\n\r\n<h4>partition()</h4>\r\n\r\n<p>Search for the separator sep in a string, and return the part before it, the separator itself, and the part after it. &nbsp;If the separator is not found, return a string&nbsp;and two empty strings.</p>\r\n\r\n<p>str.partition(sep) -&gt; (head, sep, tail)&nbsp;-&gt; tuple</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">computer</span>&quot;.partition(&quot;<span style="color:#e67e22;">pu</span>&quot;)<br />\r\n(&#39;com&#39;, &#39;pu&#39;, &#39;ter&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">computer</span>&quot;.partition(&quot;<span style="color:#e67e22;">c</span>&quot;)<br />\r\n(&#39;&#39;, &#39;c&#39;, &#39;omputer&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">computer</span>&quot;.partition(&quot;<span style="color:#e67e22;">r</span>&quot;)<br />\r\n(&#39;compute&#39;, &#39;r&#39;, &#39;&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">computer</span>&quot;.partition(&quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\n(&#39;computer&#39;, &#39;&#39;, &#39;&#39;)</tt></p>\r\n</div>\r\n\r\n<h4>rpartition</h4>\r\n\r\n<p>Search for the separator sep in a string, starting at the end of string, and return the part before it, the separator itself, and the part after it. &nbsp;If the separator is not found, return two empty strings.</p>\r\n\r\n<p>str.rpartition(sep) -&gt; (head, sep, tail)&nbsp;-&gt; tuple</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">computer</span>&quot;.rpartition(&quot;<span style="color:#e67e22;">com</span>&quot;)<br />\r\n(&#39;&#39;, &#39;com&#39;, &#39;puter&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">computer</span>&quot;.rpartition(&quot;<span style="color:#e67e22;">ter</span>&quot;)<br />\r\n(&#39;compu&#39;, &#39;ter&#39;, &#39;&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.rpartition(&quot;<span style="color:#e67e22;">na</span>&quot;)<br />\r\n(&#39;bana&#39;, &#39;na&#39;, &#39;&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.partition(&quot;<span style="color:#e67e22;">na</span>&quot;)<br />\r\n(&#39;ba&#39;, &#39;na&#39;, &#39;na&#39;)</tt></p>\r\n</div>', '<h4>encode()</h4>\r\n\r\n<p>Encode string&nbsp;using the codec registered for encoding. Default encoding is &#39;utf-8&#39;. errors may be given to set a different error handling scheme. Default is &#39;strict&#39; meaning that encoding errors raise a UnicodeEncodeError. Other possible values are &#39;ignore&#39;, &#39;replace&#39; and &#39;xmlcharrefreplace&#39; as well as any other name registered with codecs.register_error that can handle UnicodeEncodeErrors.</p>\r\n\r\n<p>string.encode(encoding=&#39;utf-8&#39;, errors=&#39;strict&#39;) -&gt; bytes</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.encode(&quot;<span style="color:#e67e22;">ascii</span>&quot;)<br />\r\nb&#39;banana&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">&ccedil;ilek</span>&quot;.encode(&quot;<span style="color:#e67e22;">cp1254</span>&quot;)<br />\r\nb&#39;\\xe7ilek&#39;</tt></p>\r\n</div>\r\n\r\n<p>Not to have an error, you should the error parameters(&quot;replac&quot;e , &quot;ignore&quot;, &quot;xmlcharrefreplace&quot;)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">&ccedil;ilek</span>&quot;.encode(&quot;<span style="color:#e67e22;">ascii</span>&quot;)<br />\r\n<span style="color:#e74c3c;">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#32&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; &quot;&ccedil;ilek&quot;.encode(&quot;ascii&quot;)<br />\r\nUnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character &#39;\\xe7&#39; in position 0: ordinal not in range(128)</span></tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">&ccedil;ilek</span>&quot;.encode(&quot;<span style="color:#e67e22;">ascii</span>&quot;, &quot;<span style="color:#e67e22;">replace</span>&quot;)<br />\r\nb&#39;?ilek&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">&ccedil;ilek</span>&quot;.encode(&quot;<span style="color:#e67e22;">ascii</span>&quot;, &quot;<span style="color:#e67e22;">ignore</span>&quot;)<br />\r\nb&#39;ilek&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">&ccedil;ilek</span>&quot;.encode(&quot;<span style="color:#e67e22;">ascii</span>&quot;, &quot;<span style="color:#e67e22;">xmlcharrefreplace</span>&quot;)<br />\r\nb&#39;&amp;#231;ilek&#39;</tt></p>\r\n</div>\r\n\r\n<h4>expandtabs()</h4>\r\n\r\n<p>Return a copy of S where all tab characters are expanded using spaces. If tabsize is not given, a tab size of 8 characters is assumed.</p>\r\n\r\n<p>str.expandtabs(tabsize=8) -&gt; str</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">a\\tb\\t</span>&quot;.expandtabs()<br />\r\n&#39;a &nbsp; &nbsp; &nbsp; b &nbsp; &nbsp; &nbsp; &#39;<br />\r\n&gt;&gt;&gt; &quot;<span style="color:#e67e22;">a\\tb\\t</span>&quot;.expandtabs(4)<br />\r\n&#39;a &nbsp; b &nbsp; &#39;</tt></p>\r\n</div>\r\n\r\n<h4>str.maketrans()</h4>\r\n\r\n<p>Return a translation table usable for str.translate().</p>\r\n\r\n<p>str.maketrans(x, y=None, z=None)&nbsp;&rArr; dict</p>\r\n\r\n<p>If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters to Unicode ordinals, strings or None. Character keys will be then converted to ordinals.</p>\r\n\r\n<ul>\r\n\t<li>str.maketrans({&quot;a&quot;:&#39;A&#39;, &#39;b&#39; :&#39;B&#39;, &#39;c&#39;:&#39;C&#39;})&nbsp;</li>\r\n\t<li>str.maketrans({97: 65, 98: 66, 99: 67})<br />\r\n\tboth of above commands make the same thing.<br />\r\n\tHere Unicode value&nbsp;of &quot;a&quot; is 97, &quot;b is 98&quot;, &quot;c&quot; is 99, &#39;A&#39; is 65, &#39;B&#39; is 66, &#39;C&#39; is 67<br />\r\n\tAs a result of we have dictionary argument for x parameter. If you want to translate this &quot;letter&quot;, you should translate method.&nbsp;&nbsp;&nbsp;</li>\r\n</ul>\r\n\r\n<p>If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y.</p>\r\n\r\n<ul>\r\n\t<li>str.maketrans(&quot;abc&quot;, &quot;ABC&quot;)<br />\r\n\tx = &quot;abc&quot;<br />\r\n\ty = &quot;ABC&quot;</li>\r\n</ul>\r\n\r\n<p>If there is a third argument, it must be a string, whose characters will be mapped to None in the result.</p>\r\n\r\n<ul>\r\n\t<li>str.maketrans(&quot;abc&quot;, &quot;ABC&quot;, &quot;def&quot;)<br />\r\n\tx = &quot;abc&quot;<br />\r\n\ty = &quot;ABC&quot;<br />\r\n\tz = &quot;def&quot;</li>\r\n</ul>\r\n\r\n<p>Finally after this three condition, we have a dict like this :&nbsp;{97: 65, 98: 66, 99: 67} Every&nbsp;number has a&nbsp;chracater like &quot;a&quot;, &quot;A&quot; ...</p>\r\n\r\n<p>So In order to translate as regard as the dictionary, we need translate() method.&nbsp;</p>\r\n\r\n<h4>translate</h4>\r\n\r\n<p>Return a copy of the string S in which each character has been mapped through the given translation table. The table must implement lookup/indexing&nbsp;for instance&nbsp;a dictionary or list, mapping Unicode ordinals to Unicode ordinals, strings, or None.</p>\r\n\r\n<p>str.translate(table) -&gt; str</p>\r\n\r\n<p>To convert from &quot;a&quot; to &quot;A&quot;, from &quot;b&quot; to &quot;B&quot;, from &quot;c&quot; to &quot;C&quot;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; our_dictionary = str.maketrans({&quot;<span style="color:#e67e22;">a</span>&quot;:&#39;<span style="color:#e67e22;">A</span>&#39;, &#39;<span style="color:#e67e22;">b</span>&#39; :&#39;<span style="color:#e67e22;">B</span>&#39;, &#39;<span style="color:#e67e22;">c</span>&#39;:&#39;<span style="color:#e67e22;">C</span>&#39;})</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; our_dictionary<br />\r\n{97: &#39;A&#39;, 98: &#39;B&#39;, 99: &#39;C&#39;}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.translate(our_dictionary)<br />\r\n&#39;BAnAnA&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;abcABC&quot;.translate(our_dictionary)<br />\r\n&#39;ABCABC&#39;</tt></p>\r\n</div>\r\n\r\n<p>Second way to&nbsp;convert from &quot;a&quot; to &quot;A&quot;, from &quot;b&quot; to &quot;B&quot;, from &quot;c&quot; to &quot;C&quot; like above it.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; our_dict = str.maketrans(&quot;<span style="color:#e67e22;">abc</span>&quot;, &quot;<span style="color:#e67e22;">ABC</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; our_dict<br />\r\n{97: 65, 98: 66, 99: 67}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">banana</span>&quot;.translate(our_dict)<br />\r\n&#39;BAnAnA&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">abcabccccaaa</span>&quot;.translate(our_dict)<br />\r\n&#39;ABCABCCCCAAA&#39;</tt></p>\r\n</div>\r\n\r\n<p>To remove &quot;d&quot;, &quot;e&quot;, and &quot;f&quot;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; our_dict = str.maketrans(&quot;<span style="color:#e67e22;">abc</span>&quot;, &quot;<span style="color:#e67e22;">ABC</span>&quot;, &quot;<span style="color:#e67e22;">def</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">abcdefghabcdefgdd</span>&quot;.translate(our_dict)<br />\r\n&#39;ABCghABCg&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">fedfeddef</span>&quot;.translate(our_dict)<br />\r\n&#39;&#39;</tt></p>\r\n</div>\r\n\r\n<h4>isalpha()</h4>\r\n\r\n<p>Return True if all characters in S are alphabetic,&nbsp;False otherwise.</p>\r\n\r\n<p>str.isalpha() -&gt; bool&nbsp;-&gt; True or False</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">abcdefgh</span>&quot;.isalpha()<br />\r\nTrue</p>\r\n\r\n<p>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">abc1</span>&quot;.isalpha()<br />\r\nFalse</p>\r\n\r\n<h4>isdigit()</h4>\r\n\r\n<p>Return True if all characters in S are digits, otherwise False.</p>\r\n\r\n<p>str.isdigit() -&gt; bool</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">123456789</span>&quot;.isdigit()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">123a</span>&quot;.isdigit()<br />\r\nFalse</tt></p>\r\n</div>\r\n\r\n<h4>isalnum()</h4>\r\n\r\n<p>Return True if all characters in a string&nbsp;are alphanumeric, otherwise False.</p>\r\n\r\n<p>str.isalnum() -&gt; bool</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">121abc</span>&quot;.isalnum()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">121</span>&quot;.isalnum()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">abc</span>&quot;.isalnum()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">123ab-+</span>&quot;.isalnum()<br />\r\nFalse</tt></p>\r\n</div>\r\n\r\n<h4>isdecimal()</h4>\r\n\r\n<p>Return True if there are only decimal characters in a string, False otherwise.</p>\r\n\r\n<p>str.isdecimal() -&gt; bool</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">1234</span>&quot;.isdecimal()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">1234.4</span>&quot;.isdecimal()<br />\r\nFalse</tt></p>\r\n</div>\r\n\r\n<h4>isidentifier()</h4>\r\n\r\n<p>Return True if S is a valid identifier according to the language definition.</p>\r\n\r\n<p>Remember variables rules, too.</p>\r\n\r\n<p>str.isidentifier() -&gt; bool</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">1aa</span>&quot;.isidentifier()<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">-ab</span>&quot;.isidentifier()<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">string</span>&quot;.isidentifier()<br />\r\nTrue</tt></p>\r\n</div>\r\n\r\n<p>We can use keyword.iskeyword() to test for reserved identifiers such as &quot;def&quot; and &quot;class&quot;.</p>\r\n\r\n<h4>isnumeric()</h4>\r\n\r\n<p>Return True if there are only numeric characters in a string, False otherwise.</p>\r\n\r\n<p>str.isnumeric() -&gt; bool</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">123e</span>&quot;.isnumeric()<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">1234.6</span>&quot;.isnumeric()<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">12345</span>&quot;.isnumeric()<br />\r\nTrue</tt></p>\r\n</div>\r\n\r\n<h4>isspace()</h4>\r\n\r\n<p>Return True if all characters in a string&nbsp;are whitespace and there is at least one character in a string, False otherwise.</p>\r\n\r\n<p>str.isspace() -&gt; bool</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot; &nbsp; &nbsp; &nbsp;&quot;.isspace()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot; &quot;.isspace()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot; <span style="color:#e67e22;">asd &nbsp; </span>&quot;.isspace()<br />\r\nFalse</tt></p>\r\n</div>\r\n\r\n<h4>isprintable()</h4>\r\n\r\n<p>Return True if all characters in a string are considered printable in repr() or a string&nbsp;is empty, False otherwise.</p>\r\n\r\n<p>non-printing characters are \\n, \\t, ...</p>\r\n\r\n<p>printing-characters are a, b, c, ...</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">abcdef</span>&quot;.isprintable()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">abc*n</span>&quot;.isprintable()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">abc\\n</span>&quot;.isprintable()<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;&quot;.isprintable()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot; &quot;.isprintable()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">\\r</span>&quot;.isprintable()<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">\\t</span>&quot;.isprintable()</tt><br />\r\n<tt>False</tt></p>\r\n</div>', '<p>Return a formatted version of a string, using substitutions from args and kwargs. The substitutions are identified by braces (&#39;{&#39; and &#39;}&#39;).</p>\r\n\r\n<p>str.format(*args, **kwargs) -&gt; str</p>\r\n\r\n<p><strong>args : &quot;</strong>{} and {}&quot;.format(&quot;Tom&quot;, &quot;Jerry&quot;)<br />\r\n<strong>kwargs :&nbsp;&nbsp;</strong>&quot;{} and {}&quot;.format(a = &quot;Tom&quot;, b = &quot;Jerry&quot;)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{} and {}</span>&quot;.format(&quot;<span style="color:#e67e22;">Tom</span>&quot;, &quot;<span style="color:#e67e22;">Jerry</span>&quot;)<br />\r\n&#39;Tom and Jerry&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{a} and {b}</span>&quot;.format(a = &quot;<span style="color:#e67e22;">Tom</span>&quot;, b= &quot;<span style="color:#e67e22;">Jerry</span>&quot;)<br />\r\n&#39;Tom and Jerry&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{} and {a}</span>&quot;.format(&quot;<span style="color:#e67e22;">Tom</span>&quot;, a = &quot;<span style="color:#e67e22;">Jerry</span>&quot;)<br />\r\n&#39;Tom and Jerry&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{a} and {}</span>&quot;.format(&quot;<span style="color:#e67e22;">Tom</span>&quot;, a = &quot;<span style="color:#e67e22;">Jerry</span>&quot;)<br />\r\n&#39;Jerry and Tom&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{} and {}</span>&quot;.format(*&quot;<span style="color:#e67e22;">ab</span>&quot;)<br />\r\n&#39;a and b&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; array = (&quot;<span style="color:#e67e22;">Tom</span>&quot;, &quot;<span style="color:#e67e22;">Jerry</span>&quot;)<br />\r\n&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{} and {}</span>&quot;.format(*array)<br />\r\n&#39;Tom and Jerry&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dictionary = {&quot;<span style="color:#e67e22;">a</span>&quot;:&quot;<span style="color:#e67e22;">Tom</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;:&quot;<span style="color:#e67e22;">Jerry</span>&quot;}<br />\r\n&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{a} and {b}</span>&quot;.format(**dictionary)<br />\r\n&#39;Tom and Jerry&#39;</tt></p>\r\n</div>\r\n\r\n<p>You can order args using integer numbers</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{0} and {1}</span>&quot;.format(&quot;Tom&quot;, &quot;Jerry&quot;)<br />\r\n&#39;Tom and Jerry&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{1} and {0}</span>&quot;.format(&quot;Tom&quot;, &quot;Jerry&quot;)<br />\r\n&#39;Jerry and Tom&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; array = (&quot;<span style="color:#e67e22;">Tom</span>&quot;, &quot;<span style="color:#e67e22;">Jerry</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{0[1]} and {0[0]}</span>&quot;.format(array)<br />\r\n&#39;Jerry and Tom&#39;</tt></p>\r\n</div>\r\n\r\n<h4>Characters of the format method</h4>\r\n\r\n<p>You can use some useful character(s) in {} after (:) character. Now let&#39;s us examine these.&nbsp;</p>\r\n\r\n<h4><strong>&gt;</strong>&nbsp;right-justified</h4>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:&gt;15}</span>&quot;.format(&quot;<span style="color:#e67e22;">python</span>&quot;)<br />\r\n&#39; &nbsp; &nbsp; &nbsp; &nbsp; python&#39;</tt></p>\r\n</div>\r\n\r\n<h4><strong>&lt;</strong>&nbsp;left-justified</h4>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:&lt;15}</span>&quot;.format(&quot;<span style="color:#e67e22;">python</span>&quot;)<br />\r\n&#39;python &nbsp; &nbsp; &nbsp; &nbsp; &#39;</tt></p>\r\n</div>\r\n\r\n<h4><strong>^</strong>&nbsp;center-justified</h4>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:^15}</span>&quot;.format(&quot;<span style="color:#e67e22;">python</span>&quot;)<br />\r\n&#39; &nbsp; &nbsp;python &nbsp; &nbsp; &#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:*^15}</span>&quot;.format(&quot;<span style="color:#e67e22;">python</span>&quot;)<br />\r\n&#39;****python*****&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:-^15}</span>&quot;.format(&quot;<span style="color:#e67e22;">python</span>&quot;)<br />\r\n&#39;----python-----&#39;</tt></p>\r\n</div>\r\n\r\n<h4><strong>s&nbsp;</strong>&nbsp;&nbsp;</h4>\r\n\r\n<p>String format. This is the default type for strings and may be omitted.&nbsp;<u>It is not useful!</u></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:s}</span>&quot;.format(&quot;<span style="color:#e67e22;">python</span>&quot;)<br />\r\n&#39;python&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:s}</span>&quot;.format(<span style="color:#1abc9c;">5</span>)<br />\r\n<span style="color:#e74c3c;">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#177&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; &quot;{:s}&quot;.format(5)<br />\r\nValueError: Unknown format code &#39;s&#39; for object of type &#39;int&#39;</span></tt></p>\r\n</div>\r\n\r\n<h4><strong>b</strong></h4>\r\n\r\n<p>Binary format. Outputs the number in base 2.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:b}</span>&quot;.format(<span style="color:#1abc9c;">65</span>)<br />\r\n&#39;1000001&#39;</tt></p>\r\n</div>\r\n\r\n<h4><strong>c</strong></h4>\r\n\r\n<p>Character. Converts the integer to the corresponding&nbsp;unicode character before printing.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:c}</span>&quot;.format(<span style="color:#1abc9c;">65</span>)<br />\r\n&#39;A&#39;</tt></p>\r\n</div>\r\n\r\n<h4><strong>d</strong></h4>\r\n\r\n<p>Decimal Integer. Outputs the number in base 10.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:d}</span>&quot;.format(<span style="color:#1abc9c;">15</span>)<br />\r\n&#39;15&#39;</tt></p>\r\n</div>\r\n\r\n<h4><strong>o</strong></h4>\r\n\r\n<p>Octal format. Outputs the number in base 8.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:o}</span>&quot;.format(<span style="color:#1abc9c;">65</span>)<br />\r\n&#39;101&#39;</tt></p>\r\n</div>\r\n\r\n<h4><strong>x</strong></h4>\r\n\r\n<p>Hex format. Outputs the number in base 16, using lower- case letters for the digits above 9.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:x}</span>&quot;.format(<span style="color:#1abc9c;">1205</span>)<br />\r\n&#39;4b5&#39;</tt></p>\r\n</div>\r\n\r\n<h4><strong>X</strong></h4>\r\n\r\n<p>Hex format. Outputs the number in base 16, using upper-case letters for the digits above 9.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:X}</span>&quot;.format(<span style="color:#1abc9c;">1205</span>)<br />\r\n&#39;4B5&#39;</tt></p>\r\n</div>\r\n\r\n<h4><strong>n</strong></h4>\r\n\r\n<p>Number. This is the same as &quot;&#39;d&#39;&quot;, except that it uses the&nbsp;current locale setting to insert the appropriate number separator characters.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">{:n}</span>&quot;.format(<span style="color:#1abc9c;">1205</span>)<br />\r\n&#39;1205&#39;</tt></p>\r\n</div>\r\n\r\n<h4><strong>, comma</strong></h4>\r\n\r\n<p>a thousands separator</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &#39;<span style="color:#e67e22;">{:,}</span>&#39;.format(<span style="color:#1abc9c;">1234567890</span>)<br />\r\n&#39;1,234,567,890&#39;</tt></p>\r\n</div>\r\n\r\n<h4><strong>% percentage</strong></h4>\r\n\r\n<p>Multiplies the number by 100 and displays in&nbsp;fixed (&quot;&#39;f&#39;&quot;) format, followed by a percent sign.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &#39;<span style="color:#e67e22;">{:.2%}</span>&#39;.format(<span style="color:#1abc9c;">1/3</span>)<br />\r\n&#39;33.33%&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &#39;<span style="color:#e67e22;">{:.5%}</span>&#39;.format(<span style="color:#1abc9c;">1/3</span>)<br />\r\n&#39;33.33333%&#39;</tt></p>\r\n</div>\r\n\r\n<p><strong>Using type-specific formatting:</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; import datetime</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; d = datetime.datetime(<span style="color:#1abc9c;">2012</span>, <span style="color:#1abc9c;">8</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">11</span>, <span style="color:#1abc9c;">14</span>, <span style="color:#1abc9c;">45</span>)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &#39;<span style="color:#e67e22;">{:%Y-%m-%d %H:%M:%S}</span>&#39;.format(d)<br />\r\n&#39;2012-08-03&nbsp;11:14:45&#39;</tt></p>\r\n</div>'], [77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], ['In this tutorial you can learn functions in Python.', 'In this tutorial you can learn how to create and call the functions in Python.', 'In this tutorial you can learn parameters and arguments terms of the functions in Python.', 'In this tutorial you can learn how to create a function without parameter in Python.', 'In this tutorial you can learn how to create and call a function has ordered parameters in Python.', 'In this tutorial you can learn how to create and call a function has unordered parameters in Python.', 'In this tutorial you can learn how to create and call a function has default arguments for parameters in Python.', 'In this tutorial you can learn how to create and call a function has infinite unordered parameters in Python.', 'In this tutorial you can learn how to create and call a function has infinite ordered parameters in Python.', 'In this tutorial you can learn strings in Python.', 'In this tutorial you can learn how to define the strings in Python.', 'In this tutorial you can learn how to access the elements of the strings in Python.', 'In this tutorial you can learn how to find length of a strings in Python.', 'In this tutorial you can learn how to use in and not in statements with the strings in Python.', 'In this tutorial you can learn how to use for loops in the strings in Python.', 'In this tutorial you can learn how to compare the strings in Python.', 'In this tutorial you can learn how to use multiplication operator with the strings in Python.', 'In this tutorial you can learn how to use plus operator with the strings in Python.', 'In this tutorial you can learn how to use slicing strings  in Python.', 'In this tutorial you can see the strings are immutable in Python.', 'In this tutorial you can learn how to use replace, split, rsplit, splitlines, lower, upper, isupper, islower, endswith, startswith, title, swapcase and casefold string methods in Python.', 'In this tutorial you can learn how to use strip, lstrip, rstrip,join, count, index, rindex, find, rfind, center, rjust, ljust, zfill, partition and rpartition string methods in Python.', 'In this tutorial you can learn how to use encode, expandtabs, maketrans, translate, isalpha, isdigit, isalnum, isdecimal, isidentifier, isnumeric, isspace and isprintable string methods in Python.', 'In this tutorial you can learn how to use format method in the strings in Python.'], ['functions in Python', 'Creating and calling functions', 'parameters and arguments in Python', 'Creating a function without parameter in Python', 'ordered parameters of the functions in Python', 'unordered parameters of the functions in Python', 'default arguments of the functions in Python', 'infinite unordered parameters of the functions in Python', 'infinite ordered parameters of the functions in Python', 'Strings', 'defining the strings', 'Accessing the elements of the strings', 'length of the strings', 'in and not in statements with the strings', 'for loops in the strings', 'Comparision of the strings', 'multiplication operator with the strings', 'plus operator with the strings', 'slicing strings', 'immutable strings in Python', 'replace, split, rsplit, splitlines, lower, upper, isupper, islower, endswith, startswith, title, swapcase and casefold', 'strip, lstrip, rstrip,join, count, index, rindex, find, rfind, center, rjust, ljust, zfill, partition and rpartition', 'encode, expandtabs, maketrans, translate, isalpha, isdigit, isalnum, isdecimal, isidentifier, isnumeric, isspace and isprintable', 'format method in strings'], ['Functions', 'Functions', 'Functions', 'Functions', 'Functions', 'Functions', 'Functions', 'Functions', 'Functions', 'Strings', 'Strings', 'Strings', 'Strings', 'Strings', 'Strings', 'Strings', 'Strings', 'Strings', 'Strings', 'Strings', 'Strings', 'Strings', 'Strings', 'Strings'], ['ana1', '-', '-', '-', '-', '-', '-', '-', '-', 'ana1', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']]