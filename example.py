def hepsi():
    return [['Lists', 'Define lists', 'Accessing list elements', 'Nested lists', 'Changing list elements', 'List slices', 'Addition and Multiplication operators with lists', 'Usage of "in" statement with lists', 'Length of a list', 'removing list elements', 'Copy a list', 'for loops in the lists', 'List Comprehensions', 'List methods', 'append()', 'extend()', 'insert()', 'remove()', 'reverse()', 'pop()', 'sort()', 'index()', 'count()', 'copy()', 'clear()', 'Tuples', 'Define tuples', 'Accessing tuple elements', 'Nested tuples', 'Tuple slices', 'Addition operators with tuples', 'Multiplication operators with tuples', 'Usage of "in" statement with tuples', 'Length of a tuple', 'Deleting a tuple', 'Tuple methods', 'Dictionaries', 'Define dictionaries', 'Accessing the elements of a dictionary', 'keys() and values() methods', 'Adding elements inside a dictionary', 'Dictionary structure', 'Changing the dictionaries', 'Dictionary Comprehensions', 'for loops in the dictionaries', 'Copy a dictionary', 'Dictionary Methods', 'keys()', 'values()', 'items()', 'get()', 'clear()', 'copy()', 'fromkeys()', 'pop()', 'popitem()', 'setdefault()', 'update()'], ['<p>The Lists are a datatype and They&nbsp;have a&nbsp;sequence of values&nbsp;like a string.&nbsp;The values of a string&nbsp;are characters; in a list, they can be any type. The values in list are called elements or sometimes items.</p>', '<p>There are two way to define a list. First one is using brackets, [] and second one is list() function.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt;&nbsp;[]<br />\r\n[]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">v</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;, <span style="color:#1abc9c;">25</span>, <span style="color:#1abc9c;">38</span>, &quot;<span style="color:#e67e22;">orange</span>&quot;]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;v&#39;, &#39;apple&#39;, 25, 38, &#39;orange&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; [&quot;<span style="color:#e67e22;">John</span>&quot;, <span style="color:#1abc9c;">23</span>, &quot;<span style="color:#e67e22;">banana</span>&quot;, &quot;<span style="color:#e67e22;">python</span>&quot;, [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>], (&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;)]<br />\r\n[&#39;John&#39;, 23, &#39;banana&#39;, &#39;python&#39;, [1, 2, 3], (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)]</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; list(&quot;<span style="color:#e67e22;">banana</span>&quot;)<br />\r\n[&#39;b&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;, &#39;n&#39;, &#39;a&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;list(range(<span style="color:#1abc9c;">10</span>))<br />\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;list()<br />\r\n[]</tt></p>\r\n</div>', '<p>You can use bracket [] and index number together. Such as first item is called [0], second one [1] so on...</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [<span style="color:#1abc9c;">12</span>, <span style="color:#1abc9c;">25</span>, <span style="color:#1abc9c;">45</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">0</span>]<br />\r\n12</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">1</span>]<br />\r\n25</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">2</span>]<br />\r\n45</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">-1</span>]<br />\r\n45</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">-2</span>]<br />\r\n25</tt></p>\r\n</div>', '<p>In order to access elements of a nested list, you can use one more bracket&nbsp; [].</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt;&nbsp;a = [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, [<span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;]]]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;a<br />\r\n[1, 2, [3, 4, 5, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;a[<span style="color:#1abc9c;">0</span>]<br />\r\n1</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;a[<span style="color:#1abc9c;">2</span>]<br />\r\n[3, 4, 5, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;a[<span style="color:#1abc9c;">2</span>][<span style="color:#1abc9c;">0</span>]<br />\r\n3</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;a[<span style="color:#1abc9c;">2</span>][<span style="color:#1abc9c;">3</span>]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;a[<span style="color:#1abc9c;">2</span>][<span style="color:#1abc9c;">3</span>][<span style="color:#1abc9c;">2</span>]<br />\r\n&#39;c&#39;</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; a = [[<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, [<span style="color:#1abc9c;">23</span>, <span style="color:#1abc9c;">45</span>, <span style="color:#1abc9c;">45</span>, [&quot;<span style="color:#e67e22;">target</span>&quot;]]]]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[0][3][3][0]<br />\r\n&#39;target&#39;</tt></p>\r\n</div>', '<p>Because list are mutable, you can change the lists using some methods or expressions. Please, remember&nbsp;the string are immutable.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">0</span>] = &quot;<span style="color:#e67e22;">one</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;one&#39;, 2, 3]</tt></p>\r\n</div>', '<p>To access slice of a list&nbsp;from *i* to *j*, You can use this expression:&nbsp;[ i : j ]</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">0</span>:<span style="color:#1abc9c;">2</span>]<br />\r\n[1, 2]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">3</span>:<span style="color:#1abc9c;">5</span>]<br />\r\n[4, 5]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">3</span>:<span style="color:#1abc9c;">5</span>] = (&quot;four&quot;, &quot;five&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[1, 2, 3, &#39;four&#39;, &#39;five&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">0</span>:<span style="color:#1abc9c;">2</span>] = &quot;onetwo&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;o&#39;, &#39;n&#39;, &#39;e&#39;, &#39;t&#39;, &#39;w&#39;, &#39;o&#39;, 3, &#39;four&#39;, &#39;five&#39;]</tt></p>\r\n</div>', '<h4>+ operator</h4>\r\n\r\n<p>The + operator concatenates lists:</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>] + [<span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>, <span style="color:#1abc9c;">7</span>]<br />\r\n[1, 2, 3, 4, 5, 6, 7]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>] + [&quot;<span style="color:#e67e22;">four</span>&quot;, &quot;<span style="color:#e67e22;">five</span>&quot;]<br />\r\n[1, 2, 3, &#39;four&#39;, &#39;five&#39;]</tt></p>\r\n</div>\r\n\r\n<h4>* operator</h4>\r\n\r\n<p>The * operator repeats a list a given number of times</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>] * <span style="color:#1abc9c;">3</span><br />\r\n[1, 2, 3, 1, 2, 3, 1, 2, 3]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>] * <span style="color:#1abc9c;">5</span><br />\r\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]</tt></p>\r\n</div>', '<p>Return True if there is,&nbsp;False otherwise</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; 1 in [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>]<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; 5 in [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>]<br />\r\nFalse</tt></p>\r\n\r\n<hr />\r\n<p><tt>my_list = [&quot;<span style="color:#e67e22;">one</span>&quot;, &quot;<span style="color:#e67e22;">two</span>&quot;, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>, &quot;<span style="color:#e67e22;">five</span>&quot;]<br />\r\nfor item in my_list:<br />\r\n&nbsp; &nbsp; print(item)</tt></p>\r\n\r\n<p><tt>one<br />\r\ntwo<br />\r\n3<br />\r\n4<br />\r\nfive</tt></p>\r\n</div>', '<p>Length of a list</p>\r\n\r\n<p>You can use the len() function</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; my_list = [<span style="color:#1abc9c;">1</span>,&nbsp; <span style="color:#1abc9c;">2</span>,&nbsp; <span style="color:#1abc9c;">3</span>,&nbsp; <span style="color:#1abc9c;">4</span>,&nbsp; <span style="color:#1abc9c;">5</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; len(my_list)<br />\r\n5</tt></p>\r\n</div>', '<p>To remove the elements of an list, you can use &quot;del&quot; statement</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;, &quot;<span style="color:#e67e22;">d</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; del a[<span style="color:#1abc9c;">0</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;<span style="color:#e67e22;">b</span>&#39;, &#39;<span style="color:#e67e22;">c</span>&#39;, &#39;<span style="color:#e67e22;">d</span>&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; del a[<span style="color:#1abc9c;">-2</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;b&#39;, &#39;d&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; del a[<span style="color:#1abc9c;">0</span>:<span style="color:#1abc9c;">2</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[]</tt></p>\r\n</div>\r\n\r\n<p>You can completely delete a list.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; b = [<span style="color:#1abc9c;">1 </span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; del b</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b<br />\r\n<span style="color:#e74c3c;">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#61&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; b<br />\r\nNameError: name &#39;b&#39; is not defined</span></tt></p>\r\n</div>', '<p>To copy a list, there are 4&nbsp;options.</p>\r\n\r\n<h4>1. list2 = list2</h4>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; list1 = [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list1 = list2</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list2 = list1</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list2<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</tt></p>\r\n</div>\r\n\r\n<p>If&nbsp;you change list1, you will see that you change list2, too and vice versa. If you don&#39;t want this, you should use other three&nbsp;options.</p>\r\n\r\n<p><strong>continue of the above example</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; list1[<span style="color:#1abc9c;">0</span>] = 1</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list1<br />\r\n[1, &#39;b&#39;, &#39;c&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list2<br />\r\n[1, &#39;b&#39;, &#39;c&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list2[<span style="color:#1abc9c;">1</span>] = 2</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list2<br />\r\n[1, 2, &#39;c&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list1<br />\r\n[1, 2, &#39;c&#39;]</tt></p>\r\n</div>\r\n\r\n<h4>2. list2 = list1[:]</h4>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = a[:]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b<br />\r\n[1, 2, 3]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">0</span>] = &quot;<span style="color:#e67e22;">one</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;one&#39;, 2, 3]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b<br />\r\n[1, 2, 3]</tt></p>\r\n</div>\r\n\r\n<h4>3. list() function: list2 = list(list1)</h4>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">one</span>&quot;, &quot;<span style="color:#e67e22;">two</span>&quot;, &quot;<span style="color:#e67e22;">three</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = list(a)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b<br />\r\n[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">0</span>] = <span style="color:#1abc9c;">1</span></tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[1, &#39;two&#39;, &#39;three&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b<br />\r\n[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]</tt></p>\r\n</div>\r\n\r\n<h4>4.&nbsp;liste2 = liste1.copy()</h4>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">banana</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;, &quot;<span style="color:#e67e22;">nut</span>&quot;, &quot;<span style="color:#e67e22;">flower</span>&quot;,&quot;<span style="color:#e67e22;">banana</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = a.copy()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b<br />\r\n[&#39;banana&#39;, &#39;apple&#39;, &#39;nut&#39;, &#39;flower&#39;, &#39;banana&#39;, &#39;apple&#39;, &#39;apple&#39;]</tt></p>\r\n</div>', '<p>We can reach list elements with for loops.</p>\r\n\r\n<div class="codes">\r\n<p><tt>my_list= [&quot;<span style="color:#e67e22;">one</span>&quot;, &quot;<span style="color:#e67e22;">two</span>&quot;, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>, &quot;<span style="color:#e67e22;">three</span>&quot;]<br />\r\nfor item in my_list:<br />\r\n&nbsp; &nbsp; print(item)</tt></p>\r\n\r\n<p><tt>one<br />\r\ntwo<br />\r\n3<br />\r\n4<br />\r\nthree</tt></p>\r\n</div>', '<p>you can use&nbsp;&quot;for&quot; statement to obtain a list. This comprehension&nbsp;is very useful and short.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; my_list = [i for i in range(<span style="color:#1abc9c;">10</span>)]<br />\r\n&gt;&gt;&gt; my_list<br />\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; my_list = [i for i in &quot;<span style="color:#e67e22;">abcdefgh</span>&quot;]<br />\r\n&gt;&gt;&gt; my_list<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;]</tt></p>\r\n</div>\r\n\r\n<p>Don&#39;t forget that you can use list(&quot;abcdefgh&quot;) but list comprhensions give you possibility to change item.</p>\r\n\r\n<p><strong>odd numbers in 0-9</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; odd_numbers = [i for i in range(<span style="color:#1abc9c;">10</span>) if i % <span style="color:#1abc9c;">2 </span>== <span style="color:#1abc9c;">1</span>]<br />\r\n&gt;&gt;&gt; odd_numbers<br />\r\n[1, 3, 5, 7, 9]</tt></p>\r\n</div>\r\n\r\n<p><strong>finding if &quot;cat&quot;, &quot;dog&quot; and &quot;fish&quot; words are in a string(&quot;the cats eat the smallfishes&quot;)</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; my_list = [i for i in (&quot;<span style="color:#e67e22;">cat</span>&quot;, &quot;<span style="color:#e67e22;">dog</span>&quot;, &quot;<span style="color:#e67e22;">fish</span>&quot;) if i in &quot;<span style="color:#e67e22;">the cats eat the smallfishes</span> &quot;]<br />\r\n&gt;&gt;&gt; my_list<br />\r\n[&#39;cat&#39;, &#39;fish&#39;]</tt></p>\r\n</div>', '<p>To list&nbsp;methods, you can use dir function</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dir(list)<br />\r\n[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, <strong>&#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;</strong>]</tt></p>\r\n</div>\r\n\r\n<p>&#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;&nbsp;are the most important ones. We will see them next lessons.</p>', '<p>It appends element&nbsp;to the end of a&nbsp;list.</p>\r\n\r\n<p>list.append(object)-&gt; None</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.append(<span style="color:#1abc9c;">4</span>)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[1, 2, 3, 4]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.append(&quot;<span style="color:#e67e22;">apple</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[1, 2, 3, 4, &#39;apple&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.append([&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;])<br />\r\n&gt;&gt;&gt; a<br />\r\n[1, 2, 3, 4, &#39;apple&#39;, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]</tt></p>\r\n</div>\r\n\r\n<p>Don&#39;t forget that append method takes only one argument.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a.append(&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">v</span>&quot;)<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#119&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; a.append(&quot;a&quot;, &quot;b&quot;, &quot;v&quot;)<br />\r\nTypeError: append() takes exactly one argument (3 given)</span></tt></p>\r\n</div>', '<p>It extends list by appending elements from the iterable.</p>\r\n\r\n<p>list.extend(iterable) -&gt; None</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.extend(&quot;<span style="color:#e67e22;">abc</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</tt></p>\r\n\r\n<hr />\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">A</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.extend(&quot;<span style="color:#e67e22;">bcdefg</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;A&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;]</tt></p>\r\n</div>\r\n\r\n<p>Please, be careful about difference between append and extend.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.append(b)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[1, 2, 3, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]</tt></p>\r\n</div>', '<p>It inserts object before index.</p>\r\n\r\n<p>list.insert(index, object)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;, &quot;<span style="color:#e67e22;">d</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.insert(<span style="color:#1abc9c;">1</span>, &quot;<span style="color:#e67e22;">b</span>&quot;)<br />\r\n&gt;&gt;&gt; a<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.insert(<span style="color:#1abc9c;">2</span>, [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;a&#39;, &#39;b&#39;, [1, 2, 3], &#39;c&#39;, &#39;d&#39;]</tt></p>\r\n</div>', '<p>It removes first occurrence of value. Raises ValueError if the value is not present.</p>\r\n\r\n<p>list.remove(value) -&gt; None</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, <span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.remove(&quot;<span style="color:#e67e22;">b</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.remove(<span style="color:#1abc9c;">2</span>)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;a&#39;, 1, 3]</tt></p>\r\n</div>', '<p>It reverse in place.</p>\r\n\r\n<p>list.reverse()</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.reverse()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[5, 4, 3, 2, 1]</tt></p>\r\n</div>\r\n\r\n<p>You can reverse using slice method or reversed() function, too.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[::<span style="color:#1abc9c;">-1</span>]<br />\r\n[5, 4, 3, 2, 1]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[::<span style="color:#1abc9c;">-2</span>]<br />\r\n[5, 3, 1]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; print(*reversed(a))<br />\r\n5 4 3 2 1</tt></p>\r\n</div>', '<p>remove and return item at index (default last). Raises IndexError if list is empty or index is out of range.</p>\r\n\r\n<p>list.pop(index) -&gt; item</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; my_list = [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;, &quot;<span style="color:#e67e22;">d</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; my_list.pop(<span style="color:#1abc9c;">1</span>)<br />\r\n&#39;b&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; my_list<br />\r\n[&#39;a&#39;, &#39;c&#39;, &#39;d&#39;]</tt></p>\r\n</div>', '<p>stable sort in place.</p>\r\n\r\n<p>list.sort(key=None, reverse=False) -&gt; None</p>\r\n\r\n<p><strong>key :</strong> function to change order option<br />\r\n<strong>reverse:</strong> default False if it is changed, the order option is reversed.</p>\r\n\r\n<p><strong><span style="color:#e74c3c">alphabetical</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">John</span>&quot;, &quot;<span style="color:#e67e22;">Angelina</span>&quot;, &quot;<span style="color:#e67e22;">Jack</span>&quot;, &quot;<span style="color:#e67e22;">Marry</span>&quot;, &quot;<span style="color:#e67e22;">Alfred</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.sort()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;Alfred&#39;, &#39;Angelina&#39;, &#39;Jack&#39;, &#39;John&#39;, &#39;Marry&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.sort(reverse = <span style="color:#27ae60;">True</span>)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;Marry&#39;, &#39;John&#39;, &#39;Jack&#39;, &#39;Angelina&#39;, &#39;Alfred&#39;]</tt></p>\r\n</div>\r\n\r\n<p><span style="color:#e74c3c"><strong>numbers</strong></span></p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">100</span>, <span style="color:#1abc9c;">56</span>, <span style="color:#1abc9c;">324</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.sort()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[1, 56, 100, 324]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.sort(reverse = <span style="color:#27ae60;">True</span>)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[324, 100, 56, 1]</tt></p>\r\n</div>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">A</span>&quot;, &quot;<span style="color:#e67e22;">B</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.sort()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;A&#39;, &#39;B&#39;, &#39;a&#39;, &#39;b&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.sort(key = str.lower)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[&#39;A&#39;, &#39;a&#39;, &#39;B&#39;, &#39;b&#39;]</tt></p>\r\n</div>', '<p>Return first index of value. Raises ValueError if the value is not present.</p>\r\n\r\n<p>list.index(value, start, stop) -&gt; integer, start and stop are optional</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;, &quot;<span style="color:#e67e22;">d</span>&quot;, &quot;<span style="color:#e67e22;">e</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.index(&quot;<span style="color:#e67e22;">b</span>&quot;)<br />\r\n1</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.index(&quot;<span style="color:#e67e22;">c</span>&quot;)<br />\r\n2</tt></p>\r\n</div>', '<p>Return number of occurrences of value&nbsp;</p>\r\n\r\n<p>list.count(value) -&gt; integer</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">banana</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;, &quot;<span style="color:#e67e22;">nut</span>&quot;, &quot;<span style="color:#e67e22;">flower</span>&quot;,&quot;<span style="color:#e67e22;">banana</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.count(&quot;<span style="color:#e67e22;">banana</span>&quot;)<br />\r\n2</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.count(&quot;<span style="color:#e67e22;">apple</span>&quot;)<br />\r\n3</tt></p>\r\n</div>', '<p>list.copy() -&gt; list&nbsp;</p>\r\n\r\n<p>A shallow copy of list</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">banana</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;, &quot;<span style="color:#e67e22;">nut</span>&quot;, &quot;<span style="color:#e67e22;">flower</span>&quot;, &quot;<span style="color:#e67e22;">banana</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = a.copy()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b<br />\r\n[&#39;banana&#39;, &#39;apple&#39;, &#39;nut&#39;, &#39;flower&#39;, &#39;banana&#39;, &#39;apple&#39;, &#39;apple&#39;]</tt></p>\r\n</div>', '<p>remove all items from a list.</p>\r\n\r\n<p>list.clear() -&gt; None</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">banana</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;, &quot;<span style="color:#e67e22;">nut</span>&quot;, &quot;<span style="color:#e67e22;">flower</span>&quot;,&quot;<span style="color:#e67e22;">banana</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;, &quot;<span style="color:#e67e22;">apple</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.clear()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n[]</tt></p>\r\n</div>', '<p>The Tuples&nbsp;are a datatype and They&nbsp;have a&nbsp;sequence of values&nbsp;like a list. In a tupple, the values&nbsp;can be any type. The values in a tuple&nbsp;are called elements or sometimes items.The important difference between the tuples and list are mutability. The Tuples are immutable. we can&#39;t change them.</p>', '<p>Tuples can&nbsp;be constructed in a number of ways:</p>\r\n\r\n<p>1. Using a pair of parentheses to denote the empty tuple: &quot;()&quot;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; ()<br />\r\n()</tt></p>\r\n</div>\r\n\r\n<p>2. Using a trailing comma for a singleton tuple: &quot;a&quot;, or &quot;(a,)&quot;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">a</span>&quot;,<br />\r\n(&#39;a&#39;,)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; (&quot;<span style="color:#e67e22;">a</span>&quot;,)<br />\r\n(&#39;a&#39;,)</tt></p>\r\n</div>\r\n\r\n<p>Don&#39;t forget that &quot;a&quot; and (&quot;a&quot;) are string type.</p>\r\n\r\n<p>3. Separating items with commas: &quot;a, b, c&quot; or &quot;(a, b, c)&quot;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;<br />\r\n(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; &quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;,<br />\r\n(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; (&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;)<br />\r\n(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; (&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;,)<br />\r\n(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</tt></p>\r\n</div>\r\n\r\n<p>4. Using the &quot;tuple()&quot; built-in: &quot;tuple()&quot; or &quot;tuple(iterable)&quot;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; tuple()<br />\r\n()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; tuple(&quot;<span style="color:#e67e22;">abcdefgh</span>&quot;)<br />\r\n(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;)</tt></p>\r\n</div>', '<p>To access elements of the tuples, brackets are used. [0]&nbsp;for first element.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;, &quot;<span style="color:#e67e22;">d</span>&quot;, &quot;<span style="color:#e67e22;">e</span>&quot;, &quot;<span style="color:#e67e22;">f</span>&quot;, &quot;<span style="color:#e67e22;">g</span>&quot;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">0</span>]<br />\r\n&#39;a&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">1</span>]<br />\r\n&#39;b&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[:]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">3</span>:<span style="color:#1abc9c;">6</span>]<br />\r\n[&#39;d&#39;, &#39;e&#39;, &#39;f&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[:<span style="color:#1abc9c;">6</span>]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">4</span>:]<br />\r\n[&#39;e&#39;, &#39;f&#39;, &#39;g&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[:<span style="color:#1abc9c;">-1</span>]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[:<span style="color:#1abc9c;">-2</span>]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</tt></p>\r\n</div>', '<p>In order to access elements of a nested tuple, you can use one more bracket&nbsp; [].</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = (<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, (<span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, [&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;]))</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[<span style="color:#1abc9c;">0</span>]<br />\r\n1</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[<span style="color:#1abc9c;">2</span>]<br />\r\n(3, 4, 5, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[<span style="color:#1abc9c;">2</span>][<span style="color:#1abc9c;">0</span>]<br />\r\n3</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[<span style="color:#1abc9c;">2</span>][<span style="color:#1abc9c;">3</span>]<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[<span style="color:#1abc9c;">2</span>][<span style="color:#1abc9c;">3</span>][<span style="color:#1abc9c;">2</span>]<br />\r\n&#39;c&#39;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span>&nbsp;a = ([1, 2, 3, [23, 45, 45, [&quot;target&quot;]]],)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[0][3][3][0]<br />\r\n&#39;target&#39;</tt></p>\r\n</div>', '<p>To access slice of a tuple from *i* to *j*, You can use this expression:&nbsp;[ i : j ]</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = (<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[<span style="color:#1abc9c;">0</span>:<span style="color:#1abc9c;">2</span>]<br />\r\n(1, 2)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[<span style="color:#1abc9c;">3</span>:<span style="color:#1abc9c;">5</span>]<br />\r\n(4, 5)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[:]<br />\r\n(1, 2, 3, 4, 5)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[:<span style="color:#1abc9c;">3</span>]<br />\r\n(1, 2, 3)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[<span style="color:#1abc9c;">2</span>:]<br />\r\n(3, 4, 5)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[::<span style="color:#1abc9c;">-1</span>]<br />\r\n(5, 4, 3, 2, 1)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a[::<span style="color:#1abc9c;">2</span>]<br />\r\n(1, 3, 5)</tt></p>\r\n</div>', '<p>The + operator concatenates tuples.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>)&nbsp;+ (<span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>, <span style="color:#1abc9c;">7</span>)<br />\r\n(1, 2, 3, 4, 5, 6, 7)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>)&nbsp;+ (&quot;<span style="color:#e67e22;">four</span>&quot;, &quot;<span style="color:#e67e22;">five</span>&quot;)&nbsp;+ (<span style="color:#1abc9c;">6</span>, &quot;<span style="color:#e67e22;">seven</span>&quot;)<br />\r\n(1, 2, 3, &#39;four&#39;, &#39;five&#39;, 6, &#39;seven&#39;)</tt></p>\r\n</div>', '<p>The * operator repeats a tuple a&nbsp;given number of times.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt;&nbsp;(<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>)&nbsp;* <span style="color:#1abc9c;">3</span><br />\r\n(1, 2, 3, 1, 2, 3, 1, 2, 3)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;(<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>)&nbsp;* <span style="color:#1abc9c;">5</span><br />\r\n(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)</tt></p>\r\n</div>', '<p>Return True if there is,&nbsp;False otherwise.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt;&nbsp;<span style="color:#1abc9c;">1 </span>in (<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;<span style="color:#1abc9c;">5 </span>in (<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>)<br />\r\nFalse</tt></p>\r\n</div>', '<p>You can use the len() function.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt;&nbsp;a= [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;len(a)<br />\r\n5</tt></p>\r\n</div>', '<p>To delete a tuple, we can use del statement.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b = [1 , 2, 3]</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> del b</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#61&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; b<br />\r\nNameError: name &#39;b&#39; is not defined</span></tt></p>\r\n</div>', '<p>To list the tuple methods, you can use dir() function.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dir(tuple)<br />\r\n[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, <strong>&#39;count&#39;, &#39;index&#39;</strong>]</tt></p>\r\n</div>\r\n\r\n<p>A Tuple has only two important methods. count() and index()</p>\r\n\r\n<h4>count()</h4>\r\n\r\n<p>return number of occurrences of value</p>\r\n\r\n<p>tuple.count(value) -&gt; integer</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:null">&gt;&gt;&gt; a = (&quot;</span><span style="color:#e67e22;">a</span><span style="color:null">&quot;, &quot;</span><span style="color:#e67e22;">b</span><span style="color:null">&quot;, &quot;</span><span style="color:#e67e22;">a</span><span style="color:null">&quot;, &quot;</span><span style="color:#e67e22;">c</span><span style="color:null">&quot;, &quot;</span><span style="color:#e67e22;">a</span><span style="color:null">&quot;, &quot;</span><span style="color:#e67e22;">b</span><span style="color:null">&quot;)</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; a.count(&quot;</span><span style="color:#e67e22;">a</span><span style="color:null">&quot;)<br />\r\n3</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; a.count(&quot;</span><span style="color:#e67e22;">b</span><span style="color:null">&quot;)<br />\r\n2</span></tt></p>\r\n\r\n<p><tt><span style="color:null">&gt;&gt;&gt; a.count(&quot;</span><span style="color:#e67e22;">c</span><span style="color:null">&quot;)<br />\r\n1</span></tt></p>\r\n</div>\r\n\r\n<h4>index()&nbsp;</h4>\r\n\r\n<p>return first index of value. Raises ValueError if the value is not present.</p>\r\n\r\n<p>tuple.index(value, start, stop) -&gt; integer&nbsp; &nbsp;start and stop parameters are optional.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = (&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">c</span>&quot;, &quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.index(&quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\n0</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.index(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">1</span>)<br />\r\n2</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.index(&quot;<span style="color:#e67e22;">a</span>&quot;, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>)<br />\r\n4</tt></p>\r\n</div>', '<p>Dictionaries have two main parts. Key and Value. In order to access elements in a list, you use&nbsp;&nbsp;integer index. However In a dictionary you can keys which can be any type.&nbsp;</p>', '<p>The Dictionaries can be created by placing a comma-separated list of &quot;key: value&quot; pairs within braces{} or dict() function.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; {&quot;<span style="color:#e67e22;">one</span>&quot;: <span style="color:#1abc9c;">1</span>, &quot;<span style="color:#e67e22;">two</span>&quot;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">three</span>&#39;: <span style="color:#1abc9c;">3</span>}<br />\r\n{&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: 3}</tt></p>\r\n</div>\r\n\r\n<p>In the above example&nbsp;keys are &quot;one&quot;, &quot;two&quot; and &quot;three&quot;, values are 1, 2 and 3</p>\r\n\r\n<p>The following examples all return a dictionary equal to &quot;{&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3}&quot;:</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = dict(one=<span style="color:#1abc9c;">1</span>, two=<span style="color:#1abc9c;">2</span>, three=<span style="color:#1abc9c;">3</span>)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = {&#39;<span style="color:#e67e22;">one</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">two</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">three</span>&#39;: <span style="color:#1abc9c;">3</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; c = dict(zip([&#39;<span style="color:#e67e22;">one</span>&#39;, &#39;<span style="color:#e67e22;">two</span>&#39;, &#39;<span style="color:#e67e22;">three</span>&#39;], [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>]))</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; d = dict([(&#39;<span style="color:#e67e22;">two</span>&#39;, <span style="color:#1abc9c;">2</span>), (&#39;<span style="color:#e67e22;">one</span>&#39;, <span style="color:#1abc9c;">1</span>), (&#39;<span style="color:#e67e22;">three</span>&#39;, <span style="color:#1abc9c;">3</span>)])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; e = dict({&#39;<span style="color:#e67e22;">three</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">one</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">two</span>&#39;: <span style="color:#1abc9c;">2</span>})</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a == b == c == d == e<br />\r\nTrue</tt></p>\r\n</div>', '<p>To reach&nbsp;values the dictionary, you can use key in square brackets [ ]&nbsp; and they are arbitrary.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; team = {&quot;<span style="color:#e67e22;">club</span>&quot;: &quot;<span style="color:#e67e22;">Liverpool</span>&quot;, &quot;<span style="color:#e67e22;">win</span>&quot;: <span style="color:#1abc9c;">15</span>, &quot;<span style="color:#e67e22;">lose</span>&quot;: <span style="color:#1abc9c;">3</span>, &quot;<span style="color:#e67e22;">stadium</span>&quot;: &quot;<span style="color:#e67e22;">Anfield Road</span>&quot;, &quot;<span style="color:#e67e22;">last_five_result</span>&quot;:[&quot;<span style="color:#e67e22;">W</span>&quot;,&quot;<span style="color:#e67e22;">W</span>&quot;,&quot;<span style="color:#e67e22;">D</span>&quot;,&quot;<span style="color:#e67e22;">L</span>&quot;,&quot;<span style="color:#e67e22;">W</span>&quot;]}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; team[&quot;<span style="color:#e67e22;">club</span>&quot;]<br />\r\n&#39;Liverpool&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; team[&quot;<span style="color:#e67e22;">stadium</span>&quot;]<br />\r\n&#39;Anfield Road&#39;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; team[&quot;<span style="color:#e67e22;">last_five_result</span>&quot;]<br />\r\n[&#39;W&#39;, &#39;W&#39;, &#39;D&#39;, &#39;L&#39;, &#39;W&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; team[&quot;<span style="color:#e67e22;">last_five_result</span>&quot;][<span style="color:#1abc9c;">0</span>]<br />\r\n&#39;W&#39;</tt></p>\r\n</div>', '<p>To reach all values and keys of the dictionary, you can use keys() and values() methods.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = {&quot;<span style="color:#e67e22;">country</span>&quot;: &quot;<span style="color:#e67e22;">Italy</span>&quot;, &quot;<span style="color:#e67e22;">capital</span>&quot;: &quot;<span style="color:#e67e22;">Rome</span>&quot;, &quot;<span style="color:#e67e22;">language</span>&quot;: &quot;<span style="color:#e67e22;">Italian</span>&quot;}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; keys = a.keys()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list(keys)<br />\r\n[&#39;country&#39;, &#39;capital&#39;, &#39;language&#39;]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; values = a.values()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list(values)<br />\r\n[&#39;Italy&#39;, &#39;Rome&#39;, &#39;Italian&#39;]</tt></p>\r\n</div>', '<p>We can add using<em> dictionary[key] = value </em>command<i>&nbsp;to add an element.</i></p>\r\n\r\n<p>Don&#39;t foregt that the order&nbsp;of items in a dictionary is unpredictable.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = {}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[&quot;<span style="color:#e67e22;">one</span>&quot;] = <span style="color:#1abc9c;">1</span></tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n{&#39;one&#39;: 1}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[&quot;<span style="color:#e67e22;">two</span>&quot;] = <span style="color:#1abc9c;">2</span></tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n{&#39;one&#39;: 1, &#39;two&#39;: 2}</tt></p>\r\n</div>', '<p>The values can be any type such as: integer, string, list, tuple, set, dictionary but the keys can only be the immutable types which are tuples, string and numbers. Mutable types can&#39;t be a key of a dictionary. Such as&nbsp; a list and a dictionary types are not.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; l = [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; d = {}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; d[l] = &quot;<span style="color:#e67e22;">apple</span>&quot;<br />\r\n<span style="color:#e74c3c;">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#49&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; d[l] = &quot;apple&quot;<br />\r\nTypeError: unhashable type: &#39;list&#39;</span></tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; t = (<span style="color:#1abc9c;">1 </span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; d[t] = &quot;<span style="color:#e67e22;">apple</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; d<br />\r\n{(1, 2, 3): &#39;apple&#39;}</tt></p>\r\n</div>', '<p>Because The dictionaries are mutable, you can change them.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; d = {&#39;<span style="color:#e67e22;">one</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">two</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">three</span>&#39;: <span style="color:#1abc9c;">3</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; d[&quot;<span style="color:#e67e22;">one</span>&quot;] = <span style="color:#1abc9c;">111111</span></tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; d<br />\r\n{&#39;one&#39;: 111111, &#39;two&#39;: 2, &#39;three&#39;: 3}</tt></p>\r\n</div>', '<p>This way is very easy&nbsp;to construct a complex a dictonary.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; letters =&quot;<span style="color:#e67e22;">abcdefgh</span>&quot;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dictionary = {letter: letters.index(letter) for letter in letters}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dictionary<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}</tt></p>\r\n</div>', '<p>Let&#39;s for looping with an example.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#c0392b;"># example.py</span><br />\r\nteam = {&quot;<span style="color:#e67e22;">club</span>&quot;: &quot;<span style="color:#e67e22;">Liverpool</span>&quot;, &quot;<span style="color:#e67e22;">win</span>&quot;:<span style="color:#1abc9c;">15</span>, &quot;<span style="color:#e67e22;">lose</span>&quot;:<span style="color:#1abc9c;">3</span>, &quot;<span style="color:#e67e22;">stadium</span>&quot;:&quot;<span style="color:#e67e22;">Anfield Road</span>&quot;, &quot;<span style="color:#e67e22;">last_five_result</span>&quot;: [&quot;<span style="color:#e67e22;">W</span>&quot;,&quot;<span style="color:#e67e22;">W</span>&quot;,&quot;<span style="color:#e67e22;">D</span>&quot;,&quot;<span style="color:#e67e22;">L</span>&quot;,&quot;<span style="color:#e67e22;">W</span>&quot; ]}<br />\r\nfor key in team:<br />\r\n&nbsp; &nbsp; print(key, &quot;<span style="color:#e67e22;">:</span>&quot;, &nbsp;team[key])</tt></p>\r\n\r\n<hr />\r\n<p><tt>club : Liverpool<br />\r\nwin : 15<br />\r\nlose : 3<br />\r\nstadium : Anfield Road<br />\r\nlast_five_result : [&#39;W&#39;, &#39;W&#39;, &#39;D&#39;, &#39;L&#39;, &#39;W&#39;]</tt></p>\r\n</div>', '<p>There are two options.</p>\r\n\r\n<h4>1. dict2 = dict1</h4>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict2 = dict1</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1[&quot;<span style="color:#e67e22;">g</span>&quot;] = <span style="color:#1abc9c;">8</span></tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5,&nbsp;<strong>&#39;g&#39;: 8,&nbsp;</strong>&#39;h&#39;: 7}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5,&nbsp;<strong>&#39;g&#39;: 8,</strong>&nbsp;&#39;h&#39;: 7</tt></p>\r\n</div>\r\n\r\n<p>In above example, if&nbsp;you change dict1, you will see that you change dict2, too and vice versa. If you don&#39;t want this, you should use other&nbsp;option(copy() method) .</p>\r\n\r\n<h4>2. dict2 dict1.copy()</h4>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict2 = dict1.copy()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1[&quot;g&quot;] = 8</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5,&nbsp;<strong>&#39;g&#39;: 8</strong>, &#39;h&#39;: 7}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5,&nbsp;<strong>&#39;g&#39;: 6,</strong>&nbsp;&#39;h&#39;: 7}</tt></p>\r\n</div>', '<p>To see methods of the dictionary, you can use dir() function like this:</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dir(dict)<br />\r\n[&#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;,<strong> &#39;clear&#39;, &#39;copy&#39;, &#39;fromkeys&#39;, &#39;get&#39;, &#39;items&#39;, &#39;keys&#39;, &#39;pop&#39;, &#39;popitem&#39;, &#39;setdefault&#39;, &#39;update&#39;, &#39;values&#39;</strong>]</tt></p>\r\n</div>\r\n\r\n<p>1. clear()<br />\r\n2. copy()<br />\r\n3. fromkeys()<br />\r\n4. get()<br />\r\n5. items()<br />\r\n6. keys()<br />\r\n7. pop()<br />\r\n8. popitem()<br />\r\n9. setdefault()<br />\r\n10. update()<br />\r\n11. values()</p>', '<p>dict.keys() -&gt; a set-like object providing a view on key of a dictionary.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.keys()<br />\r\ndict_keys([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list(a.keys())<br />\r\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;]</tt></p>\r\n</div>', '<p>D.values() -&gt; an object providing a view on values of a dictionariy.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.values()<br />\r\ndict_values([0, 1, 2, 3, 4, 5, 6, 7])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list(a.values())<br />\r\n[0, 1, 2, 3, 4, 5, 6, 7]</tt></p>\r\n</div>', '<p>dict.items() -&gt; a set-like object providing a view on all elements of a dictionary.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.items()<br />\r\ndict_items([(&#39;a&#39;, 0), (&#39;b&#39;, 1), (&#39;c&#39;, 2), (&#39;d&#39;, 3), (&#39;e&#39;, 4), (&#39;f&#39;, 5), (&#39;g&#39;, 6), (&#39;h&#39;, 7)])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; list(a.items())<br />\r\n[(&#39;a&#39;, 0), (&#39;b&#39;, 1), (&#39;c&#39;, 2), (&#39;d&#39;, 3), (&#39;e&#39;, 4), (&#39;f&#39;, 5), (&#39;g&#39;, 6), (&#39;h&#39;, 7)]</tt></p>\r\n\r\n<hr />\r\n<p><tt>a = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}<br />\r\nfor key, value in a.items():<br />\r\n&nbsp; &nbsp; print(key, &quot;&rarr;&quot;, value)</tt></p>\r\n\r\n<p><tt>a &rarr; 0<br />\r\nb &rarr; 1<br />\r\nc &rarr; 2<br />\r\nd &rarr; 3<br />\r\ne &rarr; 4<br />\r\nf &rarr; 5<br />\r\ng &rarr; 6<br />\r\nh &rarr; 7</tt></p>\r\n</div>', '<p>dict.get(k, d]) -&gt; D[k] if k in D, else d. &nbsp;d is optional and defaults to None.</p>\r\n\r\n<p>D[k] if k is not&nbsp; in a dictionary, then Python give an error. But get() method do not.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.get(&quot;c&quot;)<br />\r\n2</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.get(&quot;f&quot;)<br />\r\n5</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.get(&quot;z&quot;, &quot;There is no &#39;z&#39; in the dictionary&quot;)<br />\r\n&quot;There is no &#39;z&#39; in the dictionary&quot;</tt></p>\r\n</div>\r\n\r\n<p>&nbsp;</p>', '<p>Remove all items from a dictionary.</p>\r\n\r\n<p>D.clear() -&gt; None. &nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.clear()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n{}</tt></p>\r\n</div>', '<p>dict.copy() -&gt; a shallow copy of the dictionary</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict2 = dict1.copy()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1[&quot;g&quot;] = 8</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 8, &#39;h&#39;: 7}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict2<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}</tt><br />\r\n&nbsp;</p>\r\n</div>', '<p>Returns a new dict with keys from iterable and values equal to value.</p>\r\n\r\n<p>fromkeys(iterable, value=None)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict.fromkeys(&quot;<span style="color:#e67e22;">abc</span>&quot;)<br />\r\n{&#39;a&#39;: None, &#39;b&#39;: None, &#39;c&#39;: None}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict.fromkeys(&quot;<span style="color:#e67e22;">abc</span>&quot;, <span style="color:#1abc9c;">1</span>)<br />\r\n{&#39;a&#39;: 1, &#39;b&#39;: 1, &#39;c&#39;: 1}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict.fromkeys(&quot;<span style="color:#e67e22;">abc</span>&quot;, [<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>])<br />\r\n{&#39;a&#39;: [1, 2, 3], &#39;b&#39;: [1, 2, 3], &#39;c&#39;: [1, 2, 3]}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict.fromkeys([<span style="color:#1abc9c;">1 </span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>])<br />\r\n{1: None, 2: None, 3: None</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict.fromkeys([<span style="color:#1abc9c;">1 </span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>], &quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\n{1: &#39;a&#39;, 2: &#39;a&#39;, 3: &#39;a&#39;}</tt></p>\r\n</div>', '<p>remove specified key and return the corresponding value. If key is not found, d is optional and returned if given, otherwise KeyError is raised</p>\r\n\r\n<p>dict.pop(k, d) -&gt; value of dict[k]</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.pop(&quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\n0</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.pop(&quot;<span style="color:#e67e22;">d</span>&quot;)<br />\r\n3</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1<br />\r\n{&#39;b&#39;: 1, &#39;c&#39;: 2, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.pop(&quot;<span style="color:#e67e22;">d</span>&quot;, &quot;<span style="color:#e67e22;">Sorry There is no &#39;d&#39; here</span>&quot;)<br />\r\n&quot;Sorry There is no &#39;d&#39; here&quot;<br />\r\n&gt;&gt;&gt; dict.pop(&quot;d&quot;)<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#149&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; dict.pop(&quot;d&quot;)<br />\r\nTypeError: descriptor &#39;pop&#39; requires a &#39;dict&#39; object but received a &#39;str&#39;</span></tt></p>\r\n</div>', '<p>remove and return some (key, value) pair as a 2-tuple; but raise KeyError if the dict&nbsp;is empty.</p>\r\n\r\n<p>dict.popitem() -&gt; (k, v)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;h&#39;, 7)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;g&#39;, 6)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;f&#39;, 5)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;e&#39;, 4)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;d&#39;, 3)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;c&#39;, 2)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;b&#39;, 1)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.popitem()<br />\r\n(&#39;a&#39;, 0)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.popitem()<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#161&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; dict1.popitem()<br />\r\nKeyError: &#39;popitem(): dictionary is empty&#39;</span></tt></p>\r\n</div>', '<p>dict.setdefault(k, d) -&gt; D.get(k,d),&nbsp; also set D[k]=d if k not in the dictionary. d is optional</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&#39;<span style="color:#e67e22;">a</span>&#39;: <span style="color:#1abc9c;">0</span>, &#39;<span style="color:#e67e22;">b</span>&#39;: <span style="color:#1abc9c;">1</span>, &#39;<span style="color:#e67e22;">c</span>&#39;: <span style="color:#1abc9c;">2</span>, &#39;<span style="color:#e67e22;">d</span>&#39;: <span style="color:#1abc9c;">3</span>, &#39;<span style="color:#e67e22;">e</span>&#39;: <span style="color:#1abc9c;">4</span>, &#39;<span style="color:#e67e22;">f</span>&#39;: <span style="color:#1abc9c;">5</span>, &#39;<span style="color:#e67e22;">g</span>&#39;: <span style="color:#1abc9c;">6</span>, &#39;<span style="color:#e67e22;">h</span>&#39;: <span style="color:#1abc9c;">7</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.setdefault(&quot;<span style="color:#e67e22;">a</span>&quot;)<br />\r\n0</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.setdefault(&quot;<span style="color:#e67e22;">k</span>&quot; , <span style="color:#1abc9c;">8</span>)<br />\r\n8</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7, &#39;k&#39;: 8}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.setdefault(&quot;<span style="color:#e67e22;">z</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 0, &#39;b&#39;: 1, &#39;c&#39;: 2, &#39;d&#39;: 3, &#39;e&#39;: 4, &#39;f&#39;: 5, &#39;g&#39;: 6, &#39;h&#39;: 7, &#39;k&#39;: 8, &#39;z&#39;: None}</tt></p>\r\n</div>', '<p>Update the dictionary with new dictionary</p>\r\n\r\n<p>dict.update(new_dict)&nbsp;-&gt; None</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dict1 = {&quot;<span style="color:#e67e22;">a</span>&quot;: <span style="color:#1abc9c;">1</span>, &quot;<span style="color:#e67e22;">b</span>&quot;: <span style="color:#1abc9c;">2</span>, &quot;<span style="color:#e67e22;">c</span>&quot;: <span style="color:#1abc9c;">3</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; new_dict = {&quot;<span style="color:#e67e22;">a</span>&quot;: <span style="color:#1abc9c;">11</span>, &quot;<span style="color:#e67e22;">b</span>&quot;: <span style="color:#1abc9c;">22</span>, &quot;<span style="color:#e67e22;">c</span>&quot;: <span style="color:#1abc9c;">33</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.update(new_dict)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 11, &#39;b&#39;: 22, &#39;c&#39;: 33}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.update({&quot;<span style="color:#e67e22;">a</span>&quot;: <span style="color:#1abc9c;">111</span>})</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 111, &#39;b&#39;: 22, &#39;c&#39;: 33}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1.update({&quot;<span style="color:#e67e22;">d</span>&quot;: <span style="color:#1abc9c;">44</span>})</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; dict1<br />\r\n{&#39;a&#39;: 111, &#39;b&#39;: 22, &#39;c&#39;: 33, &#39;d&#39;: 44}</tt></p>\r\n</div>'], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], ['In this tutorial you can learn the lists in Python.', 'In this tutorial you can learn how to define a list in Python', 'In this tutorial you can learn how to access the elements of the lists in Pythton', 'In this tutorial you can learn how to reach nested lists in Python.', 'In this tutorial you can learn how to change elements of the lists in Python.', 'In this tutorial you can learn how to use slices lists in Python.', 'In this tutorial you can learn how to use addition and multiplication operators with the lists in Python.', 'In this tutorial you can learn how to use in statement with lists in Python.', 'In this tutorial you can learn how to find length of a list in Python.', 'In this tutorial you can learn how to remove the elements of the lists in Pythton', 'In this tutorial you can learn how to copy a list in Pythton.', 'In this tutorial you can learn how to use for loop with a list in Pythton.', 'In this tutorial you can learn how to construct list comprehensions in Pythton.', 'In this tutorial you can learn the list methods in Python.', 'In this tutorial you can learn how to use append() list method in Pythton.', 'In this tutorial you can learn how to use extend list method in Pythton.', 'In this tutorial you can learn how to use insert() list method in Pythton.', 'In this tutorial you can learn how to use remove list method in Pythton.', 'In this tutorial you can learn how to use reverse list method in Pythton.', 'In this tutorial you can learn how to use poplist method in Pythton.', 'In this tutorial you can learn how to use sort() list method in Pythton.', 'In this tutorial you can learn how to use index() list method in Pythton.', 'In this tutorial you can learn how to use count() list method in Pythton.', 'In this tutorial you can learn how to use extend copy() method in Pythton.', 'In this tutorial you can learn how to use clear() list method in Pythton.', 'In this tutorial you can learn the tuples in Python.', 'In this tutorial you can learn how to define a tuple Pythton.', 'In this tutorial you can learn how to access a tuple element in Pythton.', 'In this tutorial you can learn how to access a nested tuple element in Pythton.', 'In this tutorial you can learn how to use tuple slices in Pythton.', 'In this tutorial you can learn how to use addition operator with a tuple in Pythton.', 'In this tutorial you can learn how to use multiplication operator with a tuple in Pythton.', 'In this tutorial you can learn how to use in statement with tuples in Python', 'In this tutorial you can learn length of a tuple in Python', 'In this tutorial you can learn how to delete a tuple in Python.', 'In this tutorial you can learn tuple methods in Python.', 'In this tutorial you can learn dictionaries in Python', 'In this tutorial you can learn how to use Define dictionaries in Python', 'In this tutorial you can learn how to  Access the elements of a dictionary in Python', 'In this tutorial you can learn how to use keys() and values() methods in Python', 'In this tutorial you can learn how to Add elements inside a dictionary in Python', 'In this tutorial you can learn dictionary structure in Python', 'In this tutorial you can learn how to change the dictionaries in Python', 'In this tutorial you can learn how to construct dictionary comprehensions in Python', 'In this tutorial you can learn how to use for loops with the dictionaries in Python', 'In this tutorial you can learn how to copy a dictionary in Python', 'In this tutorial you can learn dictionary methods in Python.', 'In this tutorial you can learn how to use keys() in Python', 'In this tutorial you can learn how to use values() dictionary method in Python', 'In this tutorial you can learn how to use items() dictionary method in Python', 'In this tutorial you can learn how to use get() dictionary method in Python', 'In this tutorial you can learn how to use clear() dictionary method in Python', 'In this tutorial you can learn how to use copy() dictionary method in Python', 'In this tutorial you can learn how to use fromkeys() dictionary method in Python', 'In this tutorial you can learn how to use pop() dictionary method in Python', 'In this tutorial you can learn how to use popitem() dictionary method in Python', 'In this tutorial you can learn how to use setdefault() dictionary method in Python', 'In this tutorial you can learn how to use update() dictionary method in Python'], ['Lists in Python', 'defining the lists', 'Accessing the elements of the lists', 'nested lists', 'Changing list elements', 'Slices lists', 'Addition and Multiplication operators in the lists', 'in statement with lists', 'Length of the lists', 'del statement in lists', 'Copying the lists', 'for loops with the lists', 'List Comprehensions', 'list methods', 'append()', 'extend()', 'insert()', 'remove()', 'reverse()', 'pop()', 'sort()', 'index()', 'count()', 'copy()', 'clear()', 'Tuples', 'Defining tuples', 'Accessing tuple elements', 'Nested tuples', 'Tuple slices', 'Addition operators with tuples', 'Multiplication operators with tuples', 'Usage of in statement with tuples', 'Length of a tuple', 'Deleting a tuple', 'Tuple methods', 'Dictionaries', 'Define dictionaries', 'Accessing the elements of a dictionary', 'keys() and values() methods', 'Adding elements inside a dictionary', 'Dictionary structure', 'Changing the dictionaries', 'Dictionary Comprehensions', 'for loops in the dictionaries', 'Copy a dictionary', 'Dictionary Methods', 'keys() in the dictionaries', 'values() in the dictionaries', 'items() in the dictionaries', 'get() in the dictionaries', 'clear() in the dictionaries', 'copy() in the dictionaries', 'fromkeys() in the dictionaries', 'pop() in the dictionaries', 'popitem() in the dictionaries', 'setdefault() in the dictionaries', 'update() in the dictionaries'], ['Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Lists', 'Tuples', 'Tuples', 'Tuples', 'Tuples', 'Tuples', 'Tuples', 'Tuples', 'Tuples', 'Tuples', 'Tuples', 'Tuples', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries', 'Dictionaries'], ['ana1', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'ana1', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'ana1', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']]